# S1 - C·∫≠p nh·∫≠t theo logic TradingView
# Thay th·∫ø cho file s1.py hi·ªán t·∫°i

import logging
import json
import pandas as pd
import os
import time
import pytz
import traceback
import sys
import io
import re
from datetime import datetime, timedelta
from telegram import Update, Bot, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue, ConversationHandler, MessageHandler, Filters
from binance.client import Client
from openpyxl import Workbook
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis
from openpyxl.chart.marker import Marker
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter
from init_pivots import parse_pivot_input, save_initial_pivots

# Define conversation states
WAITING_FOR_PIVOT_LL = 1
WAITING_FOR_PIVOT_LH = 2
WAITING_FOR_PIVOT_HL = 3
WAITING_FOR_PIVOT_HH = 4

# Thi·∫øt l·∫≠p m√£ h√≥a UTF-8 cho ƒë·∫ßu ra ti√™u chu·∫©n
if sys.stdout.encoding != 'utf-8':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    
# ƒê·∫£m b·∫£o bi·∫øn m√¥i tr∆∞·ªùng PYTHONIOENCODING ƒë∆∞·ª£c thi·∫øt l·∫≠p
os.environ["PYTHONIOENCODING"] = "utf-8"

# Import c·∫•u h√¨nh t·ª´ config.py
from config import TOKEN, BINANCE_API_KEY, BINANCE_API_SECRET, CHAT_ID
from config import LOG_FILE, PATTERN_LOG_FILE, DEBUG_LOG_FILE, EXCEL_FILE, ENVIRONMENT
    
# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ensure log files exist
for file in [LOG_FILE, PATTERN_LOG_FILE, DEBUG_LOG_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            f.write("=== Log Initialized ===\n")

# Initialize Binance Client
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

def save_log(log_message, filename):
    """Ghi log v·ªõi timestamp v√† format nh·∫•t qu√°n"""
    try:
        # Th√™m timestamp n·∫øu d√≤ng log kh√¥ng ph·∫£i l√† d√≤ng tr·ªëng
        if log_message.strip():
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            formatted_message = f"[{timestamp}] {log_message}"
        else:
            formatted_message = log_message

        with open(filename, "a", encoding="utf-8") as f:
            f.write(formatted_message + "\n")
    except Exception as e:
        print(f"Error saving log: {str(e)}")
        
# Th√™m h√†m ƒë·ªÉ set c√°c gi√° tr·ªã n√†y
def set_current_time_and_user(current_time, current_user):
    """Set th·ªùi gian hi·ªán t·∫°i v√† user"""
    try:
        # L·∫•y th·ªùi gian hi·ªán t·∫°i UTC
        utc_dt = datetime.now(pytz.UTC)
        # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        vn_time = utc_dt.astimezone(vn_tz)
        
        # Set time v√† user
        pivot_data.current_time = vn_time.strftime('%H:%M')  # Ch·ªâ l·∫•y gi·ªù:ph√∫t
        pivot_data.user = current_user  # S·ª≠a t·ª´ current_user th√†nh user
        
        # Log th√¥ng tin
        save_log("\n=== C·∫≠p nh·∫≠t th√¥ng tin phi√™n ===", DEBUG_LOG_FILE)
        save_log(f"UTC time: {utc_dt.strftime('%Y-%m-%d %H:%M:%S')}", DEBUG_LOG_FILE)
        save_log(f"Vietnam time: {vn_time.strftime('%Y-%m-%d %H:%M:%S (GMT+7)')}", DEBUG_LOG_FILE)
        save_log(f"Pivot time format: {pivot_data.current_time}", DEBUG_LOG_FILE)
        save_log(f"User: {current_user}", DEBUG_LOG_FILE)
        save_log("="*30, DEBUG_LOG_FILE)
        return True

    except Exception as e:
        save_log(f"Error setting time and user: {str(e)}", DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        return False
                
class PivotData:
    def __init__(self, user="lenhat20791"):
        """
        Kh·ªüi t·∫°o S1 bot
        Args:
            user: T√™n ng∆∞·ªùi d√πng
        """
        # C√°c h·∫±ng s·ªë
        self.LEFT_BARS = 5          # S·ªë n·∫øn so s√°nh b√™n tr√°i
        self.RIGHT_BARS = 5         # S·ªë n·∫øn so s√°nh b√™n ph·∫£i
        self.MIN_BARS_BETWEEN_PIVOTS = 4  # Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c pivot

        # Kh·ªüi t·∫°o c√°c bi·∫øn
        self.price_history = []     # L∆∞u to√†n b·ªô l·ªãch s·ª≠ gi√°
        self.confirmed_pivots = []  # L∆∞u c√°c pivot ƒë√£ x√°c nh·∫≠n
        self.current_time = None    # Th·ªùi gian hi·ªán t·∫°i
        self.user = user           # T√™n ng∆∞·ªùi d√πng

        save_log("=== S1 Bot Initialized ===", DEBUG_LOG_FILE)
        save_log(f"üë§ User: {self.user}", DEBUG_LOG_FILE)
        save_log(f"‚öôÔ∏è Settings:", DEBUG_LOG_FILE)
        save_log(f"  - Left bars: {self.LEFT_BARS}", DEBUG_LOG_FILE)
        save_log(f"  - Right bars: {self.RIGHT_BARS}", DEBUG_LOG_FILE)
        save_log(f"  - Min bars between pivots: {self.MIN_BARS_BETWEEN_PIVOTS}", DEBUG_LOG_FILE)
        
    def set_current_time(self, time):
        """C·∫≠p nh·∫≠t current_time"""
        self.current_time = time
        save_log(f"‚è∞ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian: {time}", DEBUG_LOG_FILE)    
        
    def clear_all(self):
        """Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.price_history.clear()
        self.confirmed_pivots.clear()
        
        save_log("\n=== Reset To√†n B·ªô D·ªØ Li·ªáu ===", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a price history", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a confirmed pivots", DEBUG_LOG_FILE)
        save_log("==============================", DEBUG_LOG_FILE)  
              
    def process_new_data(self, data):
        """
        X·ª≠ l√Ω khi c√≥ d·ªØ li·ªáu m·ªõi - h√†m duy nh·∫•t ƒë·ªÉ x·ª≠ l√Ω n·∫øn m·ªõi
        """
        try:
            # L·∫•y th·ªùi gian hi·ªán t·∫°i UTC
            utc_now = datetime.now(pytz.UTC)
            vn_now = utc_now.astimezone(pytz.timezone('Asia/Ho_Chi_Minh'))
            
            # Th√™m th√¥ng tin th·ªùi gian v√†o data
            data.update({
                'time': utc_now.strftime('%H:%M'),         # Gi·ªù UTC cho pivot
                'utc_date': utc_now.strftime('%Y-%m-%d'),  # Ng√†y UTC
                'vn_time': vn_now.strftime('%H:%M'),       # Gi·ªù VN
                'vn_date': vn_now.strftime('%Y-%m-%d'),    # Ng√†y VN
                'vn_datetime': vn_now.strftime('%Y-%m-%d %H:%M')  # Datetime VN ƒë·∫ßy ƒë·ªß
            })
            
            # 1. Th√™m n·∫øn m·ªõi v√†o l·ªãch s·ª≠
            self.price_history.append(data)
            
            # Log th√¥ng tin n·∫øn m·ªõi
            save_log(f"\n=== N·∫øn m·ªõi {data['vn_datetime']} ===", DEBUG_LOG_FILE)
            save_log(f"üìä High: ${data['high']:,.2f}, Low: ${data['low']:,.2f}", DEBUG_LOG_FILE)
            save_log(f"üìà T·ªïng s·ªë n·∫øn: {len(self.price_history)}", DEBUG_LOG_FILE)
            
            # 2. N·∫øu kh√¥ng ƒë·ªß n·∫øn cho c·ª≠a s·ªï pivot, tho√°t
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß n·∫øn ƒë·ªÉ ph√°t hi·ªán pivot ({len(self.price_history)}/{self.LEFT_BARS + self.RIGHT_BARS + 1})", DEBUG_LOG_FILE)
                return True
            
            # 3. Ph√°t hi·ªán pivot - s·ª≠ d·ª•ng n·∫øn ·ªü gi·ªØa c·ª≠a s·ªï
            center_idx = len(self.price_history) - self.RIGHT_BARS - 1
            center_candle = self.price_history[center_idx]
            
            # 4. Ph√¢n t√≠ch c·∫£ n·∫øn thay v√¨ t√°ch bi·ªát high v√† low
            self.analyze_candle(center_candle)
            
            return True
                
        except Exception as e:
            save_log(f"\n‚ùå L·ªñI X·ª¨ L√ù N·∫æN M·ªöI:", DEBUG_LOG_FILE)
            save_log(f"- Chi ti·∫øt: {str(e)}", DEBUG_LOG_FILE)
            save_log(f"- Trace: {traceback.format_exc()}", DEBUG_LOG_FILE)
            return False

    def analyze_candle(self, candle_data):
        """Ph√¢n t√≠ch c·∫£ n·∫øn ƒë·ªÉ ph√°t hi·ªán pivot thay v√¨ t√°ch bi·ªát high v√† low"""
        try:
            high_pivot = self.detect_pivot(candle_data['high'], 'high')
            low_pivot = self.detect_pivot(candle_data['low'], 'low')
            
            # N·∫øu c·∫£ high v√† low ƒë·ªÅu l√† pivot, √°p d·ª•ng c√°c quy t·∫Øc ∆∞u ti√™n
            if high_pivot and low_pivot:
                # X√°c ƒë·ªãnh xu h∆∞·ªõng g·∫ßn ƒë√¢y
                recent_trend = self._determine_recent_trend()
                
                save_log(f"\n‚ö†Ô∏è C·∫£ high v√† low ƒë·ªÅu l√† pivot, xu h∆∞·ªõng g·∫ßn ƒë√¢y: {recent_trend}", DEBUG_LOG_FILE)
                
                if recent_trend == 'bullish':
                    # ∆Øu ti√™n pivot high trong xu h∆∞·ªõng tƒÉng
                    self._add_confirmed_pivot(high_pivot)
                    save_log(f"‚úÖ ∆Øu ti√™n pivot HIGH (${high_pivot['price']:,.2f}) - {high_pivot['type']} trong xu h∆∞·ªõng tƒÉng", DEBUG_LOG_FILE)
                else:
                    # ∆Øu ti√™n pivot low trong xu h∆∞·ªõng gi·∫£m
                    self._add_confirmed_pivot(low_pivot)
                    save_log(f"‚úÖ ∆Øu ti√™n pivot LOW (${low_pivot['price']:,.2f}) - {low_pivot['type']} trong xu h∆∞·ªõng gi·∫£m", DEBUG_LOG_FILE)
            else:
                # X·ª≠ l√Ω b√¨nh th∆∞·ªùng n·∫øu ch·ªâ m·ªôt trong hai l√† pivot
                if high_pivot:
                    self._add_confirmed_pivot(high_pivot)
                if low_pivot:
                    self._add_confirmed_pivot(low_pivot)
            
            # C·∫≠p nh·∫≠t Excel n·∫øu c√≥ pivot m·ªõi
            if high_pivot or low_pivot:
                self.save_to_excel()
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√¢n t√≠ch n·∫øn: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            
    def _determine_recent_trend(self):
        """X√°c ƒë·ªãnh xu h∆∞·ªõng g·∫ßn ƒë√¢y d·ª±a v√†o c√°c pivot g·∫ßn nh·∫•t"""
        try:
            if len(self.confirmed_pivots) < 4:
                return 'neutral'  # Kh√¥ng ƒë·ªß d·ªØ li·ªáu
                
            # L·∫•y 2 pivot high v√† 2 pivot low g·∫ßn nh·∫•t
            high_pivots = [p for p in self.confirmed_pivots if p['direction'] == 'high']
            low_pivots = [p for p in self.confirmed_pivots if p['direction'] == 'low']
            
            # S·∫Øp x·∫øp theo th·ªùi gian (m·ªõi nh·∫•t ƒë·∫ßu ti√™n)
            high_pivots = sorted(high_pivots, 
                                key=lambda x: datetime.strptime(x["time"], "%H:%M"), 
                                reverse=True)
            low_pivots = sorted(low_pivots, 
                               key=lambda x: datetime.strptime(x["time"], "%H:%M"), 
                               reverse=True)
            
            if len(high_pivots) < 2 or len(low_pivots) < 2:
                return 'neutral'  # Kh√¥ng ƒë·ªß d·ªØ li·ªáu
                
            # Ki·ªÉm tra 2 high g·∫ßn nh·∫•t
            if high_pivots[0]['type'] == 'HH' and high_pivots[1]['type'] == 'HH':
                return 'bullish'  # 2 HH li√™n ti·∫øp: xu h∆∞·ªõng tƒÉng m·∫°nh
                
            # Ki·ªÉm tra 2 low g·∫ßn nh·∫•t
            if low_pivots[0]['type'] == 'LL' and low_pivots[1]['type'] == 'LL':
                return 'bearish'  # 2 LL li√™n ti·∫øp: xu h∆∞·ªõng gi·∫£m m·∫°nh
                
            # N·∫øu pivot high g·∫ßn nh·∫•t l√† HH v√† pivot low g·∫ßn nh·∫•t l√† HL
            if (high_pivots and low_pivots and 
                high_pivots[0]['type'] == 'HH' and low_pivots[0]['type'] == 'HL'):
                return 'bullish'  # HH + HL: xu h∆∞·ªõng tƒÉng
                
            # N·∫øu pivot high g·∫ßn nh·∫•t l√† LH v√† pivot low g·∫ßn nh·∫•t l√† LL
            if (high_pivots and low_pivots and 
                high_pivots[0]['type'] == 'LH' and low_pivots[0]['type'] == 'LL'):
                return 'bearish'  # LH + LL: xu h∆∞·ªõng gi·∫£m
            
            # Tr∆∞·ªùng h·ª£p kh√°c
            return 'neutral'
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi x√°c ƒë·ªãnh xu h∆∞·ªõng: {str(e)}", DEBUG_LOG_FILE)
            return 'neutral'  # Default to neutral on error

    def detect_pivot(self, price, direction):
        """
        Ph√°t hi·ªán pivot theo logic TradingView ch√≠nh x√°c
        Args:
            price: Gi√° c·ªßa ƒëi·ªÉm pivot ti·ªÅm nƒÉng
            direction: 'high' ho·∫∑c 'low'
        Returns:
            dict: Pivot m·ªõi ho·∫∑c None
        """
        try:
            save_log(f"\n=== Ki·ªÉm tra pivot {direction.upper()} (${price:,.2f}) ===", DEBUG_LOG_FILE)
            
            # 1. Ki·ªÉm tra ƒë·ªß s·ªë n·∫øn
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß n·∫øn ƒë·ªÉ x√°c ƒë·ªãnh pivot", DEBUG_LOG_FILE)
                return None

            # 2. L·∫•y c·ª≠a s·ªï hi·ªán t·∫°i (11 n·∫øn)
            window = self.price_history[-(self.LEFT_BARS + self.RIGHT_BARS + 1):]
            center_idx = self.LEFT_BARS
            center_candle = window[center_idx]
            center_time = center_candle['time']
            
            # Kh·ªüi t·∫°o bi·∫øn date v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
            utc_date = datetime.now(pytz.UTC).strftime('%Y-%m-%d')
            vn_date = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime('%Y-%m-%d')
            vn_datetime = None
            utc_datetime = None
            
            # L·∫•y th√¥ng tin ng√†y gi·ªù ch√≠nh x√°c c·ªßa n·∫øn
            if 'test_time' in center_candle:
                # N·∫øu c√≥ test_time (ƒë√£ l√† gi·ªù UTC), chuy·ªÉn sang gi·ªù Vi·ªát Nam
                utc_dt = datetime.strptime(center_candle['test_time'], '%Y-%m-%d %H:%M')
                utc_date = utc_dt.strftime('%Y-%m-%d')
                utc_time = utc_dt.strftime('%H:%M')
                utc_datetime = f"{utc_date} {utc_time}"
                
                vn_dt = utc_dt + timedelta(hours=7)
                vn_time = vn_dt.strftime('%H:%M')
                vn_date = vn_dt.strftime('%Y-%m-%d')
                vn_datetime = f"{vn_date} {vn_time}"
            elif 'vn_datetime' in center_candle:
                # N·∫øu ƒë√£ c√≥ s·∫µn vn_datetime
                vn_datetime = center_candle['vn_datetime']
                # Tr√≠ch xu·∫•t date t·ª´ vn_datetime
                try:
                    vn_dt = datetime.strptime(vn_datetime, '%Y-%m-%d %H:%M')
                    vn_date = vn_dt.strftime('%Y-%m-%d')
                    utc_dt = vn_dt - timedelta(hours=7)
                    utc_date = utc_dt.strftime('%Y-%m-%d') 
                    utc_time = utc_dt.strftime('%H:%M')
                    utc_datetime = f"{utc_date} {utc_time}"
                except:
                    pass
            else:
                # X·ª≠ l√Ω khi kh√¥ng c√≥ th√¥ng tin th·ªùi gian ƒë·∫ßy ƒë·ªß
                save_log(f"‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin th·ªùi gian ƒë·∫ßy ƒë·ªß cho n·∫øn, s·ª≠ d·ª•ng th·ªùi gian UTC m·∫∑c ƒë·ªãnh", DEBUG_LOG_FILE)
                utc_time = center_candle.get('time', '')
                utc_datetime = f"{utc_date} {utc_time}"
                
                # T√≠nh th·ªùi gian Vi·ªát Nam
                try:
                    utc_dt = datetime.strptime(utc_datetime, '%Y-%m-%d %H:%M')
                    vn_dt = utc_dt + timedelta(hours=7)
                    vn_datetime = vn_dt.strftime('%Y-%m-%d %H:%M')
                    vn_date = vn_dt.strftime('%Y-%m-%d')
                except:
                    vn_datetime = f"{vn_date} {center_time}"
                    
            # Ki·ªÉm tra xem n·∫øn trung t√¢m c√≥ n·∫±m trong kho·∫£ng th·ªùi gian test hay kh√¥ng
            if hasattr(self, 'test_start_time_vn') and hasattr(self, 'test_end_time_vn'):
                if vn_datetime:
                    try:
                        pivot_dt = datetime.strptime(vn_datetime, '%Y-%m-%d %H:%M')
                        start_dt = datetime.strptime(self.test_start_time_vn, '%Y-%m-%d %H:%M:%S')
                        end_dt = datetime.strptime(self.test_end_time_vn, '%Y-%m-%d %H:%M:%S')
                        
                        if pivot_dt < start_dt:
                            save_log(f"‚ö†Ô∏è B·ªè qua pivot t·∫°i {vn_datetime} - n·∫±m tr∆∞·ªõc th·ªùi gian b·∫Øt ƒë·∫ßu test ({self.test_start_time_vn})", DEBUG_LOG_FILE)
                            return None
                        elif pivot_dt > end_dt:
                            save_log(f"‚ö†Ô∏è B·ªè qua pivot t·∫°i {vn_datetime} - n·∫±m sau th·ªùi gian k·∫øt th√∫c test ({self.test_end_time_vn})", DEBUG_LOG_FILE)
                            return None
                    except Exception as e:
                        save_log(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra th·ªùi gian test: {str(e)}", DEBUG_LOG_FILE)
            
            # 3. Ki·ªÉm tra kho·∫£ng c√°ch t·ªëi thi·ªÉu
            if not self._is_valid_pivot_spacing(center_time):
                save_log(f"‚ùå B·ªè qua pivot do kh√¥ng ƒë·ªß kho·∫£ng c√°ch t·ªëi thi·ªÉu {self.MIN_BARS_BETWEEN_PIVOTS} n·∫øn", DEBUG_LOG_FILE)
                return None
            
            # 4. So s√°nh gi√° v·ªõi c√°c n·∫øn tr√°i v√† ph·∫£i
            if direction == "high":
                # So s√°nh v·ªõi c√°c n·∫øn b√™n tr√°i
                left_prices = [bar['high'] for bar in window[:center_idx]]
                # So s√°nh v·ªõi c√°c n·∫øn b√™n ph·∫£i
                right_prices = [bar['high'] for bar in window[center_idx + 1:]]
                
                # Log ƒë·ªÉ d·ªÖ theo d√µi
                save_log(f"High c·ªßa n·∫øn tr√°i: ${max(left_prices):,.2f}", DEBUG_LOG_FILE)
                save_log(f"High c·ªßa n·∫øn ph·∫£i: ${max(right_prices):,.2f}", DEBUG_LOG_FILE)
                
                # ƒêi·ªÅu ki·ªán pivot high: cao h∆°n T·∫§T C·∫¢ c√°c n·∫øn b√™n tr√°i v√† b√™n ph·∫£i
                is_pivot = price > max(left_prices) and price > max(right_prices)
                
            else:  # direction == "low"
                # So s√°nh v·ªõi c√°c n·∫øn b√™n tr√°i
                left_prices = [bar['low'] for bar in window[:center_idx]]
                # So s√°nh v·ªõi c√°c n·∫øn b√™n ph·∫£i
                right_prices = [bar['low'] for bar in window[center_idx + 1:]]
                
                # Log ƒë·ªÉ d·ªÖ theo d√µi
                save_log(f"Low c·ªßa n·∫øn tr√°i: ${min(left_prices):,.2f}", DEBUG_LOG_FILE)
                save_log(f"Low c·ªßa n·∫øn ph·∫£i: ${min(right_prices):,.2f}", DEBUG_LOG_FILE)
                
                # ƒêi·ªÅu ki·ªán pivot low: th·∫•p h∆°n T·∫§T C·∫¢ c√°c n·∫øn b√™n tr√°i v√† b√™n ph·∫£i
                is_pivot = price < min(left_prices) and price < min(right_prices)
            
            # 5. N·∫øu kh√¥ng ph·∫£i pivot, tr·∫£ v·ªÅ None
            if not is_pivot:
                save_log(f"‚ùå Kh√¥ng ph·∫£i ƒëi·ªÉm pivot {direction}", DEBUG_LOG_FILE)
                return None
            
            # Log pivot ph√°t hi·ªán v·ªõi th·ªùi gian UTC v√† GMT+7 (Vi·ªát Nam)
            save_log(f"‚úÖ L√† ƒëi·ªÉm pivot {direction} t·∫°i {vn_datetime} (UTC: {utc_datetime})", DEBUG_LOG_FILE)
                            
            # 6. N·∫øu l√† pivot, t·∫°o ƒë·ªëi t∆∞·ª£ng pivot m·ªõi
            new_pivot = {
                'price': float(price),
                'time': center_time,          # Gi·ªØ th·ªùi gian UTC g·ªëc
                'direction': direction,
                'confirmed': True,
                'utc_date': utc_date,         # L∆∞u ng√†y UTC
                'utc_datetime': utc_datetime, # Th√™m datetime UTC ƒë·∫ßy ƒë·ªß
                'vn_date': vn_date,           # L∆∞u ng√†y Vi·ªát Nam
                'vn_datetime': vn_datetime    # Th√™m datetime Vi·ªát Nam ƒë·∫ßy ƒë·ªß
            }
            
            # 7. Ph√¢n lo·∫°i pivot theo logic TradingView
            pivot_type = self._determine_pivot_type_tv(price, direction)
            if pivot_type:
                new_pivot['type'] = pivot_type
                return new_pivot
            else:
                save_log(f"‚ùå Kh√¥ng th·ªÉ ph√¢n lo·∫°i pivot {direction}", DEBUG_LOG_FILE)
                    
            return None
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√°t hi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return None

    def _is_valid_pivot_spacing(self, new_pivot_time):
        """Ki·ªÉm tra kho·∫£ng c√°ch gi·ªØa pivot m·ªõi v√† T·∫§T C·∫¢ pivot ƒë√£ c√≥"""
        try:
            if not self.confirmed_pivots:
                return True
                
            # L·∫•y ng√†y hi·ªán t·∫°i (VN time)
            current_date = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).date()
            new_pivot_dt = datetime.strptime(f"{current_date} {new_pivot_time}", '%Y-%m-%d %H:%M')
            
            # Ki·ªÉm tra kho·∫£ng c√°ch v·ªõi T·∫§T C·∫¢ pivot ƒë√£ c√≥
            for existing_pivot in self.confirmed_pivots:
                # B·ªè qua n·∫øu pivot ƒë√≥ c√≥ flag skip_spacing_check
                if existing_pivot.get('skip_spacing_check', False):
                    continue
                    
                existing_pivot_dt = datetime.strptime(f"{current_date} {existing_pivot['time']}", '%Y-%m-%d %H:%M')
                
                # T√≠nh to√°n kho·∫£ng c√°ch th·ªùi gian tuy·ªát ƒë·ªëi
                time_diff = abs((existing_pivot_dt - new_pivot_dt).total_seconds())
                
                # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p qua ng√†y
                if time_diff > 22 * 3600:  # N·∫øu kho·∫£ng c√°ch > 22 gi·ªù
                    time_diff = 24 * 3600 - time_diff  # 24h - time_diff
                
                # Chuy·ªÉn th√†nh s·ªë n·∫øn (m·ªói n·∫øn 30 ph√∫t = 1800 gi√¢y)
                bars_between = time_diff / 1800
                
                if bars_between < self.MIN_BARS_BETWEEN_PIVOTS:
                    save_log(f"‚ö†Ô∏è B·ªè qua pivot t·∫°i {new_pivot_time} do kho·∫£ng c√°ch qu√° g·∫ßn v·ªõi {existing_pivot['type']} t·∫°i {existing_pivot['time']}", DEBUG_LOG_FILE)
                    save_log(f"Kho·∫£ng c√°ch th·ª±c t·∫ø: {bars_between:.1f} n·∫øn (t·ªëi thi·ªÉu {self.MIN_BARS_BETWEEN_PIVOTS})", DEBUG_LOG_FILE)
                    return False
            
            # N·∫øu qua ƒë∆∞·ª£c t·∫•t c·∫£ ki·ªÉm tra
            return True
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi ki·ªÉm tra kho·∫£ng c√°ch pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return False

    def _determine_pivot_type_tv(self, price, direction):
        """
        X√°c ƒë·ªãnh lo·∫°i pivot theo logic TradingView
        Args:
            price: Gi√° c·ªßa pivot hi·ªán t·∫°i
            direction: 'high' ho·∫∑c 'low'
        Returns:
            str: Lo·∫°i pivot (HH, HL, LH, LL) ho·∫∑c None
        """
        try:
            # 1. C·∫ßn √≠t nh·∫•t 4 pivot tr∆∞·ªõc ƒë√≥ ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i
            if len(self.confirmed_pivots) < 4:
                save_log("‚ö†Ô∏è Ch∆∞a ƒë·ªß pivot ƒë·ªÉ ph√¢n lo·∫°i", DEBUG_LOG_FILE)
                return None
                
            # Log th√¥ng tin t·ªïng qu√°t tr∆∞·ªõc khi ph√¢n t√≠ch chi ti·∫øt
            save_log(f"\n=== Ph√¢n t√≠ch pivot {direction.upper()} (gi√°: ${price:,.2f}) ===", DEBUG_LOG_FILE)
            save_log(f"T·ªïng s·ªë pivot hi·ªán c√≥: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
                
            # 2. T√¨m c√°c ƒëi·ªÉm pivot a, b, c, d, e theo c√°ch TradingView
            [b, c, d, e] = self._find_previous_pivots_tv(direction)
            a = price
            
            # Ki·ªÉm tra c√≥ ƒë·ªß ƒëi·ªÉm pivot kh√¥ng
            if None in [b, c, d]:
                save_log(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß pivot ƒë·ªÉ ph√¢n lo·∫°i (b={b}, c={c}, d={d})", DEBUG_LOG_FILE)
                return None
            
            save_log(f"\nGi√° c√°c pivot d√πng ƒë·ªÉ ph√¢n lo·∫°i:", DEBUG_LOG_FILE)
            save_log(f"a = ${a:,.2f} (pivot hi·ªán t·∫°i - {direction})", DEBUG_LOG_FILE)
            save_log(f"b = ${b:,.2f} (pivot tr∆∞·ªõc theo TradingView)", DEBUG_LOG_FILE)
            save_log(f"c = ${c:,.2f} (pivot th·ª© hai theo TradingView)", DEBUG_LOG_FILE)
            save_log(f"d = ${d:,.2f} (pivot th·ª© ba theo TradingView)", DEBUG_LOG_FILE)
            if e is not None:
                save_log(f"e = ${e:,.2f} (pivot th·ª© t∆∞ theo TradingView)", DEBUG_LOG_FILE)
                
            # L·∫•y th·ªùi gian ƒë·ªÉ log
            current_date = datetime.now(pytz.UTC).date()
            center_time = self.price_history[-(self.RIGHT_BARS + 1)]['time']  # L·∫•y th·ªùi gian c·ªßa n·∫øn center
            utc_dt = datetime.strptime(f"{current_date} {center_time}", '%Y-%m-%d %H:%M')
            vn_dt = utc_dt + timedelta(hours=7)
            vn_time = vn_dt.strftime('%H:%M')  # Ch·ªâ l·∫•y gi·ªù:ph√∫t
            
            # 3. Logic x√°c ƒë·ªãnh lo·∫°i pivot theo TradingView
            result_type = None
            
            if direction == "high":
                # Higher High: a > b v√† a > c v√† c > b v√† c > d
                if a > b and a > c and c > b and c > d:
                    result_type = "HH"
                    save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    save_log(f"  L√Ω do: a > b v√† a > c v√† c > b v√† c > d", DEBUG_LOG_FILE)
                    save_log(f"  Chi ti·∫øt: ${a:,.2f} > ${b:,.2f} v√† ${a:,.2f} > ${c:,.2f} v√† ${c:,.2f} > ${b:,.2f} v√† ${c:,.2f} > ${d:,.2f}", DEBUG_LOG_FILE)
                
                # Lower High: M·ªôt trong hai ƒëi·ªÅu ki·ªán
                # 1) a <= c v√† b < c v√† b < d v√† d < c v√† d < e
                # 2) a > b v√† a < c v√† b > d
                elif ((e is not None and a <= c and b < c and b < d and d < c and d < e) or 
                      (a > b and a < c and b > d)):
                    result_type = "LH"
                    save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    if a > b and a < c and b > d:
                        save_log(f"  L√Ω do: a > b v√† a < c v√† b > d", DEBUG_LOG_FILE)
                        save_log(f"  Chi ti·∫øt: ${a:,.2f} > ${b:,.2f} v√† ${a:,.2f} < ${c:,.2f} v√† ${b:,.2f} > ${d:,.2f}", DEBUG_LOG_FILE)
                    else:
                        save_log(f"  L√Ω do: a <= c v√† b < c v√† b < d v√† d < c v√† d < e", DEBUG_LOG_FILE)
                    
                else:
                    save_log("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n lo·∫°i pivot high theo TradingView", DEBUG_LOG_FILE)
                    # Fallback logic c≈© c·ªßa S1 n·∫øu kh√¥ng match TradingView
                    if a > b:
                        result_type = "HH"
                        save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type} (logic S1)", DEBUG_LOG_FILE)
                        save_log(f"  L√Ω do: a > b (${a:,.2f} > ${b:,.2f})", DEBUG_LOG_FILE)
                    elif a < b:
                        result_type = "LH"
                        save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type} (logic S1)", DEBUG_LOG_FILE)
                        save_log(f"  L√Ω do: a < b (${a:,.2f} < ${b:,.2f})", DEBUG_LOG_FILE)
            
            else:  # direction == "low"
                # Lower Low: a < b v√† a < c v√† c < b v√† c < d
                if a < b and a < c and c < b and c < d:
                    result_type = "LL"
                    save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    save_log(f"  L√Ω do: a < b v√† a < c v√† c < b v√† c < d", DEBUG_LOG_FILE)
                    save_log(f"  Chi ti·∫øt: ${a:,.2f} < ${b:,.2f} v√† ${a:,.2f} < ${c:,.2f} v√† ${c:,.2f} < ${b:,.2f} v√† ${c:,.2f} < ${d:,.2f}", DEBUG_LOG_FILE)
                
                # Higher Low: M·ªôt trong hai ƒëi·ªÅu ki·ªán
                # 1) a >= c v√† b > c v√† b > d v√† d > c v√† d > e
                # 2) a < b v√† a > c v√† b < d
                elif ((e is not None and a >= c and b > c and b > d and d > c and d > e) or 
                      (a < b and a > c and b < d)):
                    result_type = "HL"
                    save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    if a < b and a > c and b < d:
                        save_log(f"  L√Ω do: a < b v√† a > c v√† b < d", DEBUG_LOG_FILE)
                        save_log(f"  Chi ti·∫øt: ${a:,.2f} < ${b:,.2f} v√† ${a:,.2f} > ${c:,.2f} v√† ${b:,.2f} < ${d:,.2f}", DEBUG_LOG_FILE)
                    else:
                        save_log(f"  L√Ω do: a >= c v√† b > c v√† b > d v√† d > c v√† d > e", DEBUG_LOG_FILE)
                
                else:
                    save_log("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n lo·∫°i pivot low theo TradingView", DEBUG_LOG_FILE)
                    # Fallback logic c≈© c·ªßa S1 n·∫øu kh√¥ng match TradingView
                    if a < b:
                        result_type = "LL"
                        save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type} (logic S1)", DEBUG_LOG_FILE)
                        save_log(f"  L√Ω do: a < b (${a:,.2f} < ${b:,.2f})", DEBUG_LOG_FILE)
                    elif a > b:
                        result_type = "HL"
                        save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type} (logic S1)", DEBUG_LOG_FILE)
                        save_log(f"  L√Ω do: a > b (${a:,.2f} > ${b:,.2f})", DEBUG_LOG_FILE)
                        
            return result_type
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi x√°c ƒë·ªãnh lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return None

    def _find_previous_pivots_tv(self, direction):
        """
        T√¨m c√°c pivot points tr∆∞·ªõc ƒë√≥ theo c√°ch TradingView l√†m
        Args:
            direction: 'high' ho·∫∑c 'low'
        Returns:
            list: [b, c, d, e] - c√°c pivot tr∆∞·ªõc ƒë√≥ theo logic TradingView
        """
        try:
            # S·∫Øp x·∫øp t·∫•t c·∫£ pivot theo th·ªùi gian (c≈© ƒë·∫øn m·ªõi)
            sorted_pivots = sorted(
                self.confirmed_pivots,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )
            
            # Log s·ªë l∆∞·ª£ng pivot theo lo·∫°i
            high_pivots = [p for p in sorted_pivots if p['direction'] == 'high']
            low_pivots = [p for p in sorted_pivots if p['direction'] == 'low']
            
            save_log(f"S·ªë pivot c√πng h∆∞·ªõng {direction}: {len(high_pivots if direction == 'high' else low_pivots)}", DEBUG_LOG_FILE)
            save_log(f"S·ªë pivot h∆∞·ªõng ng∆∞·ª£c {('low' if direction == 'high' else 'high')}: {len(low_pivots if direction == 'high' else high_pivots)}", DEBUG_LOG_FILE)
            
            # Ki·ªÉm tra xem c√≥ ƒë·ªß pivot kh√¥ng
            if not sorted_pivots or len(sorted_pivots) < 4:
                save_log(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß pivot ƒë·ªÉ x√°c ƒë·ªãnh c√°c ƒëi·ªÉm so s√°nh", DEBUG_LOG_FILE)
                return [None, None, None, None]
            
            # M√¥ ph·ªèng h√†m findprevious() trong ch·ªâ b√°o TradingView
            # L·∫•y c√°c pivot v·ªõi th·ª© t·ª± zigzag: high -> low -> high -> low ho·∫∑c low -> high -> low -> high
            
            # L·∫•y pivot hi·ªán t·∫°i (kh√¥ng t√≠nh pivot ƒëang x√©t)
            current_pivot_direction = direction
            
            # M·∫£ng ch·ª©a c√°c pivot theo th·ª© t·ª± zigzag
            zigzag_pivots = []
            
            # Clone m·∫£ng ƒë·ªÉ t√¨m ki·∫øm
            remaining_pivots = sorted_pivots.copy()
            
            # 1. T√¨m pivot ng∆∞·ª£c h∆∞·ªõng g·∫ßn nh·∫•t v·ªõi pivot hi·ªán t·∫°i
            opposite_direction = 'low' if direction == 'high' else 'high'
            opposite_pivots = [p for p in reversed(remaining_pivots) if p['direction'] == opposite_direction]
            if opposite_pivots:
                b = opposite_pivots[0]['price']  # Pivot ng∆∞·ª£c h∆∞·ªõng g·∫ßn nh·∫•t
                zigzag_pivots.append(opposite_pivots[0])
            else:
                b = None
            
            # N·∫øu kh√¥ng t√¨m th·∫•y pivot ƒë·∫ßu ti√™n, kh√¥ng th·ªÉ ti·∫øp t·ª•c
            if b is None:
                save_log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y pivot ng∆∞·ª£c h∆∞·ªõng ƒë·ªß g·∫ßn", DEBUG_LOG_FILE)
                return [None, None, None, None]
                
            # 2. T√¨m pivot c√πng h∆∞·ªõng g·∫ßn nh·∫•t v·ªõi pivot B
            if zigzag_pivots:
                idx = remaining_pivots.index(zigzag_pivots[0])
                same_pivots = [p for p in reversed(remaining_pivots[:idx]) if p['direction'] == direction]
                if same_pivots:
                    c = same_pivots[0]['price']  # Pivot c√πng h∆∞·ªõng g·∫ßn nh·∫•t tr∆∞·ªõc B
                    zigzag_pivots.append(same_pivots[0])
                else:
                    c = None
            else:
                c = None
                
            # 3. T√¨m pivot ng∆∞·ª£c h∆∞·ªõng g·∫ßn nh·∫•t v·ªõi pivot C
            if len(zigzag_pivots) >= 2:
                idx = remaining_pivots.index(zigzag_pivots[1])
                opposite_pivots = [p for p in reversed(remaining_pivots[:idx]) if p['direction'] == opposite_direction]
                if opposite_pivots:
                    d = opposite_pivots[0]['price']  # Pivot ng∆∞·ª£c h∆∞·ªõng g·∫ßn nh·∫•t tr∆∞·ªõc C
                    zigzag_pivots.append(opposite_pivots[0])
                else:
                    d = None
            else:
                d = None
                
            # 4. T√¨m pivot c√πng h∆∞·ªõng g·∫ßn nh·∫•t v·ªõi pivot D
            if len(zigzag_pivots) >= 3:
                idx = remaining_pivots.index(zigzag_pivots[2])
                same_pivots = [p for p in reversed(remaining_pivots[:idx]) if p['direction'] == direction]
                if same_pivots:
                    e = same_pivots[0]['price']  # Pivot c√πng h∆∞·ªõng g·∫ßn nh·∫•t tr∆∞·ªõc D
                    zigzag_pivots.append(same_pivots[0])
                else:
                    e = None
            else:
                e = None
                
            # Log chi ti·∫øt c√°c pivot t√¨m th·∫•y
            save_log("\nC√°c pivot theo c·∫•u tr√∫c ZigZag:", DEBUG_LOG_FILE)
            if zigzag_pivots:
                for i, zp in enumerate(zigzag_pivots):
                    save_log(f"Pivot {chr(98+i)}: {zp['direction']} t·∫°i gi√° ${zp['price']:,.2f} ({zp['time']})", DEBUG_LOG_FILE)
            
            return [b, c, d, e]
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi t√¨m pivot points TradingView style: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return [None, None, None, None]

    def _add_confirmed_pivot(self, pivot):
        """
        Th√™m pivot m·ªõi v√†o l·ªãch s·ª≠
        Args:
            pivot: Dictionary ch·ª©a th√¥ng tin pivot
        Returns:
            bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # Ki·ªÉm tra tr√πng l·∫∑p tr∆∞·ªõc ti√™n
            for existing_pivot in self.confirmed_pivots:
                # Ki·ªÉm tra n·∫øu ƒë√£ t·ªìn t·∫°i pivot c√≥ c√πng price, time v√† direction
                if (abs(existing_pivot.get('price', 0) - pivot.get('price', 0)) < 0.01 and
                    existing_pivot.get('time') == pivot.get('time') and
                    existing_pivot.get('direction') == pivot.get('direction')):
                    save_log(f"‚ö†Ô∏è Pivot ƒë√£ t·ªìn t·∫°i: {pivot.get('type', 'unknown')} t·∫°i ${pivot['price']:,.2f} ({pivot.get('vn_datetime', pivot['time'])})", DEBUG_LOG_FILE)
                    return False
            
            # Ki·ªÉm tra kho·∫£ng c√°ch v·ªõi t·∫•t c·∫£ pivot ƒë√£ c√≥
            if not pivot.get('skip_spacing_check', False):
                for existing_pivot in self.confirmed_pivots:
                    # B·ªè qua pivot c√≥ flag skip_spacing_check
                    if existing_pivot.get('skip_spacing_check', False):
                        continue
                        
                    pivot_time_obj = datetime.strptime(pivot['time'], '%H:%M')
                    existing_time_obj = datetime.strptime(existing_pivot['time'], '%H:%M')
                    
                    # T√≠nh kho·∫£ng c√°ch theo ph√∫t
                    time_diff_minutes = abs((pivot_time_obj.hour - existing_time_obj.hour) * 60 + 
                                          pivot_time_obj.minute - existing_time_obj.minute)
                    
                    # Kho·∫£ng c√°ch theo s·ªë n·∫øn (m·ªói n·∫øn 30 ph√∫t)
                    bars_between = time_diff_minutes / 30
                    
                    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p qua ng√†y
                    if bars_between > 22:
                        bars_between = 48 - (time_diff_minutes / 30)
                        
                    if bars_between < self.MIN_BARS_BETWEEN_PIVOTS:
                        save_log(f"‚ö†Ô∏è B·ªè qua pivot {pivot.get('type', 'unknown')} t·∫°i {pivot['time']} do g·∫ßn v·ªõi {existing_pivot.get('type', 'unknown')} ({existing_pivot['time']})", DEBUG_LOG_FILE)
                        save_log(f"Kho·∫£ng c√°ch: {bars_between:.1f} n·∫øn (t·ªëi thi·ªÉu {self.MIN_BARS_BETWEEN_PIVOTS})", DEBUG_LOG_FILE)
                        return False
            
            # ƒê·∫£m b·∫£o pivot c√≥ ƒë·ªß th√¥ng tin th·ªùi gian Vi·ªát Nam
            if 'vn_datetime' not in pivot:
                # Th√™m th√¥ng tin ng√†y tr∆∞·ªõc khi l∆∞u pivot
                vn_date = pivot.get('date', datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime('%Y-%m-%d'))
                vn_time = pivot.get('time', '')
                pivot['vn_datetime'] = f"{vn_date} {vn_time}"
            
            # Th√™m v√†o danh s√°ch pivot (ch·ªâ th√™m m·ªôt l·∫ßn)
            self.confirmed_pivots.append(pivot)
            
            save_log("\n=== Th√™m Pivot M·ªõi ===", DEBUG_LOG_FILE)
            save_log(f"Lo·∫°i: {pivot.get('type', 'unknown')}", DEBUG_LOG_FILE)
            save_log(f"Gi√°: ${pivot['price']:,.2f}", DEBUG_LOG_FILE)
            save_log(f"Th·ªùi gian: {pivot.get('vn_datetime', pivot['time'])}", DEBUG_LOG_FILE)
            save_log(f"H∆∞·ªõng: {pivot['direction']}", DEBUG_LOG_FILE)
            
            # Trong ph·∫ßn cu·ªëi h√†m, sau khi ƒë√£ th√™m pivot th√†nh c√¥ng:
            if ENVIRONMENT == 'production' and not pivot.get('skip_notification', False):
                try:
                    bot = Bot(TOKEN)
                    
                    pivot_type = pivot.get('type', 'Unknown')
                    price = pivot['price']
                    # S·ª≠ d·ª•ng vn_datetime n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng time
                    time_str = pivot.get('vn_datetime', pivot.get('time', 'Unknown time'))
                    
                    emoji = {
                        'HH': 'üöÄ', 'HL': 'üîÑ', 'LH': 'üîÑ', 'LL': 'üìâ'
                    }.get(pivot_type, 'üîî')
                    
                    # ƒê·∫£m b·∫£o hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß gi·ªù:ph√∫t
                    vn_time = pivot.get('vn_time', '')
                    vn_date = pivot.get('vn_date', '')
                    time_display = f"{vn_time}" if not vn_date else f"{vn_date} {vn_time}"
                    
                    message = (
                        f"{emoji} *{pivot_type} Pivot Ph√°t Hi·ªán!*\n\n"
                        f"üí∞ *Gi√°:* ${price:,.2f}\n"
                        f"‚è∞ *Th·ªùi gian:* {time_display}\n"
                        f"üìä *Lo·∫°i:* {pivot_type} ({pivot['direction']})\n"
                    )
                    
                    bot.send_message(
                        chat_id=CHAT_ID,
                        text=message,
                        parse_mode='Markdown'
                    )
                    
                except Exception as e:
                    save_log(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {str(e)}", DEBUG_LOG_FILE)
            
            return True
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return False
    
    def get_recent_pivots(self, count=4):
        """L·∫•y c√°c pivot g·∫ßn nh·∫•t"""
        try:
            save_log("\n=== L·∫•y pivot g·∫ßn nh·∫•t ===", DEBUG_LOG_FILE)
            save_log(f"Y√™u c·∫ßu: {count} pivot", DEBUG_LOG_FILE)
            save_log(f"T·ªïng s·ªë pivot hi·ªán c√≥: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
            
            recent = self.confirmed_pivots[-count:] if self.confirmed_pivots else []
            
            if recent:
                save_log("C√°c pivot ƒë∆∞·ª£c ch·ªçn:", DEBUG_LOG_FILE)
                for i, p in enumerate(recent, 1):
                    save_log(f"{i}. {p['type']} t·∫°i ${p['price']:,.2f} ({p['time']})", DEBUG_LOG_FILE)
            else:
                save_log("Kh√¥ng c√≥ pivot n√†o", DEBUG_LOG_FILE)
            
            return recent

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l·∫•y recent pivots: {str(e)}", DEBUG_LOG_FILE)
            return []
              
    def save_to_excel(self):
        try:
            if not self.confirmed_pivots:
                save_log("\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu pivot ƒë·ªÉ l∆∞u", DEBUG_LOG_FILE)
                return

            save_log("\n=== B·∫Øt ƒë·∫ßu l∆∞u d·ªØ li·ªáu v√†o Excel ===", DEBUG_LOG_FILE)
            save_log(f"üìä T·ªïng s·ªë pivot: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)

            # L·∫•y pivots ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp ƒë√∫ng th·ª© t·ª± theo th·ªùi gian ƒë·∫ßy ƒë·ªß
            sorted_pivots = self.get_all_pivots()
            
            # Log chi ti·∫øt datetime c·ªßa t·ª´ng pivot ƒë·ªÉ debug
            save_log("\n=== Debug pivot dates ===", DEBUG_LOG_FILE)
            for i, pivot in enumerate(sorted_pivots):
                save_log(f"Pivot #{i+1}: {pivot.get('type', 'unknown')} - ${pivot['price']:,.2f}", DEBUG_LOG_FILE)
                save_log(f"  UTC time: {pivot.get('time', 'unknown')}", DEBUG_LOG_FILE)
                save_log(f"  UTC date: {pivot.get('utc_date', 'unknown')}", DEBUG_LOG_FILE)
                if 'utc_datetime' in pivot:
                    save_log(f"  UTC datetime: {pivot['utc_datetime']}", DEBUG_LOG_FILE)
                if 'vn_datetime' in pivot:
                    save_log(f"  VN datetime: {pivot['vn_datetime']}", DEBUG_LOG_FILE)
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho Excel
            excel_data = []
            
            for pivot in sorted_pivots:
                # ∆Øu ti√™n s·ª≠ d·ª•ng th√¥ng tin datetime ƒë√£ c√≥ s·∫µn trong pivot
                if 'utc_datetime' in pivot and 'vn_datetime' in pivot:
                    # ƒê√£ c√≥ c·∫£ th√¥ng tin UTC v√† VN datetime
                    try:
                        utc_dt = datetime.strptime(pivot['utc_datetime'], '%Y-%m-%d %H:%M')
                        vn_dt = datetime.strptime(pivot['vn_datetime'], '%Y-%m-%d %H:%M')
                    except Exception as dt_error:
                        save_log(f"L·ªói parse datetime: {str(dt_error)}", DEBUG_LOG_FILE)
                        # Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c datetime
                        try:
                            utc_time = pivot['time']
                            utc_date = pivot.get('utc_date', datetime.now(pytz.UTC).strftime('%Y-%m-%d'))
                            utc_dt = datetime.strptime(f"{utc_date} {utc_time}", '%Y-%m-%d %H:%M')
                            vn_dt = utc_dt + timedelta(hours=7)
                        except:
                            # N·∫øu v·∫´n l·ªói th√¨ d√πng th·ªùi gian hi·ªán t·∫°i
                            utc_dt = datetime.now(pytz.UTC)
                            vn_dt = utc_dt + timedelta(hours=7)
                elif 'utc_date' in pivot:
                    # C√≥ utc_date v√† time
                    utc_time = pivot['time']
                    utc_date = pivot['utc_date']
                    try:
                        utc_dt = datetime.strptime(f"{utc_date} {utc_time}", '%Y-%m-%d %H:%M')
                        
                        # Ki·ªÉm tra n·∫øu c√≥ vn_date ri√™ng
                        if 'vn_date' in pivot and 'vn_time' in pivot:
                            vn_date = pivot['vn_date'] 
                            vn_time = pivot['vn_time']
                            vn_dt = datetime.strptime(f"{vn_date} {vn_time}", '%Y-%m-%d %H:%M')
                        else:
                            # Chuy·ªÉn UTC sang VN
                            vn_dt = utc_dt + timedelta(hours=7)
                    except:
                        # N·∫øu parse th·∫•t b·∫°i, s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i
                        utc_dt = datetime.now(pytz.UTC)
                        vn_dt = utc_dt + timedelta(hours=7)
                else:
                    # Kh√¥ng c√≥ th√¥ng tin ng√†y, s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i
                    utc_time = pivot['time']
                    utc_date = datetime.now(pytz.UTC).strftime('%Y-%m-%d')
                    utc_dt = datetime.strptime(f"{utc_date} {utc_time}", '%Y-%m-%d %H:%M')
                    vn_dt = utc_dt + timedelta(hours=7)
                
                # Log d·ªØ li·ªáu final ƒë·ªÉ ki·ªÉm tra
                save_log(f"Excel data for {pivot['type']} (${pivot['price']:,.2f}):", DEBUG_LOG_FILE)
                save_log(f"  - Final UTC: {utc_dt.strftime('%Y-%m-%d %H:%M')}", DEBUG_LOG_FILE)
                save_log(f"  - Final VN:  {vn_dt.strftime('%Y-%m-%d %H:%M')}", DEBUG_LOG_FILE)
                
                excel_data.append({
                    'utc_datetime': utc_dt,
                    'vn_datetime': vn_dt,
                    'price': pivot['price'],
                    'pivot_type': pivot['type'],
                    'direction': pivot['direction'],
                    'utc_time': utc_dt.strftime('%H:%M'),
                    'utc_date': utc_dt.strftime('%Y-%m-%d'),
                    'vn_time': vn_dt.strftime('%H:%M'),
                    'vn_date': vn_dt.strftime('%Y-%m-%d')
                })

                # T·∫°o DataFrame
                df = pd.DataFrame(excel_data)

                # Ghi v√†o Excel v·ªõi ƒë·ªãnh d·∫°ng
                with pd.ExcelWriter('test_results.xlsx', engine='xlsxwriter') as writer:
                    # Ch·ªçn v√† ƒë·ªïi t√™n c·ªôt ƒë·ªÉ hi·ªÉn th·ªã c·∫£ UTC v√† VN time
                    columns_to_export = {
                        'utc_datetime': 'Datetime (UTC)',
                        'vn_datetime': 'Datetime (VN)',
                        'price': 'Price',
                        'pivot_type': 'Pivot Type',
                        'direction': 'Direction',
                        'utc_time': 'Time (UTC)',
                        'vn_time': 'Time (VN)',
                        'vn_date': 'Date (VN)'
                    }
                    
                    export_df = df[columns_to_export.keys()].copy()
                    export_df.columns = columns_to_export.values()
                    export_df.to_excel(writer, sheet_name='Pivot Analysis', index=False)
                    
                    workbook = writer.book
                    worksheet = writer.sheets['Pivot Analysis']

                    # ƒê·ªãnh d·∫°ng c·ªôt
                    datetime_format = workbook.add_format({'num_format': 'yyyy-mm-dd hh:mm:ss'})
                    price_format = workbook.add_format({'num_format': '$#,##0.00'})
                    
                    # √Åp d·ª•ng ƒë·ªãnh d·∫°ng
                    worksheet.set_column('A:A', 20, datetime_format)  # UTC datetime
                    worksheet.set_column('B:B', 20, datetime_format)  # VN datetime
                    worksheet.set_column('C:C', 15, price_format)     # price
                    worksheet.set_column('D:D', 10)                   # pivot_type
                    worksheet.set_column('E:E', 10)                   # direction
                    worksheet.set_column('F:F', 10)                   # UTC time
                    worksheet.set_column('G:G', 10)                   # VN time

                    # Th√™m th·ªëng k√™
                    row = len(export_df) + 2
                    worksheet.write(row, 0, 'Th·ªëng k√™:')
                    worksheet.write(row + 1, 0, 'T·ªïng s·ªë pivot:')
                    worksheet.write(row + 1, 1, len(export_df), price_format)

                    # Ph√¢n b·ªë pivot
                    types_count = export_df['Pivot Type'].value_counts()
                    worksheet.write(row + 2, 0, 'Ph√¢n b·ªë pivot:')
                    current_row = row + 3
                    for ptype in ['HH', 'HL', 'LH', 'LL']:
                        if ptype in types_count:
                            worksheet.write(current_row, 0, f'{ptype}:')
                            worksheet.write(current_row, 1, types_count[ptype], price_format)
                            current_row += 1
                            
                    # Th√™m ch√∫ th√≠ch v·ªÅ m√∫i gi·ªù
                    worksheet.write(current_row + 1, 0, 'Ch√∫ th√≠ch:')
                    worksheet.write(current_row + 2, 0, '- UTC: Gi·ªù qu·ªëc t·∫ø')
                    worksheet.write(current_row + 3, 0, '- VN: Gi·ªù Vi·ªát Nam (GMT+7)')

                save_log("‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng v√†o Excel", DEBUG_LOG_FILE)

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l∆∞u Excel: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            
    def _get_pivot_comment(self, pivot_type, price_change):
        """T·∫°o comment cho pivot d·ª±a tr√™n lo·∫°i v√† % thay ƒë·ªïi"""
        comment = f"{pivot_type}: "
        if pivot_type in ['HH', 'HL']:
            comment += "Bullish " if price_change > 0 else "Caution "
        else:  # LH, LL
            comment += "Bearish " if price_change < 0 else "Caution "
        comment += f"({price_change:+.2f}%)"
        return comment
        
    def get_all_pivots(self):
        """L·∫•y t·∫•t c·∫£ c√°c pivot theo th·ª© t·ª± th·ªùi gian ch√≠nh x√°c (bao g·ªìm ng√†y)"""
        try:
            if not self.confirmed_pivots:
                return []
                
            # Lo·∫°i b·ªè pivot tr√πng l·∫∑p d·ª±a tr√™n time v√† price
            unique_pivots = []
            seen = set()
            
            for pivot in self.confirmed_pivots:
                # T·∫°o key duy nh·∫•t t·ª´ th·ªùi gian v√† gi√° (l√†m tr√≤n ƒë·ªÉ tr√°nh sai s·ªë nh·ªè)
                key = (pivot['time'], round(pivot['price'], 2))
                if key not in seen:
                    seen.add(key)
                    unique_pivots.append(pivot)
                    
            # T·∫°o datetime ƒë·∫ßy ƒë·ªß cho m·ªói pivot ƒë·ªÉ s·∫Øp x·∫øp ch√≠nh x√°c
            for pivot in unique_pivots:
                # ∆Øu ti√™n s·ª≠ d·ª•ng utc_datetime n·∫øu c√≥
                if 'utc_datetime' in pivot:
                    try:
                        pivot['_sort_dt'] = datetime.strptime(pivot['utc_datetime'], '%Y-%m-%d %H:%M')
                    except:
                        # Fallback: k·∫øt h·ª£p t·ª´ utc_date v√† time
                        if 'utc_date' in pivot:
                            utc_date = pivot['utc_date']
                        else:
                            utc_date = datetime.now(pytz.UTC).strftime('%Y-%m-%d')
                        pivot['_sort_dt'] = datetime.strptime(f"{utc_date} {pivot['time']}", '%Y-%m-%d %H:%M')
                else:
                    # Kh√¥ng c√≥ utc_datetime, t·∫°o t·ª´ utc_date v√† time
                    if 'utc_date' in pivot:
                        utc_date = pivot['utc_date']
                    else:
                        utc_date = datetime.now(pytz.UTC).strftime('%Y-%m-%d')
                    pivot['_sort_dt'] = datetime.strptime(f"{utc_date} {pivot['time']}", '%Y-%m-%d %H:%M')
            
            # S·∫Øp x·∫øp theo datetime ƒë·∫ßy ƒë·ªß
            sorted_pivots = sorted(
                unique_pivots,
                key=lambda x: x['_sort_dt']
            )
            
            # Lo·∫°i b·ªè tr∆∞·ªùng sort t·∫°m th·ªùi
            for pivot in sorted_pivots:
                if '_sort_dt' in pivot:
                    del pivot['_sort_dt']
            
            save_log(f"\nT·ªïng s·ªë pivot sau khi lo·∫°i b·ªè tr√πng l·∫∑p: {len(sorted_pivots)}", DEBUG_LOG_FILE)
            
            return sorted_pivots
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi l·∫•y all pivots: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return []
        
    def _calculate_bars_between(self, time1, time2):
        """T√≠nh s·ªë n·∫øn gi·ªØa hai th·ªùi ƒëi·ªÉm, x·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p qua ng√†y"""
        try:
            if time2.hour < time1.hour:
                # Qua ng√†y m·ªõi
                minutes_to_midnight = (24 * 60) - (time1.hour * 60 + time1.minute)
                minutes_from_midnight = time2.hour * 60 + time2.minute
                total_minutes = minutes_to_midnight + minutes_from_midnight
            else:
                # C√πng ng√†y
                total_minutes = (time2.hour * 60 + time2.minute) - (time1.hour * 60 + time1.minute)
            
            return total_minutes / 30

        except Exception as e:
            save_log(f"‚ùå L·ªói khi t√≠nh s·ªë n·∫øn gi·ªØa hai th·ªùi ƒëi·ªÉm: {str(e)}", DEBUG_LOG_FILE)
            return 0 
            
    def parse_pivot_input(pivot_text):
        """
        Ph√¢n t√≠ch c√∫ ph√°p ƒë·∫ßu v√†o ƒë·ªÉ t·∫°o pivot
        """
        try:
            print(f"Parsing pivot input: {pivot_text}")
            parts = pivot_text.strip().split(":")
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ t·ªëi thi·ªÉu
            if len(parts) < 3:
                print("Kh√¥ng ƒë·ªß th√†nh ph·∫ßn trong input")
                return None
                
            pivot_type = parts[0].upper()  # LL, LH, HL, HH
            price = float(parts[1])
            
            # X·ª≠ l√Ω ph·∫ßn th·ªùi gian v√† ng√†y th√°ng
            from datetime import datetime
            import pytz
            
            # L·∫•y ng√†y hi·ªán t·∫°i theo m√∫i gi·ªù VN
            now = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh'))
            default_vn_date = now.strftime('%Y-%m-%d')
            
            # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng th·ªùi gian ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ HH:MM
            if len(parts) == 3:  # ƒê·ªãnh d·∫°ng kh√¥ng c√≥ ng√†y: LL:83597:06:30
                time_str = parts[2]
                vn_date = default_vn_date
            else:  # C√≥ ng√†y: LL:83597:23-03-2025:06:30
                date_part = parts[2]
                time_str = parts[3]
                
                # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ng√†y DD-MM-YYYY ho·∫∑c YYYY-MM-DD
                date_parts = date_part.split('-')
                if len(date_parts) == 3:
                    if int(date_parts[2]) > 1000:  # NƒÉm ·ªü v·ªã tr√≠ cu·ªëi c√πng (DD-MM-YYYY)
                        vn_date = f"{date_parts[2]}-{date_parts[1]}-{date_parts[0]}"  # Chuy·ªÉn th√†nh YYYY-MM-DD
                    else:
                        vn_date = date_part  # ƒê√£ l√† YYYY-MM-DD
                else:
                    vn_date = default_vn_date
            
            # ƒê·∫£m b·∫£o vn_time c√≥ ƒë·ªãnh d·∫°ng HH:MM
            if ":" not in time_str:
                # N·∫øu time_str ch·ªâ ch·ª©a gi·ªù kh√¥ng c√≥ ph√∫t, th√™m ":00"
                if len(time_str) <= 2:
                    vn_time = f"{time_str}:00"
                elif len(time_str) == 4:  # ƒê·ªãnh d·∫°ng 0630 -> 06:30
                    vn_time = f"{time_str[:2]}:{time_str[2:]}"
                else:
                    vn_time = f"{time_str}:00"  # ƒê·∫£m b·∫£o lu√¥n c√≥ ƒë·ªãnh d·∫°ng HH:MM
            else:
                vn_time = time_str
                
            # X√°c ƒë·ªãnh direction d·ª±a v√†o lo·∫°i pivot
            if pivot_type in ["HH", "LH"]:
                direction = "high"
            else:  # LL, HL
                direction = "low"
                
            # Tr·∫£ v·ªÅ pivot ƒë√£ ph√¢n t√≠ch
            result = {
                "type": pivot_type,
                "price": price,
                "vn_time": vn_time,  # ƒê√£ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng HH:MM
                "vn_date": vn_date,  # ƒê√£ ƒë·∫£m b·∫£o kh√¥ng null
                "direction": direction,
                "confirmed": True
            }
            
            print(f"Parsed pivot result: {result}")
            return result
            
        except Exception as e:
            print(f"L·ªói trong parse_pivot_input: {str(e)}")
            import traceback
            print(traceback.format_exc())
            return None 
            
    def add_initial_pivot(self, pivot_data):
        """
        API an to√†n ƒë·ªÉ th√™m pivot ban ƒë·∫ßu, c≈©ng ki·ªÉm tra kho·∫£ng c√°ch
        """
        return self._add_confirmed_pivot(pivot_data)
    
    def add_initial_trading_view_pivots(self, pivots):
        """
        Th√™m c√°c pivot ban ƒë·∫ßu v√†o h·ªá th·ªëng theo logic TradingView
        Args:
            pivots: List c√°c pivot v·ªõi format
            {
                'type': 'LL/LH/HL/HH',
                'price': float,
                'vn_time': 'HH:MM',
                'vn_date': 'YYYY-MM-DD',
                'direction': 'high/low',
                'confirmed': True
            }
        Returns:
            bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            save_log("\n=== Th√™m c√°c pivot ban ƒë·∫ßu ===", DEBUG_LOG_FILE)
            save_log(f"Th·ªùi gian hi·ªán t·∫°i UTC: {datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')}", DEBUG_LOG_FILE)
            save_log(f"Th·ªùi gian hi·ªán t·∫°i VN: {datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime('%Y-%m-%d %H:%M:%S')}", DEBUG_LOG_FILE)
            save_log(f"S·ªë l∆∞·ª£ng pivot: {len(pivots)}", DEBUG_LOG_FILE)
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng pivot
            if len(pivots) != 4:
                save_log("‚ùå S·ªë l∆∞·ª£ng pivot ph·∫£i l√† 4 (LL, LH, HL, HH)", DEBUG_LOG_FILE)
                return False
                
            # Ki·ªÉm tra th·ª© t·ª± c√°c lo·∫°i pivot
            pivot_types = [p['type'] for p in pivots]
            expected_types = ['LL', 'LH', 'HL', 'HH']
            
            if pivot_types != expected_types:
                save_log(f"‚ùå Th·ª© t·ª± pivot kh√¥ng ƒë√∫ng. Nh·∫≠n ƒë∆∞·ª£c: {pivot_types}, c·∫ßn: {expected_types}", DEBUG_LOG_FILE)
                return False
            
            # Reset l·∫°i to√†n b·ªô d·ªØ li·ªáu hi·ªán c√≥
            self.clear_all()
            
            for pivot in pivots:
                try:
                    # Log chi ti·∫øt input
                    save_log(f"\nX·ª≠ l√Ω pivot {pivot['type']}:", DEBUG_LOG_FILE)
                    save_log(f"Input data: {json.dumps(pivot, ensure_ascii=False)}", DEBUG_LOG_FILE)
                    
                    # Chuy·ªÉn ƒë·ªïi th·ªùi gian VN sang UTC
                    vn_dt_str = f"{pivot['vn_date']} {pivot['vn_time']}"  # e.g. "2025-03-24 06:30"
                    save_log(f"VN datetime string: {vn_dt_str}", DEBUG_LOG_FILE)
                    
                    try:
                        # Parse datetime string
                        vn_dt = datetime.strptime(vn_dt_str, '%Y-%m-%d %H:%M')
                        # Localize to VN timezone
                        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                        vn_dt = vn_tz.localize(vn_dt)
                        # Convert to UTC
                        utc_dt = vn_dt.astimezone(pytz.UTC)
                        
                        save_log(f"Converted UTC time: {utc_dt.strftime('%Y-%m-%d %H:%M')}", DEBUG_LOG_FILE)
                    except ValueError as dt_error:
                        save_log(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng datetime: {str(dt_error)}", DEBUG_LOG_FILE)
                        return False
                    
                    # T·∫°o pivot m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin th·ªùi gian
                    new_pivot = {
                        'type': pivot['type'],
                        'price': float(pivot['price']),
                        'direction': pivot['direction'],
                        'confirmed': True,
                        'time': utc_dt.strftime('%H:%M'),         # Gi·ªù UTC cho pivot
                        'utc_date': utc_dt.strftime('%Y-%m-%d'),  # Ng√†y UTC
                        'utc_datetime': utc_dt.strftime('%Y-%m-%d %H:%M'),
                        'vn_date': pivot['vn_date'],              # Gi·ªØ nguy√™n ng√†y VN g·ªëc
                        'vn_time': pivot['vn_time'],              # Gi·ªØ nguy√™n gi·ªù VN g·ªëc
                        'vn_datetime': vn_dt_str,                 # Datetime VN ƒë·∫ßy ƒë·ªß
                        'skip_spacing_check': True                 # B·ªè qua ki·ªÉm tra kho·∫£ng c√°ch cho pivot ban ƒë·∫ßu
                    }
                    
                    save_log("Prepared pivot data:", DEBUG_LOG_FILE)
                    save_log(json.dumps(new_pivot, ensure_ascii=False, indent=2), DEBUG_LOG_FILE)
                    
                    # Th√™m v√†o danh s√°ch pivot
                    if self._add_confirmed_pivot(new_pivot):
                        save_log("‚úÖ Th√™m th√†nh c√¥ng!", DEBUG_LOG_FILE)
                    else:
                        save_log("‚ùå Th√™m th·∫•t b·∫°i!", DEBUG_LOG_FILE)
                        raise Exception(f"Kh√¥ng th·ªÉ th√™m pivot {pivot['type']}")
                        
                except Exception as e:
                    save_log(f"‚ùå L·ªói khi x·ª≠ l√Ω pivot {pivot['type']}: {str(e)}", DEBUG_LOG_FILE)
                    save_log(traceback.format_exc(), DEBUG_LOG_FILE)
                    return False
                    
            # Ghi log k·∫øt qu·∫£ cu·ªëi c√πng
            save_log(f"\n‚úÖ ƒê√£ th√™m th√†nh c√¥ng {len(self.confirmed_pivots)} pivot ban ƒë·∫ßu", DEBUG_LOG_FILE)
            save_log("Chi ti·∫øt:", DEBUG_LOG_FILE)
            for p in self.confirmed_pivots:
                save_log(f"‚Ä¢ {p['type']}: ${p['price']:,.2f} ({p['vn_datetime']})", DEBUG_LOG_FILE)
                
            return True
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m pivot ban ƒë·∫ßu: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return False
        
# Create global instance
pivot_data = PivotData() 

# Export functions

# Cu·ªëi file s1.py th√™m d√≤ng n√†y
__all__ = ['pivot_data', 'detect_pivot', 'save_log', 'set_current_time_and_user']

def start_setpivots(update: Update, context: CallbackContext):
    """B·∫Øt ƒë·∫ßu qu√° tr√¨nh thi·∫øt l·∫≠p 4 pivot ban ƒë·∫ßu"""
    try:
        save_log("\n=== Nh·∫≠n l·ªánh /setpivots ===", DEBUG_LOG_FILE)
        context.user_data['pivots'] = []
        update.message.reply_text(
            "*Thi·∫øt l·∫≠p 4 pivot ban ƒë·∫ßu*\n\n"
            "Vui l√≤ng cung c·∫•p th√¥ng tin pivot LL ƒë·∫ßu ti√™n theo m·ªôt trong c√°c ƒë·ªãnh d·∫°ng:\n"
            "`LL:gi√°:th·ªùi_gian`\n"
            "`LL:gi√°:nƒÉm-th√°ng-ng√†y:th·ªùi_gian`\n"
            "`LL:gi√°:ng√†y-th√°ng-nƒÉm:th·ªùi_gian`\n\n"
            "V√≠ d·ª•:\n"
            "‚Ä¢ `LL:79894:00:30` (gi√° $79,894 l√∫c 00:30 ng√†y hi·ªán t·∫°i)\n"
            "‚Ä¢ `LL:79894:2025-03-23:00:30` (nƒÉm-th√°ng-ng√†y)\n"
            "‚Ä¢ `LL:79894:23-03-2025:00:30` (ng√†y-th√°ng-nƒÉm)\n\n"
            "_L∆∞u √Ω: S·ª≠ d·ª•ng th·ªùi gian theo m√∫i gi·ªù Vi·ªát Nam (GMT+7)_",
            parse_mode='Markdown'  # Thay th·∫ø ParseMode.MARKDOWN b·∫±ng 'Markdown'
        )
        save_log("‚úÖ ƒê√£ g·ª≠i h∆∞·ªõng d·∫´n thi·∫øt l·∫≠p pivot", DEBUG_LOG_FILE)
        return WAITING_FOR_PIVOT_LL
    except ImportError as e:
        save_log(f"‚ùå L·ªói import module: {str(e)}", DEBUG_LOG_FILE)
        update.message.reply_text(
            "‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o l·ªánh /setpivots. Vui l√≤ng li√™n h·ªá admin."
        )
        return ConversationHandler.END
    except Exception as e:
        save_log(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong start_setpivots: {str(e)}", DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        update.message.reply_text(
            "‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin."
        )
        return ConversationHandler.END

def process_pivot_ll(update: Update, context: CallbackContext):
    """X·ª≠ l√Ω pivot LL"""
    try:
        pivot_text = update.message.text
        save_log(f"ƒêang x·ª≠ l√Ω input pivot LL: {pivot_text}", DEBUG_LOG_FILE)
        
        try:
            new_pivot = parse_pivot_input(pivot_text)
            save_log(f"K·∫øt qu·∫£ parse pivot: {new_pivot}", DEBUG_LOG_FILE)
        except Exception as parse_error:
            save_log(f"‚ùå L·ªói khi parse pivot: {str(parse_error)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            update.message.reply_text(
                "‚ùå C√≥ l·ªói khi x·ª≠ l√Ω ƒë·ªãnh d·∫°ng pivot. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng ƒë∆°n gi·∫£n h∆°n.\n"
                "V√≠ d·ª•: `LL:83597:06:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_LL
        
        if not new_pivot or new_pivot['type'] != 'LL':
            update.message.reply_text(
                "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng ho·∫∑c lo·∫°i pivot kh√¥ng ph·∫£i LL!\n"
                "Vui l√≤ng nh·∫≠p l·∫°i theo ƒë·ªãnh d·∫°ng: `LL:gi√°:th·ªùi_gian`\n"
                "V√≠ d·ª•: `LL:79894:00:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_LL
            
        # L∆∞u pivot v√†o user_data
        context.user_data['pivots'] = context.user_data.get('pivots', [])
        context.user_data['pivots'].append(new_pivot)
        
        # Hi·ªÉn th·ªã th·ªùi gian CH√çNH X√ÅC bao g·ªìm c·∫£ ph√∫t
        date_info = f" ng√†y {new_pivot['vn_date']}" if 'vn_date' in new_pivot else ""
        
        update.message.reply_text(
            f"‚úÖ ƒê√£ l∆∞u pivot LL: ${new_pivot['price']:,.2f} l√∫c {new_pivot['vn_time']}{date_info}\n\n"
            "Vui l√≤ng cung c·∫•p th√¥ng tin pivot LH theo ƒë·ªãnh d·∫°ng:\n"
            "`LH:gi√°:th·ªùi_gian`\n\n"
            "V√≠ d·ª•: `LH:82266:09:30`",
            parse_mode='Markdown'
        )
        
        return WAITING_FOR_PIVOT_LH
        
    except Exception as e:
        save_log(f"‚ùå L·ªói trong process_pivot_ll: {str(e)}", DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        try:
            update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω pivot LL. Vui l√≤ng th·ª≠ l·∫°i sau.",
                parse_mode='Markdown'
            )
        except:
            pass
        return WAITING_FOR_PIVOT_LL

def process_pivot_lh(update: Update, context: CallbackContext):
    """X·ª≠ l√Ω pivot LH"""
    try:
        pivot_text = update.message.text
        save_log(f"ƒêang x·ª≠ l√Ω input pivot LH: {pivot_text}", DEBUG_LOG_FILE)
        
        try:
            new_pivot = parse_pivot_input(pivot_text)
            save_log(f"K·∫øt qu·∫£ parse pivot: {new_pivot}", DEBUG_LOG_FILE)
        except Exception as parse_error:
            save_log(f"‚ùå L·ªói khi parse pivot: {str(parse_error)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            update.message.reply_text(
                "‚ùå C√≥ l·ªói khi x·ª≠ l√Ω ƒë·ªãnh d·∫°ng pivot. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng ƒë∆°n gi·∫£n h∆°n.\n"
                "V√≠ d·ª•: `LH:82266:09:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_LH
        
        if not new_pivot or new_pivot['type'] != 'LH':
            update.message.reply_text(
                "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng ho·∫∑c lo·∫°i pivot kh√¥ng ph·∫£i LH!\n"
                "Vui l√≤ng nh·∫≠p l·∫°i theo ƒë·ªãnh d·∫°ng: `LH:gi√°:th·ªùi_gian`\n"
                "V√≠ d·ª•: `LH:82266:09:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_LH
            
        # L∆∞u pivot v√†o user_data
        context.user_data['pivots'].append(new_pivot)
        
        # Hi·ªÉn th·ªã th·ªùi gian CH√çNH X√ÅC bao g·ªìm c·∫£ ph√∫t
        date_info = f" ng√†y {new_pivot['vn_date']}" if 'vn_date' in new_pivot else ""
        
        update.message.reply_text(
            f"‚úÖ ƒê√£ l∆∞u pivot LH: ${new_pivot['price']:,.2f} l√∫c {new_pivot['vn_time']}{date_info}\n\n"
            "Vui l√≤ng cung c·∫•p th√¥ng tin pivot HL theo ƒë·ªãnh d·∫°ng:\n"
            "`HL:gi√°:th·ªùi_gian`\n\n"
            "V√≠ d·ª•: `HL:81730:13:30`",
            parse_mode='Markdown'
        )
        
        return WAITING_FOR_PIVOT_HL
        
    except Exception as e:
        save_log(f"‚ùå L·ªói trong process_pivot_lh: {str(e)}", DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        try:
            update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω pivot LH. Vui l√≤ng th·ª≠ l·∫°i sau.",
                parse_mode='Markdown'
            )
        except:
            pass
        return WAITING_FOR_PIVOT_LH

def process_pivot_hl(update: Update, context: CallbackContext):
    """X·ª≠ l√Ω pivot HL"""
    try:
        pivot_text = update.message.text
        save_log(f"ƒêang x·ª≠ l√Ω input pivot HL: {pivot_text}", DEBUG_LOG_FILE)
        
        try:
            new_pivot = parse_pivot_input(pivot_text)
            save_log(f"K·∫øt qu·∫£ parse pivot: {new_pivot}", DEBUG_LOG_FILE)
        except Exception as parse_error:
            save_log(f"‚ùå L·ªói khi parse pivot: {str(parse_error)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            update.message.reply_text(
                "‚ùå C√≥ l·ªói khi x·ª≠ l√Ω ƒë·ªãnh d·∫°ng pivot. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng ƒë∆°n gi·∫£n h∆°n.\n"
                "V√≠ d·ª•: `HL:81730:13:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_HL
        
        if not new_pivot or new_pivot['type'] != 'HL':
            update.message.reply_text(
                "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng ho·∫∑c lo·∫°i pivot kh√¥ng ph·∫£i HL!\n"
                "Vui l√≤ng nh·∫≠p l·∫°i theo ƒë·ªãnh d·∫°ng: `HL:gi√°:th·ªùi_gian`\n"
                "V√≠ d·ª•: `HL:81730:13:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_HL
            
        # L∆∞u pivot v√†o user_data
        context.user_data['pivots'].append(new_pivot)
        
        # Hi·ªÉn th·ªã th·ªùi gian CH√çNH X√ÅC bao g·ªìm c·∫£ ph√∫t
        date_info = f" ng√†y {new_pivot['vn_date']}" if 'vn_date' in new_pivot else ""
        
        update.message.reply_text(
            f"‚úÖ ƒê√£ l∆∞u pivot HL: ${new_pivot['price']:,.2f} l√∫c {new_pivot['vn_time']}{date_info}\n\n"
            "Vui l√≤ng cung c·∫•p th√¥ng tin pivot HH theo ƒë·ªãnh d·∫°ng:\n"
            "`HH:gi√°:th·ªùi_gian`\n\n"
            "V√≠ d·ª•: `HH:85270:22:30`",
            parse_mode='Markdown'
        )
        
        return WAITING_FOR_PIVOT_HH
        
    except Exception as e:
        save_log(f"‚ùå L·ªói trong process_pivot_hl: {str(e)}", DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        try:
            update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω pivot HL. Vui l√≤ng th·ª≠ l·∫°i sau.",
                parse_mode='Markdown'
            )
        except:
            pass
        return WAITING_FOR_PIVOT_HL

def process_pivot_hh(update: Update, context: CallbackContext):
    """X·ª≠ l√Ω pivot HH"""
    try:
        pivot_text = update.message.text
        save_log(f"ƒêang x·ª≠ l√Ω input pivot HH: {pivot_text}", DEBUG_LOG_FILE)
        
        try:
            new_pivot = parse_pivot_input(pivot_text)
            save_log(f"K·∫øt qu·∫£ parse pivot: {new_pivot}", DEBUG_LOG_FILE)
        except Exception as parse_error:
            save_log(f"‚ùå L·ªói khi parse pivot: {str(parse_error)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            update.message.reply_text(
                "‚ùå C√≥ l·ªói khi x·ª≠ l√Ω ƒë·ªãnh d·∫°ng pivot. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng ƒë∆°n gi·∫£n h∆°n.\n"
                "V√≠ d·ª•: `HH:85270:22:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_HH
        
        if not new_pivot or new_pivot['type'] != 'HH':
            update.message.reply_text(
                "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng ho·∫∑c lo·∫°i pivot kh√¥ng ph·∫£i HH!\n"
                "Vui l√≤ng nh·∫≠p l·∫°i theo ƒë·ªãnh d·∫°ng: `HH:gi√°:th·ªùi_gian`\n"
                "V√≠ d·ª•: `HH:85270:22:30`",
                parse_mode='Markdown'
            )
            return WAITING_FOR_PIVOT_HH
            
        # L∆∞u pivot v√†o user_data
        context.user_data['pivots'].append(new_pivot)
        
        # L∆∞u t·∫•t c·∫£ pivot v√† th√™m v√†o S1
        pivots = context.user_data['pivots']
        
        # L∆∞u v√†o file ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng l·∫°i sau n√†y
        save_initial_pivots(pivots)
        
        # Th√™m pivot v√†o instance PivotData
        import sys
        current_module = sys.modules[__name__]
        current_module.pivot_data.add_initial_trading_view_pivots(pivots)
        
        # T·∫°o th√¥ng tin pivot v·ªõi ng√†y v√† gi·ªù ch√≠nh x√°c
        pivot_info = "\n".join([
            f"‚Ä¢ {p['type']}: ${p['price']:,.2f} ({p['vn_time']}" + 
            (f" ng√†y {p['vn_date']}" if 'vn_date' in p else "") + ")"
            for p in pivots
        ])
        
        update.message.reply_text(
            f"‚úÖ *ƒê√£ thi·∫øt l·∫≠p th√†nh c√¥ng 4 pivot ban ƒë·∫ßu!*\n\n"
            f"{pivot_info}\n\n"
            f"S1 Bot ƒë√£ s·∫µn s√†ng ph√°t hi·ªán c√°c pivot m·ªõi.",
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        save_log(f"‚ùå L·ªói trong process_pivot_hh: {str(e)}", DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        try:
            update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω pivot HH. Vui l√≤ng th·ª≠ l·∫°i sau.",
                parse_mode='Markdown'
            )
        except:
            pass
        return WAITING_FOR_PIVOT_HH

def cancel_setpivots(update: Update, context: CallbackContext):
    """H·ªßy qu√° tr√¨nh thi·∫øt l·∫≠p pivot"""
    update.message.reply_text(
        "‚ùå ƒê√£ h·ªßy qu√° tr√¨nh thi·∫øt l·∫≠p pivot ban ƒë·∫ßu."
    )
    return ConversationHandler.END
    
def backup_pivots():
    """Sao l∆∞u d·ªØ li·ªáu pivot ƒë·ªãnh k·ª≥"""
    try:
        # L·∫•y th·ªùi gian hi·ªán t·∫°i
        backup_time = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # T√™n file backup
        backup_file = f"backup/pivots_backup_{backup_time}.json"
        
        # L·∫•y d·ªØ li·ªáu pivot
        pivots = pivot_data.get_all_pivots()
        
        # L∆∞u d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump([{
                'price': p['price'],
                'time': p['time'],
                'direction': p['direction'],
                'type': p.get('type', ''),
                'utc_date': p.get('utc_date', ''),
                'vn_date': p.get('vn_date', ''),
                'vn_datetime': p.get('vn_datetime', '')
            } for p in pivots], f, ensure_ascii=False, indent=2)
            
        # Log th√¥ng b√°o
        save_log(f"‚úÖ ƒê√£ sao l∆∞u {len(pivots)} pivot v√†o {backup_file}", DEBUG_LOG_FILE)
        
        # Th√¥ng b√°o qua Telegram
        bot = Bot(TOKEN)
        bot.send_message(
            chat_id=CHAT_ID,
            text=f"‚úÖ *S1 BOT BACKUP*\n\nƒê√£ sao l∆∞u {len(pivots)} pivot!\nFile: `{backup_file}`\nTh·ªùi gian: {backup_time}",
            parse_mode='Markdown'
        )
        
        return True
        
    except Exception as e:
        save_log(f"‚ùå L·ªói khi sao l∆∞u pivot: {str(e)}", DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        return False
        
def send_error_notification(error_message):
    """G·ª≠i th√¥ng b√°o l·ªói qua Telegram"""
    try:
        bot = Bot(TOKEN)
        bot.send_message(
            chat_id=CHAT_ID,
            text=f"‚ö†Ô∏è *S1 BOT ERROR*\n\n{error_message}\n\nTh·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            parse_mode='Markdown'
        )
        return True
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói: {str(e)}")
        save_log(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói: {str(e)}", DEBUG_LOG_FILE)
        return False        
        
def detect_pivot(price, direction):
    return pivot_data.detect_pivot(price, direction)
    
def get_binance_price(context: CallbackContext):
    try:
        klines = binance_client.futures_klines(symbol="BTCUSDT", interval="30m", limit=2)
        last_candle = klines[-2]  # Ensure we get the closed candle
        high_price = float(last_candle[2])
        low_price = float(last_candle[3])
        close_price = float(last_candle[4])
        
        # L·∫•y th·ªùi gian hi·ªán t·∫°i UTC
        now_utc = datetime.now(pytz.UTC)
        # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
        now_vn = now_utc.astimezone(pytz.timezone('Asia/Ho_Chi_Minh'))
        
        price_data = {
            "high": high_price,
            "low": low_price,
            "price": close_price,
            "time": now_vn.strftime("%H:%M")  # S·ª≠ d·ª•ng gi·ªù Vi·ªát Nam
        }
        pivot_data.process_new_data(price_data)  # S·ª≠ d·ª•ng h√†m h·ª£p nh·∫•t
        
        save_log(f"Thu th·∫≠p d·ªØ li·ªáu n·∫øn 30m: High=${high_price:,.2f}, Low=${low_price:,.2f}", DEBUG_LOG_FILE)
        
    except Exception as e:
        logger.error(f"Binance API Error: {e}")
        save_log(f"Binance API Error: {e}", DEBUG_LOG_FILE)
        
def schedule_next_run(job_queue):
    try:
        # L·∫•y th·ªùi gian hi·ªán t·∫°i UTC
        now_utc = datetime.now(pytz.UTC)
        # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
        now_vn = now_utc.astimezone(pytz.timezone('Asia/Ho_Chi_Minh'))
        
        # l√™n l·ªãch ch·∫°y khi ch·∫µn 30p
        next_run = now_vn.replace(second=0, microsecond=0) + timedelta(minutes=(30 - now_vn.minute % 30))
        delay = (next_run - now_vn).total_seconds()
        
        save_log(f"L√™n l·ªãch ch·∫°y v√†o {next_run.strftime('%Y-%m-%d %H:%M:%S')} (GMT+7)", DEBUG_LOG_FILE)
        # Thay ƒë·ªïi interval t·ª´ 300 (5 ph√∫t) sang 1800 (30 ph√∫t)
        job_queue.run_repeating(get_binance_price, interval=1800, first=delay)
    except Exception as e:
        logger.error(f"Error scheduling next run: {e}")
        save_log(f"Error scheduling next run: {e}", DEBUG_LOG_FILE)
        
def help_command(update: Update, context: CallbackContext):
    """Hi·ªÉn th·ªã tr·ª£ gi√∫p cho bot"""
    help_text = (
        "*S1 Bot - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng*\n\n"
        "*C√°c l·ªánh c∆° b·∫£n:*\n"
        "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y\n"
        "/setpivots - Thi·∫øt l·∫≠p 4 pivot ban ƒë·∫ßu ƒë·ªÉ S1 c√≥ th·ªÉ ph√¢n lo·∫°i pivot m·ªõi\n"
        "/status - Hi·ªÉn th·ªã tr·∫°ng th√°i c·ªßa bot\n\n"
        
        "*Quy tr√¨nh s·ª≠ d·ª•ng:*\n"
        "1. D√πng l·ªánh /setpivots ƒë·ªÉ thi·∫øt l·∫≠p 4 pivot ban ƒë·∫ßu (LL, LH, HL, HH)\n"
        "2. Bot s·∫Ω t·ª± ƒë·ªông thu th·∫≠p d·ªØ li·ªáu t·ª´ Binance m·ªói 30 ph√∫t\n"
        "3. Khi ph√°t hi·ªán pivot m·ªõi, bot s·∫Ω th√¥ng b√°o trong chat n√†y\n\n"
        
        "*Ch√∫ √Ω:* T·∫•t c·∫£ th·ªùi gian ƒë∆∞·ª£c s·ª≠ d·ª•ng l√† m√∫i gi·ªù Vi·ªát Nam (GMT+7)"
    )
    
    update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN
    )  

def status_command(update: Update, context: CallbackContext):
    """Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa bot"""
    pivots = pivot_data.get_all_pivots()
    
    # Th√¥ng tin chung
    now_utc = datetime.now(pytz.UTC)
    now_vn = now_utc.astimezone(pytz.timezone('Asia/Ho_Chi_Minh'))
    
    # T·∫°o tin nh·∫Øn tr·∫°ng th√°i
    status_text = (
        "*S1 Bot Status*\n\n"
        f"‚è∞ *Th·ªùi gian hi·ªán t·∫°i:* {now_vn.strftime('%Y-%m-%d %H:%M:%S')} (GMT+7)\n"
        f"üî¢ *T·ªïng s·ªë pivot:* {len(pivots)}\n"
        f"üë§ *User:* {pivot_data.user}\n"
        f"‚öôÔ∏è *Environment:* {ENVIRONMENT}\n\n"
    )
    
    # Th√™m th√¥ng tin v·ªÅ pivot g·∫ßn ƒë√¢y nh·∫•t
    if pivots:
        recent_pivots = pivots[-4:] if len(pivots) >= 4 else pivots
        status_text += "*Pivot g·∫ßn ƒë√¢y:*\n"
        for pivot in recent_pivots:
            status_text += f"‚Ä¢ {pivot['type']}: ${pivot['price']:,.2f} ({pivot.get('vn_datetime', pivot['time'])})\n"
    else:
        status_text += "*Ch∆∞a c√≥ pivot n√†o!* S·ª≠ d·ª•ng /setpivots ƒë·ªÉ thi·∫øt l·∫≠p 4 pivot ban ƒë·∫ßu.\n"
    
    update.message.reply_text(
        status_text,
        parse_mode=ParseMode.MARKDOWN
    )

def test_command(update: Update, context: CallbackContext):
    """Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Telegram API"""
    update.message.reply_text(
        f"‚úÖ S1 Bot ƒëang k·∫øt n·ªëi!\n"
        f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üë§ User ID: {update.effective_user.id}"
    )
    
def main():
    """Main entry point to start the bot."""
    try:
        # Th√™m th√¥ng tin v·ªÅ th·ªùi gian kh·ªüi ƒë·ªông
        start_time = datetime.now()
        start_time_str = start_time.strftime('%Y-%m-%d %H:%M:%S')
        
        # Ki·ªÉm tra c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
        for dir_path in ['logs', 'data', 'backup']:
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)
                
        # Th√¥ng b√°o kh·ªüi ƒë·ªông
        save_log("=== S1 Bot kh·ªüi ƒë·ªông ===", DEBUG_LOG_FILE)
        save_log(f"M√¥i tr∆∞·ªùng: {ENVIRONMENT}", DEBUG_LOG_FILE)
        save_log(f"Th·ªùi gian kh·ªüi ƒë·ªông: {start_time_str}", DEBUG_LOG_FILE)
                
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        job_queue = updater.job_queue
        
        schedule_next_run(job_queue)  # Schedule first run

        # Set up conversation handler for setting initial pivots
        setpivots_conv_handler = ConversationHandler(
            entry_points=[CommandHandler('setpivots', start_setpivots)],
            states={
                WAITING_FOR_PIVOT_LL: [
                    MessageHandler(Filters.text & ~Filters.command, process_pivot_ll)
                ],
                WAITING_FOR_PIVOT_LH: [
                    MessageHandler(Filters.text & ~Filters.command, process_pivot_lh)
                ],
                WAITING_FOR_PIVOT_HL: [
                    MessageHandler(Filters.text & ~Filters.command, process_pivot_hl)
                ],
                WAITING_FOR_PIVOT_HH: [
                    MessageHandler(Filters.text & ~Filters.command, process_pivot_hh)
                ]
            },
            fallbacks=[CommandHandler('cancel', cancel_setpivots)],
            allow_reentry=True
        )

        # Add handlers to dispatcher
        dp.add_handler(setpivots_conv_handler)
        dp.add_handler(CommandHandler('help', help_command))
        dp.add_handler(CommandHandler('status', status_command))
        dp.add_handler(CommandHandler('test', test_command))
        
        # Th√¥ng b√°o kh·ªüi ƒë·ªông qua Telegram
        bot = Bot(TOKEN)
        bot.send_message(
            chat_id=CHAT_ID,
            text=f"üöÄ *S1 BOT STARTED*\n\nBot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng!\nM√¥i tr∆∞·ªùng: `{ENVIRONMENT}`\nTh·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            parse_mode='Markdown'
        )
        
        print("S1 Bot is running...")  # Thay th·∫ø b·∫±ng ti·∫øng Anh ho·∫∑c kh√¥ng d·∫•u
        logger.info("Bot started successfully.")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        error_msg = f"L·ªói trong h√†m main: {str(e)}"
        logger.error(error_msg)
        save_log(error_msg, DEBUG_LOG_FILE)
        save_log(traceback.format_exc(), DEBUG_LOG_FILE)
        send_error_notification(error_msg)

if __name__ == "__main__":
    main()
