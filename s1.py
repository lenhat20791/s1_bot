import logging
import json
import pandas as pd
import os
import time
import pytz
import traceback
from datetime import datetime, timedelta
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue
from binance.client import Client
from openpyxl import Workbook
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis
from openpyxl.chart.marker import Marker
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter

# Configurations
TOKEN = "7637023247:AAG_utVTC0rXyfute9xsBdh-IrTUE3432o8"
BINANCE_API_KEY = "aVim4czsoOzuLxk0CsEsV0JwE58OX90GRD8OvDfT8xH2nfSEC0mMnMCVrwgFcSEi"
BINANCE_API_SECRET = "rIQ2LLUtYWBcXt5FiMIHuXeeDJqeREbvw8r9NlTJ83gveSAvpSMqd1NBoQjAodC4"
CHAT_ID = 7662080576
LOG_FILE = "bot_log.json"
PATTERN_LOG_FILE = "pattern_log.txt"
DEBUG_LOG_FILE = "debug_historical_test.log"
EXCEL_FILE = "pivots.xlsx"
    
# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ensure log files exist
for file in [LOG_FILE, PATTERN_LOG_FILE, DEBUG_LOG_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            f.write("=== Log Initialized ===\n")

# Initialize Binance Client
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

def save_log(log_message, filename):
    """Ghi log v·ªõi timestamp v√† format nh·∫•t qu√°n"""
    try:
        # Th√™m timestamp n·∫øu d√≤ng log kh√¥ng ph·∫£i l√† d√≤ng tr·ªëng
        if log_message.strip():
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            formatted_message = f"[{timestamp}] {log_message}"
        else:
            formatted_message = log_message

        with open(filename, "a", encoding="utf-8") as f:
            f.write(formatted_message + "\n")
    except Exception as e:
        print(f"Error saving log: {str(e)}")
        
# Th√™m h√†m ƒë·ªÉ set c√°c gi√° tr·ªã n√†y
def set_current_time_and_user(current_time, current_user):
    """Set th·ªùi gian v√† user hi·ªán t·∫°i v·ªõi support m√∫i gi·ªù Vi·ªát Nam"""
    try:
        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù Vi·ªát Nam n·∫øu input l√† UTC
        if isinstance(current_time, str):
            try:
                # Parse th·ªùi gian UTC
                utc_dt = datetime.strptime(current_time, '%Y-%m-%d %H:%M:%S')
                utc_dt = utc_dt.replace(tzinfo=pytz.UTC)
                # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
                vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                vn_time = utc_dt.astimezone(vn_tz)
                # Format l·∫°i th√†nh string
                pivot_data.current_time = vn_time.strftime('%H:%M')  # Ch·ªâ l·∫•y gi·ªù:ph√∫t cho pivot
            except ValueError as e:
                save_log(f"Error parsing time: {str(e)}", DEBUG_LOG_FILE)
                return False

        pivot_data.current_user = current_user
        
        # Log chi ti·∫øt h∆°n
        save_log("\n=== C·∫≠p nh·∫≠t th√¥ng tin phi√™n ===", DEBUG_LOG_FILE)
        save_log(f"UTC time: {current_time}", DEBUG_LOG_FILE)
        if 'vn_time' in locals():
            save_log(f"Vietnam time: {vn_time.strftime('%Y-%m-%d %H:%M:%S (GMT+7)')}", DEBUG_LOG_FILE)
        save_log(f"Pivot time format: {pivot_data.current_time}", DEBUG_LOG_FILE)
        save_log(f"User: {current_user}", DEBUG_LOG_FILE)
        save_log("="*30, DEBUG_LOG_FILE)
        return True

    except Exception as e:
        save_log(f"Error setting time and user: {str(e)}", DEBUG_LOG_FILE)
        return False
                
class PivotData:
    def __init__(self, user="lenhat20791"):
        """
        Kh·ªüi t·∫°o S1 bot
        Args:
            user: T√™n ng∆∞·ªùi d√πng
        """
        # C√°c h·∫±ng s·ªë
        self.LEFT_BARS = 5          # S·ªë n·∫øn so s√°nh b√™n tr√°i
        self.RIGHT_BARS = 5         # S·ªë n·∫øn so s√°nh b√™n ph·∫£i
        self.MIN_BARS_BETWEEN_PIVOTS = 4  # Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c pivot

        # Kh·ªüi t·∫°o c√°c bi·∫øn
        self.price_history = []     # L∆∞u to√†n b·ªô l·ªãch s·ª≠ gi√°
        self.confirmed_pivots = []  # L∆∞u c√°c pivot ƒë√£ x√°c nh·∫≠n
        self.current_time = None    # Th·ªùi gian hi·ªán t·∫°i
        self.user = user           # T√™n ng∆∞·ªùi d√πng

        save_log("=== S1 Bot Initialized ===", DEBUG_LOG_FILE)
        save_log(f"üë§ User: {self.user}", DEBUG_LOG_FILE)
        save_log(f"‚öôÔ∏è Settings:", DEBUG_LOG_FILE)
        save_log(f"  - Left bars: {self.LEFT_BARS}", DEBUG_LOG_FILE)
        save_log(f"  - Right bars: {self.RIGHT_BARS}", DEBUG_LOG_FILE)
        save_log(f"  - Min bars between pivots: {self.MIN_BARS_BETWEEN_PIVOTS}", DEBUG_LOG_FILE)
        
    def set_current_time(self, time):
        """C·∫≠p nh·∫≠t current_time"""
        self.current_time = time
        save_log(f"‚è∞ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian: {time}", DEBUG_LOG_FILE)    
        
    def clear_all(self):
        """Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.price_history.clear()
        self.confirmed_pivots.clear()
        
        save_log("\n=== Reset To√†n B·ªô D·ªØ Li·ªáu ===", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a price history", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a confirmed pivots", DEBUG_LOG_FILE)
        save_log("==============================", DEBUG_LOG_FILE)  
             
    def process_new_data(self, data):
        """
        X·ª≠ l√Ω khi c√≥ d·ªØ li·ªáu m·ªõi - h√†m duy nh·∫•t ƒë·ªÉ x·ª≠ l√Ω n·∫øn m·ªõi
        """
        try:
            # 1. Th√™m n·∫øn m·ªõi v√†o l·ªãch s·ª≠
            self.price_history.append(data)
            
            # L·∫•y th·ªùi gian t·ª´ d·ªØ li·ªáu test
            if 'test_time' in data:
                # Format: '2025-03-14 23:30'
                utc_dt = datetime.strptime(data['test_time'], '%Y-%m-%d %H:%M')
            else:
                # S·ª≠ d·ª•ng current_time n·∫øu kh√¥ng c√≥ test_time
                current_date = datetime.now(pytz.UTC).date()
                utc_dt = datetime.strptime(f"{current_date} {data['time']}", '%Y-%m-%d %H:%M')
                
            # Chuy·ªÉn sang VN time
            vn_dt = utc_dt + timedelta(hours=7)
            
            # Format strings cho log
            utc_time_str = utc_dt.strftime('%Y-%m-%d %H:%M')
            vn_time_str = vn_dt.strftime('%H:%M %d/%m/%Y')

            save_log(f"\n=== N·∫øn {utc_time_str} ({vn_time_str}) ===", DEBUG_LOG_FILE)
            save_log(f"üìä High: ${data['high']:,.2f}, Low: ${data['low']:,.2f}", DEBUG_LOG_FILE)
            save_log(f"üìà T·ªïng s·ªë n·∫øn: {len(self.price_history)}", DEBUG_LOG_FILE)
            
            # 2. N·∫øu kh√¥ng ƒë·ªß n·∫øn cho c·ª≠a s·ªï pivot, tho√°t
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß n·∫øn ƒë·ªÉ ph√°t hi·ªán pivot ({len(self.price_history)}/{self.LEFT_BARS + self.RIGHT_BARS + 1})", DEBUG_LOG_FILE)
                return True
            
            # 3. Ph√°t hi·ªán pivot - s·ª≠ d·ª•ng n·∫øn ·ªü gi·ªØa c·ª≠a s·ªï
            center_idx = len(self.price_history) - self.RIGHT_BARS - 1
            center_candle = self.price_history[center_idx]
            
            # Chuy·ªÉn ƒë·ªïi th·ªùi gian UTC sang VN
            current_date = datetime.now(pytz.UTC).date()
            utc_time = center_candle['time']
            utc_dt = datetime.strptime(f"{current_date} {utc_time}", '%Y-%m-%d %H:%M')
            vn_dt = utc_dt + timedelta(hours=7)
            vn_time = vn_dt.strftime('%H:%M')
            
            # 4. Ki·ªÉm tra high v√† low c·ªßa n·∫øn ·ªü gi·ªØa c·ª≠a s·ªï
            high_pivot = self.detect_pivot(center_candle['high'], 'high')
            low_pivot = self.detect_pivot(center_candle['low'], 'low')
            
            # 5. Log k·∫øt qu·∫£ v√† c·∫≠p nh·∫≠t Excel n·∫øu ph√°t hi·ªán pivot m·ªõi
            if high_pivot or low_pivot:
                if high_pivot:
                    save_log(f"‚úÖ Ph√°t hi·ªán {high_pivot['type']} t·∫°i ${high_pivot['price']:,.2f} ({high_pivot['time']})", DEBUG_LOG_FILE)
                    
                if low_pivot:
                    save_log(f"‚úÖ Ph√°t hi·ªán {low_pivot['type']} t·∫°i ${low_pivot['price']:,.2f} ({low_pivot['time']})", DEBUG_LOG_FILE)
                    
                self.save_to_excel()
                
            return True
                
        except Exception as e:
            save_log(f"\n‚ùå L·ªñI X·ª¨ L√ù N·∫æN M·ªöI:", DEBUG_LOG_FILE)
            save_log(f"- Chi ti·∫øt: {str(e)}", DEBUG_LOG_FILE)
            save_log(f"- Trace: {traceback.format_exc()}", DEBUG_LOG_FILE)
            return False    
            
    def detect_pivot(self, price, direction):
        """
        Ph√°t hi·ªán pivot theo logic TradingView ch√≠nh x√°c
        Args:
            price: Gi√° c·ªßa ƒëi·ªÉm pivot ti·ªÅm nƒÉng
            direction: 'high' ho·∫∑c 'low'
        Returns:
            dict: Pivot m·ªõi ho·∫∑c None
        """
        try:
            save_log(f"\n=== Ki·ªÉm tra pivot {direction.upper()} (${price:,.2f}) ===", DEBUG_LOG_FILE)
            
            # 1. Ki·ªÉm tra ƒë·ªß s·ªë n·∫øn
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß n·∫øn ƒë·ªÉ x√°c ƒë·ªãnh pivot", DEBUG_LOG_FILE)
                return None

            # 2. L·∫•y c·ª≠a s·ªï hi·ªán t·∫°i (11 n·∫øn)
            window = self.price_history[-(self.LEFT_BARS + self.RIGHT_BARS + 1):]
            center_idx = self.LEFT_BARS
            center_candle = window[center_idx]
            center_time = center_candle['time']
            
            # Chuy·ªÉn ƒë·ªïi center_time t·ª´ UTC sang Vietnam time
            # L·∫•y ng√†y hi·ªán t·∫°i t·ª´ UTC
            current_date = datetime.strptime("2025-03-21 04:20:30", '%Y-%m-%d %H:%M:%S').date()
            # T·∫°o datetime object t·ª´ center_time
            utc_dt = datetime.strptime(f"{current_date} {center_time}", '%Y-%m-%d %H:%M')
            # Chuy·ªÉn sang Vietnam time
            vn_dt = utc_dt + timedelta(hours=7)
            # Format th·ªùi gian Vi·ªát Nam
            vn_time = vn_dt.strftime('%H:%M %d/%m/%Y')
            
            # 3. Ki·ªÉm tra kho·∫£ng c√°ch t·ªëi thi·ªÉu
            if not self._is_valid_pivot_spacing(center_time):
                save_log(f"‚ùå B·ªè qua pivot do kh√¥ng ƒë·ªß kho·∫£ng c√°ch t·ªëi thi·ªÉu {self.MIN_BARS_BETWEEN_PIVOTS} n·∫øn", DEBUG_LOG_FILE)
                return None
            
            # 4. So s√°nh gi√° v·ªõi c√°c n·∫øn tr√°i v√† ph·∫£i
            if direction == "high":
                # So s√°nh v·ªõi c√°c n·∫øn b√™n tr√°i
                left_prices = [bar['high'] for bar in window[:center_idx]]
                # So s√°nh v·ªõi c√°c n·∫øn b√™n ph·∫£i
                right_prices = [bar['high'] for bar in window[center_idx + 1:]]
                
                # Log ƒë·ªÉ d·ªÖ theo d√µi
                save_log(f"High c·ªßa n·∫øn tr√°i: ${max(left_prices):,.2f}", DEBUG_LOG_FILE)
                save_log(f"High c·ªßa n·∫øn ph·∫£i: ${max(right_prices):,.2f}", DEBUG_LOG_FILE)
                
                # ƒêi·ªÅu ki·ªán pivot high: cao h∆°n T·∫§T C·∫¢ c√°c n·∫øn b√™n tr√°i v√† b√™n ph·∫£i
                is_pivot = price > max(left_prices) and price > max(right_prices)
                
            else:  # direction == "low"
                # So s√°nh v·ªõi c√°c n·∫øn b√™n tr√°i
                left_prices = [bar['low'] for bar in window[:center_idx]]
                # So s√°nh v·ªõi c√°c n·∫øn b√™n ph·∫£i
                right_prices = [bar['low'] for bar in window[center_idx + 1:]]
                
                # Log ƒë·ªÉ d·ªÖ theo d√µi
                save_log(f"Low c·ªßa n·∫øn tr√°i: ${min(left_prices):,.2f}", DEBUG_LOG_FILE)
                save_log(f"Low c·ªßa n·∫øn ph·∫£i: ${min(right_prices):,.2f}", DEBUG_LOG_FILE)
                
                # ƒêi·ªÅu ki·ªán pivot low: th·∫•p h∆°n T·∫§T C·∫¢ c√°c n·∫øn b√™n tr√°i v√† b√™n ph·∫£i
                is_pivot = price < min(left_prices) and price < min(right_prices)
            
            # 5. N·∫øu kh√¥ng ph·∫£i pivot, tr·∫£ v·ªÅ None
            if not is_pivot:
                save_log(f"‚ùå Kh√¥ng ph·∫£i ƒëi·ªÉm pivot {direction}", DEBUG_LOG_FILE)
                return None
            
            save_log(f"‚úÖ L√† ƒëi·ªÉm pivot {direction} t·∫°i {vn_time}", DEBUG_LOG_FILE)
                            
            # 6. N·∫øu l√† pivot, t·∫°o ƒë·ªëi t∆∞·ª£ng pivot m·ªõi
            new_pivot = {
                'price': float(price),
                'time': center_time,
                'time_vn': vn_time,  # Th√™m Vietnam time
                'direction': direction,
                'confirmed': True
            }
            
            # 7. Ph√¢n lo·∫°i pivot
            pivot_type = self._determine_pivot_type(price, direction)
            if pivot_type:
                new_pivot['type'] = pivot_type
                # 7. Th√™m v√†o danh s√°ch pivot x√°c nh·∫≠n
                if self._add_confirmed_pivot(new_pivot):
                    return new_pivot
            else:
                save_log(f"‚ùå Kh√¥ng th·ªÉ ph√¢n lo·∫°i pivot {direction}", DEBUG_LOG_FILE)
                    
            return None
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√°t hi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return None

    def _calculate_bars_between(self, time1, time2):
        """T√≠nh s·ªë n·∫øn gi·ªØa hai th·ªùi ƒëi·ªÉm, x·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p qua ng√†y"""
        try:
            if time2.hour < time1.hour:
                # Qua ng√†y m·ªõi
                minutes_to_midnight = (24 * 60) - (time1.hour * 60 + time1.minute)
                minutes_from_midnight = time2.hour * 60 + time2.minute
                total_minutes = minutes_to_midnight + minutes_from_midnight
            else:
                # C√πng ng√†y
                total_minutes = (time2.hour * 60 + time2.minute) - (time1.hour * 60 + time1.minute)
            
            return total_minutes / 30

        except Exception as e:
            save_log(f"‚ùå L·ªói khi t√≠nh s·ªë n·∫øn gi·ªØa hai th·ªùi ƒëi·ªÉm: {str(e)}", DEBUG_LOG_FILE)
            return 0 
    
    # Trong s1.py - Thay ƒë·ªïi ph∆∞∆°ng th·ª©c _add_confirmed_pivot
    def _add_confirmed_pivot(self, pivot):
        """
        Th√™m pivot m·ªõi v√†o l·ªãch s·ª≠
        Args:
            pivot: Dictionary ch·ª©a th√¥ng tin pivot
        Returns:
            bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # Ki·ªÉm tra kho·∫£ng c√°ch v·ªõi t·∫•t c·∫£ pivot ƒë√£ c√≥
            if not pivot.get('skip_spacing_check', False):
                for existing_pivot in self.confirmed_pivots:
                    pivot_time_obj = datetime.strptime(pivot['time'], '%H:%M')
                    existing_time_obj = datetime.strptime(existing_pivot['time'], '%H:%M')
                    
                    # T√≠nh kho·∫£ng c√°ch theo ph√∫t
                    time_diff_minutes = abs((pivot_time_obj.hour - existing_time_obj.hour) * 60 + 
                                          pivot_time_obj.minute - existing_time_obj.minute)
                    
                    # Kho·∫£ng c√°ch theo s·ªë n·∫øn (m·ªói n·∫øn 30 ph√∫t)
                    bars_between = time_diff_minutes / 30
                    
                    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p qua ng√†y
                    if bars_between > 22:
                        bars_between = 48 - (time_diff_minutes / 30)
                        
                    if bars_between < self.MIN_BARS_BETWEEN_PIVOTS:
                        save_log(f"‚ö†Ô∏è B·ªè qua pivot {pivot.get('type', 'unknown')} t·∫°i {pivot['time']} do g·∫ßn v·ªõi {existing_pivot.get('type', 'unknown')} ({existing_pivot['time']})", DEBUG_LOG_FILE)
                        save_log(f"Kho·∫£ng c√°ch: {bars_between:.1f} n·∫øn (t·ªëi thi·ªÉu {self.MIN_BARS_BETWEEN_PIVOTS})", DEBUG_LOG_FILE)
                        return False
            
            # N·∫øu ƒë·∫°t ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch, th√™m pivot v√†o danh s√°ch
            self.confirmed_pivots.append(pivot)
            
            # Chuy·ªÉn ƒë·ªïi th·ªùi gian UTC sang VN
            current_date = datetime.now(pytz.UTC).date()
            utc_dt = datetime.strptime(f"{current_date} {pivot['time']}", '%Y-%m-%d %H:%M')
            vn_dt = utc_dt + timedelta(hours=7)
            vn_time = vn_dt.strftime('%H:%M %d/%m/%Y')
            
            save_log("\n=== Th√™m Pivot M·ªõi ===", DEBUG_LOG_FILE)
            save_log(f"Lo·∫°i: {pivot.get('type', 'unknown')}", DEBUG_LOG_FILE)
            save_log(f"Gi√°: ${pivot['price']:,.2f}", DEBUG_LOG_FILE)
            save_log(f"Th·ªùi gian: {vn_time}", DEBUG_LOG_FILE)
            
            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def get_recent_pivots(self, count=4):
        """L·∫•y c√°c pivot g·∫ßn nh·∫•t"""
        try:
            save_log("\n=== L·∫•y pivot g·∫ßn nh·∫•t ===", DEBUG_LOG_FILE)
            save_log(f"Y√™u c·∫ßu: {count} pivot", DEBUG_LOG_FILE)
            save_log(f"T·ªïng s·ªë pivot hi·ªán c√≥: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
            
            recent = self.confirmed_pivots[-count:] if self.confirmed_pivots else []
            
            if recent:
                save_log("C√°c pivot ƒë∆∞·ª£c ch·ªçn:", DEBUG_LOG_FILE)
                for i, p in enumerate(recent, 1):
                    save_log(f"{i}. {p['type']} t·∫°i ${p['price']:,.2f} ({p['time']})", DEBUG_LOG_FILE)
            else:
                save_log("Kh√¥ng c√≥ pivot n√†o", DEBUG_LOG_FILE)
            
            return recent

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l·∫•y recent pivots: {str(e)}", DEBUG_LOG_FILE)
            return []
             
    def save_to_excel(self):
        try:
            if not self.confirmed_pivots:
                save_log("\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu pivot ƒë·ªÉ l∆∞u", DEBUG_LOG_FILE)
                return

            save_log("\n=== B·∫Øt ƒë·∫ßu l∆∞u d·ªØ li·ªáu v√†o Excel ===", DEBUG_LOG_FILE)
            save_log(f"üìä T·ªïng s·ªë pivot: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)

            # Chu·∫©n b·ªã d·ªØ li·ªáu
            excel_data = []
            
            # S·∫Øp x·∫øp pivots theo th·ªùi gian
            sorted_pivots = sorted(
                self.confirmed_pivots,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )
            
            # L·∫•y ng√†y ƒë·∫ßu ti√™n t·ª´ test data ho·∫∑c ng√†y hi·ªán t·∫°i
            start_date = None
            if 'test_time' in sorted_pivots[0]:
                start_date = datetime.strptime(sorted_pivots[0]['test_time'], '%Y-%m-%d %H:%M').date()
            else:
                start_date = datetime.now(pytz.UTC).date()
            
            current_date = start_date
            prev_hour = None
            
            for pivot in sorted_pivots:
                # X·ª≠ l√Ω th·ªùi gian
                hour = int(pivot['time'].split(':')[0])
                
                # N·∫øu gi·ªù m·ªõi nh·ªè h∆°n gi·ªù tr∆∞·ªõc, tƒÉng ng√†y l√™n 1
                if prev_hour is not None and hour < prev_hour:
                    current_date += timedelta(days=1)
                prev_hour = hour
                
                # T·∫°o datetime object t·ª´ ng√†y v√† gi·ªù
                utc_dt = datetime.strptime(f"{current_date} {pivot['time']}", '%Y-%m-%d %H:%M')
                
                # Chuy·ªÉn sang VN time (+7)
                vn_dt = utc_dt + timedelta(hours=7)
                
                excel_data.append({
                    'datetime': vn_dt,
                    'price': pivot['price'],
                    'pivot_type': pivot['type'],
                    'time': vn_dt.strftime('%H:%M'),
                    'date': vn_dt.strftime('%Y-%m-%d')
                })

            # T·∫°o DataFrame
            df = pd.DataFrame(excel_data)

            # Ghi v√†o Excel v·ªõi ƒë·ªãnh d·∫°ng
            with pd.ExcelWriter('test_results.xlsx', engine='xlsxwriter') as writer:
                df.columns = ['Datetime (VN)', 'Price', 'Pivot Type', 'Time (VN)', 'Date (VN)']
                df.to_excel(writer, sheet_name='Pivot Analysis', index=False)
                workbook = writer.book
                worksheet = writer.sheets['Pivot Analysis']

                # ƒê·ªãnh d·∫°ng c·ªôt
                datetime_format = workbook.add_format({'num_format': 'yyyy-mm-dd hh:mm:ss'})
                price_format = workbook.add_format({'num_format': '$#,##0.00'})
                
                # √Åp d·ª•ng ƒë·ªãnh d·∫°ng
                worksheet.set_column('A:A', 20, datetime_format)  # datetime
                worksheet.set_column('B:B', 15, price_format)     # price
                worksheet.set_column('C:C', 10)                   # pivot_type
                worksheet.set_column('D:D', 10)                   # time
                worksheet.set_column('E:E', 12)                   # date

                # Th√™m th·ªëng k√™
                row = len(df) + 2
                worksheet.write(row, 0, 'Th·ªëng k√™:')
                worksheet.write(row + 1, 0, 'T·ªïng s·ªë pivot:')
                worksheet.write(row + 1, 1, len(df), price_format)

                # Ph√¢n b·ªë pivot
                types_count = df['Pivot Type'].value_counts()
                worksheet.write(row + 2, 0, 'Ph√¢n b·ªë pivot:')
                current_row = row + 3
                for ptype in ['HH', 'HL', 'LH', 'LL']:
                    if ptype in types_count:
                        worksheet.write(current_row, 0, f'{ptype}:')
                        worksheet.write(current_row, 1, types_count[ptype], price_format)
                        current_row += 1

            save_log("‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng v√†o Excel", DEBUG_LOG_FILE)

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l∆∞u Excel: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            
    def _get_pivot_comment(self, pivot_type, price_change):
        """T·∫°o comment cho pivot d·ª±a tr√™n lo·∫°i v√† % thay ƒë·ªïi"""
        comment = f"{pivot_type}: "
        if pivot_type in ['HH', 'HL']:
            comment += "Bullish " if price_change > 0 else "Caution "
        else:  # LH, LL
            comment += "Bearish " if price_change < 0 else "Caution "
        comment += f"({price_change:+.2f}%)"
        return comment
        
    def get_all_pivots(self):
        """L·∫•y t·∫•t c·∫£ c√°c pivot theo th·ª© t·ª± th·ªùi gian"""
        try:
            if not self.confirmed_pivots:
                return []
                
            # S·∫Øp x·∫øp theo th·ªùi gian
            sorted_pivots = sorted(
                self.confirmed_pivots,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )
            
            save_log(f"\nT·ªïng s·ªë pivot: {len(sorted_pivots)}", DEBUG_LOG_FILE)
            return sorted_pivots
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi l·∫•y all pivots: {str(e)}", DEBUG_LOG_FILE)
            return []    
                
    def _determine_pivot_type(self, price, direction):
        """
        X√°c ƒë·ªãnh lo·∫°i pivot theo logic TradingView ch√≠nh x√°c
        Args:
            price: Gi√° c·ªßa pivot hi·ªán t·∫°i
            direction: 'high' ho·∫∑c 'low'
        Returns:
            str: Lo·∫°i pivot (HH, HL, LH, LL) ho·∫∑c None
        """
        try:
            # 1. C·∫ßn √≠t nh·∫•t 4 pivot tr∆∞·ªõc ƒë√≥ ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i
            if len(self.confirmed_pivots) < 4:
                save_log("‚ö†Ô∏è Ch∆∞a ƒë·ªß pivot ƒë·ªÉ ph√¢n lo·∫°i", DEBUG_LOG_FILE)
                return None
                
            # Log th√¥ng tin t·ªïng qu√°t tr∆∞·ªõc khi ph√¢n t√≠ch chi ti·∫øt
            save_log(f"\n=== Ph√¢n t√≠ch pivot {direction.upper()} (gi√°: ${price:,.2f}) ===", DEBUG_LOG_FILE)
            save_log(f"T·ªïng s·ªë pivot hi·ªán c√≥: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
                
            # 2. L·ªçc v√† l·∫•y c√°c pivot c√πng h∆∞·ªõng v·ªõi pivot hi·ªán t·∫°i
            same_direction_pivots = [p for p in self.confirmed_pivots if p['direction'] == direction]
            save_log(f"S·ªë pivot c√πng h∆∞·ªõng {direction}: {len(same_direction_pivots)}", DEBUG_LOG_FILE)
            
            if len(same_direction_pivots) < 2:
                save_log(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß pivot c√πng h∆∞·ªõng {direction} ƒë·ªÉ ph√¢n lo·∫°i", DEBUG_LOG_FILE)
                return None
                
            # 3. L·∫•y pivot g·∫ßn nh·∫•t c√πng h∆∞·ªõng
            prev_pivot = same_direction_pivots[-1]
            
            # 4. L·ªçc v√† l·∫•y c√°c pivot h∆∞·ªõng ng∆∞·ª£c l·∫°i
            opposite_direction = 'low' if direction == 'high' else 'high'
            opposite_direction_pivots = [p for p in self.confirmed_pivots if p['direction'] == opposite_direction]
            save_log(f"S·ªë pivot h∆∞·ªõng ng∆∞·ª£c {opposite_direction}: {len(opposite_direction_pivots)}", DEBUG_LOG_FILE)
            
            if len(opposite_direction_pivots) < 2:
                save_log(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß pivot h∆∞·ªõng ng∆∞·ª£c {opposite_direction} ƒë·ªÉ ph√¢n lo·∫°i", DEBUG_LOG_FILE)
                return None
                
            # 5. L·∫•y 2 pivot g·∫ßn nh·∫•t c√≥ h∆∞·ªõng ng∆∞·ª£c l·∫°i
            prev_opposite_pivots = opposite_direction_pivots[-2:]
            
            a = price  # Gi√° pivot hi·ªán t·∫°i
            b = prev_pivot['price']  # Gi√° pivot tr∆∞·ªõc ƒë√≥ c√πng h∆∞·ªõng
            c = opposite_direction_pivots[-1]['price']  # Pivot g·∫ßn nh·∫•t h∆∞·ªõng ng∆∞·ª£c l·∫°i
            d = opposite_direction_pivots[-2]['price']  # Pivot th·ª© 2 h∆∞·ªõng ng∆∞·ª£c l·∫°i
            
            save_log(f"\nGi√° c√°c pivot d√πng ƒë·ªÉ ph√¢n lo·∫°i:", DEBUG_LOG_FILE)
            save_log(f"a = ${a:,.2f} (pivot hi·ªán t·∫°i - {direction})", DEBUG_LOG_FILE)
            save_log(f"b = ${b:,.2f} (pivot tr∆∞·ªõc c√πng h∆∞·ªõng - {direction})", DEBUG_LOG_FILE)
            save_log(f"c = ${c:,.2f} (pivot ng∆∞·ª£c h∆∞·ªõng m·ªõi nh·∫•t - {opposite_direction})", DEBUG_LOG_FILE)
            save_log(f"d = ${d:,.2f} (pivot ng∆∞·ª£c h∆∞·ªõng th·ª© hai - {opposite_direction})", DEBUG_LOG_FILE)
            
            # 6. Logic x√°c ƒë·ªãnh lo·∫°i pivot theo TradingView
            result_type = None
            
            # Khi log k·∫øt qu·∫£ ph√¢n lo·∫°i pivot, th√™m th·ªùi gian VN
            # L·∫•y th·ªùi gian t·ª´ n·∫øn center ƒë∆∞·ª£c ki·ªÉm tra
            current_date = datetime.now(pytz.UTC).date()
            center_time = self.price_history[-(self.RIGHT_BARS + 1)]['time']  # L·∫•y th·ªùi gian c·ªßa n·∫øn center
            
            # Chuy·ªÉn ƒë·ªïi sang gi·ªù VN
            utc_dt = datetime.strptime(f"{current_date} {center_time}", '%Y-%m-%d %H:%M')
            vn_dt = utc_dt + timedelta(hours=7)
            vn_time = vn_dt.strftime('%H:%M')  # Ch·ªâ l·∫•y gi·ªù:ph√∫t
            
            if direction == "high":
                # Higher High: a > b v√† pivots c√≥ khu√¥n m·∫´u tƒÉng
                if a > b and c > d:
                    result_type = "HH"
                    save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    save_log(f"  L√Ω do: a > b (${a:,.2f} > ${b:,.2f}) v√† c > d (${c:,.2f} > ${d:,.2f})", DEBUG_LOG_FILE)
                # Lower High: a < b v√† pivots c√≥ khu√¥n m·∫´u gi·∫£m
                elif a < b:
                    result_type = "LH"
                    save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    save_log(f"  L√Ω do: a < b (${a:,.2f} < ${b:,.2f})", DEBUG_LOG_FILE)
                else:
                    save_log("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n lo·∫°i pivot high", DEBUG_LOG_FILE)
            else:  # direction == "low"
                # Lower Low: a < b v√† pivots c√≥ khu√¥n m·∫´u gi·∫£m
                if a < b and c < d:
                    result_type = "LL"
                    ssave_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    save_log(f"  L√Ω do: a < b (${a:,.2f} < ${b:,.2f}) v√† c < d (${c:,.2f} < ${d:,.2f})", DEBUG_LOG_FILE)
                # Higher Low: a > b v√† pivots c√≥ khu√¥n m·∫´u tƒÉng
                elif a > b:
                    result_type = "HL"
                    save_log(f"‚úÖ Pivot ({vn_time}) ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: {result_type}", DEBUG_LOG_FILE)
                    save_log(f"  L√Ω do: a > b (${a:,.2f} > ${b:,.2f})", DEBUG_LOG_FILE)
                else:
                    save_log("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n lo·∫°i pivot low", DEBUG_LOG_FILE)
                    
            return result_type
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi x√°c ƒë·ªãnh lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return None
    
    def _is_valid_pivot_spacing(self, new_pivot_time):
        """Ki·ªÉm tra kho·∫£ng c√°ch gi·ªØa pivot m·ªõi v√† pivot g·∫ßn nh·∫•t"""
        try:
            if not self.confirmed_pivots:
                return True
                
            last_pivot = self.confirmed_pivots[-1]
            
            # L·∫•y ng√†y hi·ªán t·∫°i (VN time)
            current_date = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).date()
            
            # Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian th√†nh datetime v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin ng√†y
            last_pivot_dt = datetime.strptime(f"{current_date} {last_pivot['time']}", '%Y-%m-%d %H:%M')
            new_pivot_dt = datetime.strptime(f"{current_date} {new_pivot_time}", '%Y-%m-%d %H:%M')
            
            # N·∫øu new_pivot_time < last_pivot_time, nghƒ©a l√† ƒë√£ qua ng√†y m·ªõi
            if new_pivot_dt < last_pivot_dt:
                new_pivot_dt = new_pivot_dt + timedelta(days=1)
            
            # T√≠nh s·ªë n·∫øn gi·ªØa 2 pivot (m·ªói n·∫øn 30 ph√∫t)
            bars_between = (new_pivot_dt - last_pivot_dt).total_seconds() / 1800
            
            is_valid = bars_between >= self.MIN_BARS_BETWEEN_PIVOTS
            if not is_valid:
                save_log(f"‚ö†Ô∏è B·ªè qua pivot t·∫°i {new_pivot_time} do kho·∫£ng c√°ch qu√° g·∫ßn (c·∫ßn t·ªëi thi·ªÉu {self.MIN_BARS_BETWEEN_PIVOTS} n·∫øn)", DEBUG_LOG_FILE)
                save_log(f"Range c·ªßa pivot g·∫ßn nh·∫•t ({last_pivot['type']} t·∫°i {last_pivot['time']})", DEBUG_LOG_FILE)
                save_log(f"Kho·∫£ng c√°ch th·ª±c t·∫ø: {bars_between:.1f} n·∫øn", DEBUG_LOG_FILE)
                
            return is_valid
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi ki·ªÉm tra kho·∫£ng c√°ch pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def _find_previous_pivots(self, direction, count=4):
        """
        T√¨m 4 pivot points g·∫ßn nh·∫•t c√πng h∆∞·ªõng
        Args:
            direction: 'high' ho·∫∑c 'low'
            count: S·ªë pivot c·∫ßn t√¨m
        Returns:
            list: Danh s√°ch gi√° c·ªßa c√°c pivot
        """
        results = []
        # Thay th·∫ø pivot_history b·∫±ng confirmed_pivots
        for pivot in reversed(self.confirmed_pivots):
            if pivot['direction'] == direction and len(results) < count:
                results.append(pivot['price'])
        return results + [None] * (count - len(results)) 
    
    def add_initial_pivot(self, pivot_data):
        """
        API an to√†n ƒë·ªÉ th√™m pivot ban ƒë·∫ßu, c≈©ng ki·ªÉm tra kho·∫£ng c√°ch
        """
        return self._add_confirmed_pivot(pivot_data)
        
# Create global instance
pivot_data = PivotData() 

# Export functions

# Cu·ªëi file s1.py th√™m d√≤ng n√†y
__all__ = ['pivot_data', 'detect_pivot', 'save_log', 'set_current_time_and_user']
    

def detect_pivot(price, direction):
    return pivot_data.detect_pivot(price, direction)
    
def get_binance_price(context: CallbackContext):
    try:
        klines = binance_client.futures_klines(symbol="BTCUSDT", interval="30m", limit=2)
        last_candle = klines[-2]  # Ensure we get the closed candle
        high_price = float(last_candle[2])
        low_price = float(last_candle[3])
        close_price = float(last_candle[4])
        
        # L·∫•y th·ªùi gian hi·ªán t·∫°i UTC
        now_utc = datetime.now(pytz.UTC)
        # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
        now_vn = now_utc.astimezone(pytz.timezone('Asia/Ho_Chi_Minh'))
        
        price_data = {
            "high": high_price,
            "low": low_price,
            "price": close_price,
            "time": now_vn.strftime("%H:%M")  # S·ª≠ d·ª•ng gi·ªù Vi·ªát Nam
        }
        pivot_data.process_new_data(price_data)  # S·ª≠ d·ª•ng h√†m h·ª£p nh·∫•t
        
        save_log(f"Thu th·∫≠p d·ªØ li·ªáu n·∫øn 30m: High=${high_price:,.2f}, Low=${low_price:,.2f}", DEBUG_LOG_FILE)
        
    except Exception as e:
        logger.error(f"Binance API Error: {e}")
        save_log(f"Binance API Error: {e}", DEBUG_LOG_FILE)
        
def schedule_next_run(job_queue):
    try:
        # L·∫•y th·ªùi gian hi·ªán t·∫°i UTC
        now_utc = datetime.now(pytz.UTC)
        # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
        now_vn = now_utc.astimezone(pytz.timezone('Asia/Ho_Chi_Minh'))
        
        # l√™n l·ªãch ch·∫°y khi ch·∫µn 30p
        next_run = now_vn.replace(second=0, microsecond=0) + timedelta(minutes=(30 - now_vn.minute % 30))
        delay = (next_run - now_vn).total_seconds()
        
        save_log(f"L√™n l·ªãch ch·∫°y v√†o {next_run.strftime('%Y-%m-%d %H:%M:%S')} (GMT+7)", DEBUG_LOG_FILE)
        # Thay ƒë·ªïi interval t·ª´ 300 (5 ph√∫t) sang 1800 (30 ph√∫t)
        job_queue.run_repeating(get_binance_price, interval=1800, first=delay)
    except Exception as e:
        logger.error(f"Error scheduling next run: {e}")
        save_log(f"Error scheduling next run: {e}", DEBUG_LOG_FILE)
     
def main():
    """Main entry point to start the bot."""
    try:
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        job_queue = updater.job_queue
        
        schedule_next_run(job_queue)  # Schedule first run
        
        print("Bot is running...")
        logger.info("Bot started successfully.")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"Error in main: {e}")
        save_log(f"Error in main: {e}", DEBUG_LOG_FILE)

if __name__ == "__main__":
    main()
