import logging
import json
import pandas as pd
import os
import time
import pytz
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue
from binance.client import Client
from openpyxl import Workbook
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis
from openpyxl.chart.marker import Marker
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter

# Configurations
TOKEN = "7637023247:AAG_utVTC0rXyfute9xsBdh-IrTUE3432o8"
BINANCE_API_KEY = "aVim4czsoOzuLxk0CsEsV0JwE58OX90GRD8OvDfT8xH2nfSEC0mMnMCVrwgFcSEi"
BINANCE_API_SECRET = "rIQ2LLUtYWBcXt5FiMIHuXeeDJqeREbvw8r9NlTJ83gveSAvpSMqd1NBoQjAodC4"
CHAT_ID = 7662080576
LOG_FILE = "bot_log.json"
PATTERN_LOG_FILE = "pattern_log.txt"
DEBUG_LOG_FILE = "debug_historical_test.log"
EXCEL_FILE = "pivots.xlsx"
    
# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ensure log files exist
for file in [LOG_FILE, PATTERN_LOG_FILE, DEBUG_LOG_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            f.write("=== Log Initialized ===\n")

# Initialize Binance Client
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

def save_log(log_message, filename):
    """Ghi log v·ªõi timestamp v√† format nh·∫•t qu√°n"""
    try:
        # Th√™m timestamp n·∫øu d√≤ng log kh√¥ng ph·∫£i l√† d√≤ng tr·ªëng
        if log_message.strip():
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            formatted_message = f"[{timestamp}] {log_message}"
        else:
            formatted_message = log_message

        with open(filename, "a", encoding="utf-8") as f:
            f.write(formatted_message + "\n")
    except Exception as e:
        print(f"Error saving log: {str(e)}")
        
# Th√™m h√†m ƒë·ªÉ set c√°c gi√° tr·ªã n√†y
def set_current_time_and_user(current_time, current_user):
    """Set th·ªùi gian v√† user hi·ªán t·∫°i v·ªõi support m√∫i gi·ªù Vi·ªát Nam"""
    try:
        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù Vi·ªát Nam n·∫øu input l√† UTC
        if isinstance(current_time, str):
            try:
                # Th·ª≠ parse th·ªùi gian UTC
                utc_dt = datetime.strptime(current_time, '%Y-%m-%d %H:%M:%S')
                utc_dt = utc_dt.replace(tzinfo=pytz.UTC)
                # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
                vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                vn_time = utc_dt.astimezone(vn_tz)
                # Format l·∫°i th√†nh string v·ªõi th√¥ng tin m√∫i gi·ªù
                current_time = vn_time.strftime('%Y-%m-%d %H:%M:%S (GMT+7)')

            except ValueError as e:
                save_log(f"Error parsing time: {str(e)}", DEBUG_LOG_FILE)
                return False

        pivot_data.current_time = current_time
        pivot_data.current_user = current_user
        save_log(f"\nCurrent Date and Time (Vietnam): {current_time}", DEBUG_LOG_FILE)
        save_log(f"Current User's Login: {current_user}", DEBUG_LOG_FILE)
        return True

    except Exception as e:
        save_log(f"Error setting time and user: {str(e)}", DEBUG_LOG_FILE)
        return False
                
class PivotData:
    def __init__(self):
        """Kh·ªüi t·∫°o PivotData object v·ªõi logic ho√†n to√†n m·ªõi"""
        # Constants cho logic m·ªõi
        self.LEFT_BARS = 5        # S·ªë n·∫øn so s√°nh b√™n tr√°i
        self.RIGHT_BARS = 5       # S·ªë n·∫øn so s√°nh b√™n ph·∫£i
        self.MIN_PIVOT_POINTS = 4 # S·ªë pivot t·ªëi thi·ªÉu ƒë·ªÉ x√°c ƒë·ªãnh pattern
        self.MIN_PRICE_CHANGE = 0.002  # 0.2% - T·ªâ l·ªá thay ƒë·ªïi gi√° t·ªëi thi·ªÉu cho pivot m·ªõi
        
        # Bi·∫øn theo d√µi th·ªùi gian
        self.current_time = None           
        self.last_update_time = None       
        
        # Bi·∫øn l∆∞u tr·ªØ d·ªØ li·ªáu
        self.price_history = []            # L·ªãch s·ª≠ gi√°
        self.confirmed_pivots = []         # C√°c pivot ƒë√£ x√°c nh·∫≠n
        self.user_pivots = []              # C√°c pivot do user th√™m v√†o
        
        # ƒêi·ªÉm tham chi·∫øu
        self.reference_pivots = {          
            'high': None,
            'low': None
        }
        
        # Th·ªëng k√™
        self.stats = {                     
            'total_detected': 0,           
            'total_confirmed': 0,          
        }
        
        save_log("üîÑ ƒê√£ kh·ªüi t·∫°o PivotData object v·ªõi logic m·ªõi ho√†n to√†n", DEBUG_LOG_FILE)
        
    def set_current_time(self, time):
        """C·∫≠p nh·∫≠t current_time"""
        self.current_time = time
        save_log(f"‚è∞ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian: {time}", DEBUG_LOG_FILE)
    
    def clear_all(self):
        """Reset t·∫•t c·∫£ d·ªØ li·ªáu"""
        self.price_history = []
        self.confirmed_pivots = []
        self.user_pivots = []    
        save_log("üîÑ ƒê√£ reset to√†n b·ªô d·ªØ li·ªáu", DEBUG_LOG_FILE)   

    def add_price_data(self, data):
        """Th√™m d·ªØ li·ªáu gi√° m·ªõi v·ªõi logging chi ti·∫øt"""
        try:
            # C·∫≠p nh·∫≠t th·ªùi gian v√† log header
            self.current_time = data["time"]
            save_log("\n" + "="*50, DEBUG_LOG_FILE)
            save_log(f"‚è∞ Th·ªùi ƒëi·ªÉm: {self.current_time}", DEBUG_LOG_FILE)
            save_log(f"üìä D·ªØ li·ªáu gi√°:", DEBUG_LOG_FILE)
            save_log(f"  - High: ${data['high']:,.2f}", DEBUG_LOG_FILE)
            save_log(f"  - Low: ${data['low']:,.2f}", DEBUG_LOG_FILE)
            save_log(f"  - Close: ${data['price']:,.2f}", DEBUG_LOG_FILE)

            # Th√™m v√†o l·ªãch s·ª≠ gi√°
            self.price_history.append(data)
            if len(self.price_history) > (self.LEFT_BARS + self.RIGHT_BARS + 1):
                self.price_history.pop(0)
            
            save_log(f"üìà S·ªë n·∫øn trong l·ªãch s·ª≠: {len(self.price_history)}/{self.LEFT_BARS + self.RIGHT_BARS + 1}", DEBUG_LOG_FILE)

            # Ph√°t hi·ªán pivot m·ªõi
            save_log("\nüîç Ki·ªÉm tra High Pivot:", DEBUG_LOG_FILE)
            high_pivot = self.detect_pivot(data["high"], "high")
            if high_pivot:
                self.stats['total_detected'] += 1
                
            save_log("\nüîç Ki·ªÉm tra Low Pivot:", DEBUG_LOG_FILE)
            low_pivot = self.detect_pivot(data["low"], "low")
            if low_pivot:
                self.stats['total_detected'] += 1

            save_log("="*50 + "\n", DEBUG_LOG_FILE)
            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m price data: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def get_pivot_support_resistance(self, lookback: int = 20) -> dict:
        """
        T√≠nh to√°n c√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª± d·ª±a tr√™n pivot points
        Returns:
            Dict ch·ª©a c√°c m·ª©c S/R v√† ƒë·ªô m·∫°nh c·ªßa ch√∫ng
        """
        try:
            if not hasattr(self, 'price_history') or len(self.price_history) < lookback:
                save_log(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh S/R (c·∫ßn {lookback})", DEBUG_LOG_FILE)
                return {}

            # L·∫•y d·ªØ li·ªáu trong kho·∫£ng lookback
            recent_data = self.price_history[-lookback:]
            
            # T√≠nh PP (Pivot Point)
            highs = [x['high'] for x in recent_data]
            lows = [x['low'] for x in recent_data]
            closes = [x['price'] for x in recent_data]
            
            pp = (max(highs) + min(lows) + closes[-1]) / 3
            
            # T√≠nh c√°c m·ª©c S/R
            r3 = pp + (max(highs) - min(lows))
            r2 = pp + (max(highs) - min(lows)) * 0.618  # Fibonacci ratio
            r1 = 2 * pp - min(lows)
            
            s1 = 2 * pp - max(highs)
            s2 = pp - (max(highs) - min(lows)) * 0.618
            s3 = pp - (max(highs) - min(lows))
            
            # T√≠nh ƒë·ªô m·∫°nh c·ªßa m·ªói m·ª©c
            def calculate_strength(level):
                touches = sum(1 for price in closes if abs(price - level) / level < 0.001)
                return min(touches / lookback * 100, 100)  # ƒê·ªô m·∫°nh t·ªëi ƒëa 100%
            
            levels = {
                "R3": {"price": r3, "strength": calculate_strength(r3)},
                "R2": {"price": r2, "strength": calculate_strength(r2)},
                "R1": {"price": r1, "strength": calculate_strength(r1)},
                "PP": {"price": pp, "strength": calculate_strength(pp)},
                "S1": {"price": s1, "strength": calculate_strength(s1)},
                "S2": {"price": s2, "strength": calculate_strength(s2)},
                "S3": {"price": s3, "strength": calculate_strength(s3)}
            }
            
            save_log(f"ƒê√£ t√≠nh to√°n m·ª©c S/R: {levels}", DEBUG_LOG_FILE)
            return levels

        except Exception as e:
            save_log(f"L·ªói t√≠nh S/R: {str(e)}", DEBUG_LOG_FILE)
            return {}
    
    def improve_pivot_detection(self, price: float, time: str) -> tuple[bool, str]:
        """C·∫£i thi·ªán logic x√°c ƒë·ªãnh pivot """
        try:
            # L·∫•y m·ª©c S/R
            support_resistance = self.get_pivot_support_resistance()
            if not support_resistance:
                return False, ""

            # Ki·ªÉm tra xem gi√° c√≥ g·∫ßn m·ª©c S/R n√†o kh√¥ng
            MIN_DISTANCE = 0.001  # 0.1% cho ph√©p dao ƒë·ªông
            
            for level_name, level_data in support_resistance.items():
                level_price = level_data["price"]
                level_strength = level_data["strength"]
                
                price_diff = abs(price - level_price) / level_price
                
                if price_diff <= MIN_DISTANCE:
                    # Gi√° ch·∫°m m·ª©c S/R
                    if level_strength >= 70:  # M·ª©c S/R m·∫°nh
                        if "R" in level_name:  # M·ª©c kh√°ng c·ª±
                            save_log(f"Ph√°t hi·ªán pivot t·∫°i m·ª©c kh√°ng c·ª± {level_name}: ${price:,.2f}", DEBUG_LOG_FILE)
                            return True, "High"
                        elif "S" in level_name:  # M·ª©c h·ªó tr·ª£
                            save_log(f"Ph√°t hi·ªán pivot t·∫°i m·ª©c h·ªó tr·ª£ {level_name}: ${price:,.2f}", DEBUG_LOG_FILE)
                            return True, "Low"
            
            return False, ""

        except Exception as e:
            save_log(f"L·ªói c·∫£i thi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            return False, ""
    
    def analyze_market_trend(self, short_period: int = 10, medium_period: int = 20, long_period: int = 50) -> dict:
        """
        Ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng s·ª≠ d·ª•ng nhi·ªÅu ch·ªâ b√°o
        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        try:
            if not hasattr(self, 'price_history') or len(self.price_history) < long_period:
                save_log(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch (c·∫ßn {long_period})", DEBUG_LOG_FILE)
                return {}

            prices = [x['price'] for x in self.price_history]
            
            # T√≠nh MA c√°c chu k·ª≥
            def calculate_ma(period):
                if len(prices) < period:
                    return None
                return sum(prices[-period:]) / period
            
            short_ma = calculate_ma(short_period)
            medium_ma = calculate_ma(medium_period)
            long_ma = calculate_ma(long_period)
            
            # T√≠nh RSI
            def calculate_rsi(period=14):
                if len(prices) < period + 1:
                    return None
                    
                deltas = [prices[i+1] - prices[i] for i in range(len(prices)-1)]
                gains = [d if d > 0 else 0 for d in deltas]
                losses = [-d if d < 0 else 0 for d in deltas]
                
                avg_gain = sum(gains[-period:]) / period
                avg_loss = sum(losses[-period:]) / period
                
                if avg_loss == 0:
                    return 100
                
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))
                return rsi
                
            rsi = calculate_rsi()
            
            # X√°c ƒë·ªãnh xu h∆∞·ªõng
            trend = "Unknown"
            strength = 0
            
            if short_ma and medium_ma and long_ma:
                if short_ma > medium_ma > long_ma:
                    trend = "Uptrend"
                    strength = min(((short_ma/long_ma - 1) * 100), 100)
                elif short_ma < medium_ma < long_ma:
                    trend = "Downtrend"
                    strength = min(((1 - short_ma/long_ma) * 100), 100)
                else:
                    trend = "Sideways"
                    strength = 0
                    
            # T√≠nh volatility
            if len(prices) >= 20:
                recent_prices = prices[-20:]
                avg_price = sum(recent_prices) / len(recent_prices)
                volatility = sum([abs(p - avg_price) / avg_price for p in recent_prices]) / len(recent_prices) * 100
            else:
                volatility = None

            result = {
                "trend": trend,
                "strength": strength,
                "short_ma": short_ma,
                "medium_ma": medium_ma,
                "long_ma": long_ma,
                "rsi": rsi,
                "volatility": volatility
            }
            
            save_log(f"K·∫øt qu·∫£ ph√¢n t√≠ch xu h∆∞·ªõng: {result}", DEBUG_LOG_FILE)
            return result

        except Exception as e:
            save_log(f"L·ªói ph√¢n t√≠ch xu h∆∞·ªõng: {str(e)}", DEBUG_LOG_FILE)
            return {}
   
    def add_user_pivot(self, pivot_type, price, time):
        """Th√™m pivot t·ª´ user"""
        try:
            pivot = {
                "type": pivot_type,
                "price": price,
                "time": time
            }
            self.user_pivots.append(pivot)
            save_log(f"ƒê√£ th√™m user pivot: {pivot_type} t·∫°i ${price}", DEBUG_LOG_FILE)
            return True
        except Exception as e:
            save_log(f"L·ªói khi th√™m user pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
           
    def detect_pivot(self, price, direction):
        """
        Ph√°t hi·ªán pivot v·ªõi logic m·ªõi
        """
        try:
            # 1. Ki·ªÉm tra ƒë·ªß d·ªØ li·ªáu
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"‚è≥ ƒêang thu th·∫≠p d·ªØ li·ªáu: {len(self.price_history)}/{self.LEFT_BARS + self.RIGHT_BARS + 1} n·∫øn", DEBUG_LOG_FILE)
                return None

            # 2. Log th√¥ng tin ph√¢n t√≠ch
            current_idx = len(self.price_history) - self.RIGHT_BARS - 1
            save_log(f"\n=== Ph√¢n t√≠ch Pivot ({direction.upper()}) ===", DEBUG_LOG_FILE)
            save_log(f"Gi√° hi·ªán t·∫°i: ${price:,.2f}", DEBUG_LOG_FILE)
            save_log(f"Th·ªùi gian: {self.current_time}", DEBUG_LOG_FILE)

            # 3. Log th√¥ng tin so s√°nh
            left_prices = [
                candle[direction] if isinstance(candle, dict) else candle['high'] if direction == 'high' else candle['low']
                for candle in self.price_history[current_idx - self.LEFT_BARS:current_idx]
            ]
            right_prices = [
                candle[direction] if isinstance(candle, dict) else candle['high'] if direction == 'high' else candle['low']
                for candle in self.price_history[current_idx + 1:current_idx + self.RIGHT_BARS + 1]
            ]

            save_log(f"So s√°nh v·ªõi {self.LEFT_BARS} n·∫øn tr∆∞·ªõc:", DEBUG_LOG_FILE)
            for i, p in enumerate(left_prices):
                save_log(f"  N·∫øn T-{self.LEFT_BARS-i}: ${p:,.2f}", DEBUG_LOG_FILE)

            save_log(f"So s√°nh v·ªõi {self.RIGHT_BARS} n·∫øn sau:", DEBUG_LOG_FILE)
            for i, p in enumerate(right_prices):
                save_log(f"  N·∫øn T+{i+1}: ${p:,.2f}", DEBUG_LOG_FILE)

            # 4. Ki·ªÉm tra ƒëi·ªÅu ki·ªán pivot
            if direction == "high":
                is_higher_than_left = all(price > p for p in left_prices)
                is_higher_than_right = all(price > p for p in right_prices)
                
                if is_higher_than_left and is_higher_than_right:
                    pivot_type = self._determine_high_pivot_type(price)
                    if pivot_type:
                        save_log(f"‚úÖ X√°c nh·∫≠n {pivot_type}:", DEBUG_LOG_FILE)
                        save_log(f"  - Cao h∆°n t·∫•t c·∫£ {self.LEFT_BARS} n·∫øn tr∆∞·ªõc", DEBUG_LOG_FILE)
                        save_log(f"  - Cao h∆°n t·∫•t c·∫£ {self.RIGHT_BARS} n·∫øn sau", DEBUG_LOG_FILE)
                        save_log(f"  - Gi√°: ${price:,.2f}", DEBUG_LOG_FILE)
                        return self._add_confirmed_pivot(pivot_type, price)
                        
            else:  # direction == "low"
                is_lower_than_left = all(price < p for p in left_prices)
                is_lower_than_right = all(price < p for p in right_prices)
                
                if is_lower_than_left and is_lower_than_right:
                    pivot_type = self._determine_low_pivot_type(price)
                    if pivot_type:
                        save_log(f"‚úÖ X√°c nh·∫≠n {pivot_type}:", DEBUG_LOG_FILE)
                        save_log(f"  - Th·∫•p h∆°n t·∫•t c·∫£ {self.LEFT_BARS} n·∫øn tr∆∞·ªõc", DEBUG_LOG_FILE)
                        save_log(f"  - Th·∫•p h∆°n t·∫•t c·∫£ {self.RIGHT_BARS} n·∫øn sau", DEBUG_LOG_FILE)
                        save_log(f"  - Gi√°: ${price:,.2f}", DEBUG_LOG_FILE)
                        return self._add_confirmed_pivot(pivot_type, price)

            save_log("‚ùå Kh√¥ng ph√°t hi·ªán pivot m·ªõi", DEBUG_LOG_FILE)
            return None

        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√°t hi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            return None        
    
    def _can_add_pivot(self, price):
        """Ki·ªÉm tra c√≥ th·ªÉ th√™m pivot kh√¥ng"""
        try:
            all_pivots = self.get_all_pivots()
            if not all_pivots:
                return True
                
            last_pivot = all_pivots[-1]
            time_diff = self._calculate_time_diff(last_pivot["time"])
            
            if time_diff < self.MIN_PIVOT_DISTANCE:
                return False
                
            return True
            
        except Exception as e:
            save_log(f"L·ªói khi ki·ªÉm tra can_add_pivot: {str(e)}", DEBUG_LOG_FILE)
            return False       

    def _determine_high_pivot_type(self, price):
        """X√°c ƒë·ªãnh lo·∫°i pivot cao (HH ho·∫∑c LH)"""
        try:
            # L·∫•y c√°c pivot ƒë√£ x√°c nh·∫≠n g·∫ßn nh·∫•t
            recent_pivots = self.get_recent_pivots(4)
            if len(recent_pivots) < 2:
                return "HH"  # Pivot cao ƒë·∫ßu ti√™n m·∫∑c ƒë·ªãnh l√† HH

            last_high = None
            # T√¨m ƒë·ªânh cao g·∫ßn nh·∫•t
            for pivot in reversed(recent_pivots):
                if pivot['type'] in ['HH', 'LH']:
                    last_high = pivot
                    break

            if last_high:
                # So s√°nh v·ªõi ƒë·ªânh cao tr∆∞·ªõc ƒë√≥
                if price > last_high['price']:
                    return "HH"
                else:
                    return "LH"
            else:
                return "HH"

        except Exception as e:
            save_log(f"L·ªói x√°c ƒë·ªãnh high pivot type: {str(e)}", DEBUG_LOG_FILE)
            return None

    def _determine_low_pivot_type(self, price):
        """X√°c ƒë·ªãnh lo·∫°i pivot th·∫•p (LL ho·∫∑c HL)"""
        try:
            # L·∫•y c√°c pivot ƒë√£ x√°c nh·∫≠n g·∫ßn nh·∫•t
            recent_pivots = self.get_recent_pivots(4)
            if len(recent_pivots) < 2:
                return "LL"  # Pivot th·∫•p ƒë·∫ßu ti√™n m·∫∑c ƒë·ªãnh l√† LL

            last_low = None
            # T√¨m ƒë√°y th·∫•p g·∫ßn nh·∫•t
            for pivot in reversed(recent_pivots):
                if pivot['type'] in ['LL', 'HL']:
                    last_low = pivot
                    break

            if last_low:
                # So s√°nh v·ªõi ƒë√°y th·∫•p tr∆∞·ªõc ƒë√≥
                if price < last_low['price']:
                    return "LL"
                else:
                    return "HL"
            else:
                return "LL"

        except Exception as e:
            save_log(f"L·ªói x√°c ƒë·ªãnh low pivot type: {str(e)}", DEBUG_LOG_FILE)
            return None

    def _add_confirmed_pivot(self, pivot_type, price):
        """Th√™m pivot ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v·ªõi logging chi ti·∫øt"""
        try:
            # Ki·ªÉm tra kho·∫£ng c√°ch gi√° v·ªõi pivot tr∆∞·ªõc
            last_pivot = self.get_recent_pivots(1)
            if last_pivot:
                last_pivot = last_pivot[0]
                price_change = abs(price - last_pivot['price']) / last_pivot['price']
                save_log("\nKi·ªÉm tra ƒëi·ªÅu ki·ªán gi√°:", DEBUG_LOG_FILE)
                save_log(f"  - Gi√° pivot tr∆∞·ªõc: ${last_pivot['price']:,.2f} ({last_pivot['type']})", DEBUG_LOG_FILE)
                save_log(f"  - Bi·∫øn ƒë·ªông: {price_change:.2%}", DEBUG_LOG_FILE)
                
                if price_change < self.MIN_PRICE_CHANGE:
                    save_log(f"‚ùå Bi·∫øn ƒë·ªông gi√° qu√° nh·ªè (< {self.MIN_PRICE_CHANGE:.2%})", DEBUG_LOG_FILE)
                    return False

            # T·∫°o pivot m·ªõi
            new_pivot = {
                "type": pivot_type,
                "price": price,
                "time": self.current_time
            }
            
            self.confirmed_pivots.append(new_pivot)
            self.stats['total_confirmed'] += 1
            
            # Log th√¥ng tin chi ti·∫øt
            save_log("\n=== Th√™m Pivot M·ªõi ===", DEBUG_LOG_FILE)
            save_log(f"‚úÖ Lo·∫°i: {pivot_type}", DEBUG_LOG_FILE)
            save_log(f"‚úÖ Gi√°: ${price:,.2f}", DEBUG_LOG_FILE)
            save_log(f"‚úÖ Th·ªùi gian: {self.current_time}", DEBUG_LOG_FILE)
            if last_pivot:
                save_log(f"‚úÖ Bi·∫øn ƒë·ªông t·ª´ pivot tr∆∞·ªõc: {price_change:+.2%}", DEBUG_LOG_FILE)
            save_log(f"‚úÖ T·ªïng s·ªë pivot ƒë√£ x√°c nh·∫≠n: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
            
            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m confirmed pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def _calculate_time_diff(self, pivot_time):
        """T√≠nh kho·∫£ng c√°ch th·ªùi gian v·ªõi pivot"""
        try:
            if not self.price_history:
                return 0
                
            current_time = datetime.strptime(self.price_history[-1]["time"], "%H:%M")
            pivot_time = datetime.strptime(pivot_time, "%H:%M")
            
            time_diff = (current_time - pivot_time).total_seconds() / 1800  # Convert to 30m candles
            return abs(time_diff)
            
        except Exception as e:
            save_log(f"L·ªói khi t√≠nh time diff: {str(e)}", DEBUG_LOG_FILE)
            return 0
    
    def get_all_pivots(self):
        """L·∫•y t·∫•t c·∫£ c√°c pivot theo th·ª© t·ª± th·ªùi gian"""
        try:
            # K·∫øt h·ª£p confirmed_pivots v√† user_pivots
            all_pivots = self.confirmed_pivots + self.user_pivots
            
            # S·∫Øp x·∫øp theo th·ªùi gian
            all_pivots.sort(key=lambda x: datetime.strptime(x["time"], "%H:%M"))
            
            return all_pivots
            
        except Exception as e:
            save_log(f"L·ªói khi l·∫•y all pivots: {str(e)}", DEBUG_LOG_FILE)
            return []

    def get_recent_pivots(self, count: int = 5) -> list:
        """L·∫•y s·ªë l∆∞·ª£ng pivot g·∫ßn nh·∫•t"""
        all_pivots = self.get_all_pivots()
        return all_pivots[-count:] if all_pivots else []

    def check_pattern(self) -> tuple[bool, str]:
        """Ki·ªÉm tra m·∫´u h√¨nh v√† tr·∫£ v·ªÅ (c√≥_m·∫´u_h√¨nh, t√™n_m·∫´u_h√¨nh)"""
        patterns = {
            "bullish_reversal": [
                ["HH", "HL", "HH", "HL", "HH"],
                ["LH", "HL", "HH", "HL", "HH"],
                ["HH", "HH", "HH"],
                ["HH", "HL", "HH", "HH"]
            ],
            "bearish_reversal": [
                ["LL", "LL", "LH", "LL"],
                ["LL", "LH", "LL", "LH", "LL"],
                ["LL", "LL", "LL"],
                ["LL", "LH", "LL", "LH", "LL"],
                ["LL", "LH", "LL"]
            ]
        }

        last_pivots = [p["type"] for p in self.get_all_pivots()]
        for pattern_name, sequences in patterns.items():
            for sequence in sequences:
                if len(last_pivots) >= len(sequence):
                    if last_pivots[-len(sequence):] == sequence:
                        save_log(f"Pattern found: {pattern_name} ({','.join(sequence)})", PATTERN_LOG_FILE)
                        return True, pattern_name
        return False, ""
        
    def _calculate_trend(self, prices: list) -> int:
        """T√≠nh to√°n xu h∆∞·ªõng d·ª±a tr√™n gi√°"""
        if len(prices) < 2:
            return 0
            
        changes = [prices[i] - prices[i-1] for i in range(1, len(prices))]
        up_moves = sum(1 for x in changes if x > 0)
        down_moves = sum(1 for x in changes if x < 0)
        
        if up_moves > down_moves:
            return 1
        elif down_moves > up_moves:
            return -1
        return 0    
        
    def remove_pivot(self, pivot_to_remove):
        """X√≥a m·ªôt pivot c·ª• th·ªÉ"""
        try:
            if pivot_to_remove["source"] == "system":
                self.confirmed_pivots = [p for p in self.confirmed_pivots if p != pivot_to_remove]
            else:
                self.user_pivots = [p for p in self.user_pivots if p != pivot_to_remove]
            save_log(f"ƒê√£ x√≥a pivot: {pivot_to_remove}", DEBUG_LOG_FILE)
        except Exception as e:
            save_log(f"L·ªói khi x√≥a pivot: {str(e)}", DEBUG_LOG_FILE)  
              
    def save_to_excel(self):
        try:
            all_pivots = self.get_all_pivots()
            if not all_pivots:
                save_log("Kh√¥ng c√≥ d·ªØ li·ªáu pivot ƒë·ªÉ l∆∞u", DEBUG_LOG_FILE)
                return
            
            # T·∫°o DataFrame ch√≠nh
            main_data = []
            for pivot in all_pivots:
                main_data.append({
                    'Time': pivot['time'],
                    'Type': pivot['type'],
                    'Price': pivot['price'],
                    'Source': pivot.get('source', 'system')
                })
            df_main = pd.DataFrame(main_data)
            
            # T·∫°o DataFrame cho confirmed pivots
            confirmed_data = [{
                'Time': p['time'],
                'Type': p['type'],
                'Price': p['price']
            } for p in self.confirmed_pivots]
            df_confirmed = pd.DataFrame(confirmed_data)

            # S·ª≠ d·ª•ng ExcelWriter v·ªõi xlsxwriter
            with pd.ExcelWriter('pivots.xlsx', engine='xlsxwriter') as writer:
                # Sheet ch√≠nh
                df_main.to_excel(writer, sheet_name='TestData', index=False, startrow=2)
                workbook = writer.book
                worksheet = writer.sheets['TestData']
                
                # Th√™m confirmed text ·ªü ƒë·∫ßu
                confirmed_text = " / ".join([
                    f"{p['type']} {p['time']} ${p['price']:,.2f}" 
                    for p in self.confirmed_pivots
                ])
                worksheet.write(0, 0, "Confirmed Pivots:")
                worksheet.write(0, 1, confirmed_text)
                
                # ƒê·ªãnh d·∫°ng c√°c c·ªôt
                price_format = workbook.add_format({'num_format': '$#,##0.00'})
                header_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#D9D9D9'
                })
                type_format = {
                    'HH': workbook.add_format({'font_color': 'green', 'bold': True}),
                    'LL': workbook.add_format({'font_color': 'red', 'bold': True}),
                    'HL': workbook.add_format({'font_color': 'orange'}),
                    'LH': workbook.add_format({'font_color': 'blue'})
                }
                
                # √Åp d·ª•ng ƒë·ªãnh d·∫°ng cho header
                for col, width in {'A:A': 10, 'B:B': 8, 'C:C': 15, 'D:D': 10}.items():
                    worksheet.set_column(col, width)
                
                # Format c√°c c·ªôt
                worksheet.write(2, 0, 'Time', header_format)
                worksheet.write(2, 1, 'Type', header_format)
                worksheet.write(2, 2, 'Price', header_format)
                worksheet.write(2, 3, 'Source', header_format)
                
                # √Åp d·ª•ng ƒë·ªãnh d·∫°ng cho d·ªØ li·ªáu
                for idx, row in df_main.iterrows():
                    row_pos = idx + 3
                    worksheet.write(row_pos, 0, row['Time'])
                    worksheet.write(row_pos, 1, row['Type'], type_format.get(row['Type']))
                    worksheet.write(row_pos, 2, row['Price'], price_format)
                    worksheet.write(row_pos, 3, row['Source'])
                    
                    # Th√™m % thay ƒë·ªïi v√† xu h∆∞·ªõng
                    if idx > 0:
                        prev_price = df_main.iloc[idx-1]['Price']
                        change = ((row['Price'] - prev_price) / prev_price) * 100
                        
                        # Format cho cell % thay ƒë·ªïi
                        change_format = workbook.add_format({
                            'num_format': '+0.00%;-0.00%',
                            'font_color': 'green' if change > 0 else 'red'
                        })
                        worksheet.write(row_pos, 4, change/100, change_format)
                        
                        # X√°c ƒë·ªãnh v√† format xu h∆∞·ªõng
                        if change > 0:
                            trend = "‚Üó TƒÉng"
                            trend_format = workbook.add_format({'bg_color': '#C6EFCE', 'font_color': '#006100'})
                        else:
                            trend = "‚Üò Gi·∫£m"
                            trend_format = workbook.add_format({'bg_color': '#FFC7CE', 'font_color': '#9C0006'})
                        worksheet.write(row_pos, 5, trend, trend_format)
                
                # T·∫°o bi·ªÉu ƒë·ªì
                chart = workbook.add_chart({'type': 'line'})
                chart.add_series({
                    'name': 'Price',
                    'categories': f"='TestData'!$A$4:$A${len(df_main) + 3}",
                    'values': f"='TestData'!$C$4:$C${len(df_main) + 3}",
                    'marker': {'type': 'circle'},
                    'data_labels': {'value': True, 'num_format': '$#,##0.00'}
                })
                
                # ƒê·ªãnh d·∫°ng bi·ªÉu ƒë·ªì
                chart.set_title({'name': 'Pivot Points Analysis'})
                chart.set_x_axis({
                    'name': 'Time',
                    'num_format': 'hh:mm'
                })
                chart.set_y_axis({'name': 'Price (USD)'})
                chart.set_size({'width': 720, 'height': 400})
                
                # Th√™m bi·ªÉu ƒë·ªì v√†o sheet
                worksheet.insert_chart('H2', chart)
                
                # Th√™m th·ªëng k√™
                stats_row = len(df_main) + 5
                worksheet.write(stats_row, 0, "Th·ªëng k√™:", header_format)
                worksheet.write(stats_row + 1, 0, "T·ªïng s·ªë pivot:")
                worksheet.write(stats_row + 1, 1, len(all_pivots))
                worksheet.write(stats_row + 2, 0, "Pivot ƒë√£ x√°c nh·∫≠n:")
                worksheet.write(stats_row + 2, 1, len(self.confirmed_pivots))
                worksheet.write(stats_row + 3, 0, "Pivot t·ª´ user:")
                worksheet.write(stats_row + 3, 1, len([p for p in all_pivots if p.get('source') == 'user']))

            save_log(f"ƒê√£ l∆∞u d·ªØ li·ªáu pivot v√†o Excel v·ªõi {len(all_pivots)} ƒëi·ªÉm", DEBUG_LOG_FILE)
            
        except Exception as e:
            error_msg = f"L·ªói khi l∆∞u file Excel: {str(e)}"
            save_log(error_msg, DEBUG_LOG_FILE)
            logger.error(error_msg)
        
# Create global instance
pivot_data = PivotData() 

# Export functions

# Cu·ªëi file s1.py th√™m d√≤ng n√†y
__all__ = ['pivot_data', 'detect_pivot', 'save_log', 'set_current_time_and_user']
    

def detect_pivot(price, direction):
    return pivot_data.detect_pivot(price, direction)
    
def get_binance_price(context: CallbackContext):
    try:
        # Thay ƒë·ªïi interval t·ª´ "5m" sang "30m"
        klines = binance_client.futures_klines(symbol="BTCUSDT", interval="30m", limit=2)
        last_candle = klines[-2]  # Ensure we get the closed candle
        high_price = float(last_candle[2])
        low_price = float(last_candle[3])
        close_price = float(last_candle[4])
        
        price_data = {
            "high": high_price,
            "low": low_price,
            "price": close_price
        }
        pivot_data.add_price_data(price_data)
        
        save_log(f"Thu th·∫≠p d·ªØ li·ªáu n·∫øn 30m: Cao nh·∫•t = {high_price}, Th·∫•p nh·∫•t = {low_price}", DEBUG_LOG_FILE)
        
        detect_pivot(high_price, "H")
        detect_pivot(low_price, "L")
        pivot_data.save_to_excel()
    except Exception as e:
        logger.error(f"Binance API Error: {e}")
        save_log(f"Binance API Error: {e}", DEBUG_LOG_FILE)
        
def schedule_next_run(job_queue):
    try:
        # l√™n l·ªãch ch·∫°y khi ch·∫µn 30p
        now = datetime.now()
        next_run = now.replace(second=0, microsecond=0) + timedelta(minutes=(30 - now.minute % 30))
        delay = (next_run - now).total_seconds()
        
        save_log(f"L√™n l·ªãch ch·∫°y v√†o {next_run.strftime('%Y-%m-%d %H:%M:%S')}", DEBUG_LOG_FILE)
        # Thay ƒë·ªïi interval t·ª´ 300 (5 ph√∫t) sang 1800 (30 ph√∫t)
        job_queue.run_repeating(get_binance_price, interval=1800, first=delay)
    except Exception as e:
        logger.error(f"Error scheduling next run: {e}")
        save_log(f"Error scheduling next run: {e}", DEBUG_LOG_FILE)
     

def _create_alert_message(pattern_name, current_price, recent_pivots):
    """T·∫°o th√¥ng b√°o chi ti·∫øt khi ph√°t hi·ªán m·∫´u h√¨nh"""
    vietnam_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # X√°c ƒë·ªãnh lo·∫°i m·∫´u h√¨nh v√† bi·ªÉu t∆∞·ª£ng
    if "bullish" in pattern_name.lower():
        pattern_symbol = "üü¢"
        direction = "tƒÉng"
    else:
        pattern_symbol = "üî¥"
        direction = "gi·∫£m"
        
    message = (
        f"{pattern_symbol} C·∫¢NH B√ÅO M·∫™U H√åNH {direction.upper()} - {vietnam_time}\n\n"
        f"Gi√° hi·ªán t·∫°i: ${current_price:,.2f}\n"
        f"M·∫´u h√¨nh: {pattern_name}\n\n"
        f"5 pivot g·∫ßn nh·∫•t:\n"
    )
    
    # Th√™m th√¥ng tin v·ªÅ 5 pivot g·∫ßn nh·∫•t
    for i, pivot in enumerate(recent_pivots[::-1], 1):
        message += f"{i}. {pivot['type']}: ${pivot['price']:,.2f} ({pivot['time']})\n"
        
    return message

def send_alert(message):
    """G·ª≠i c·∫£nh b√°o qua Telegram v·ªõi th√¥ng tin chi ti·∫øt"""
    try:
        bot = Bot(token=TOKEN)
        bot.send_message(
            chat_id=CHAT_ID,
            text=message,
            parse_mode='HTML'
        )
        save_log("ƒê√£ g·ª≠i c·∫£nh b√°o m·∫´u h√¨nh", DEBUG_LOG_FILE)
    except Exception as e:
        save_log(f"L·ªói g·ª≠i c·∫£nh b√°o: {str(e)}", DEBUG_LOG_FILE)

def moc(update: Update, context: CallbackContext):
    """ Handles the /moc command to receive multiple pivot points and resets logic."""
    try:
        args = context.args
        
        logger.info(f"Received /moc command with args: {args}")
        save_log(f"Received /moc command with args: {args}", DEBUG_LOG_FILE)
        
        if len(args) < 4 or (len(args) - 1) % 3 != 0:
            update.message.reply_text("‚ö†Ô∏è Sai ƒë·ªãnh d·∫°ng! D√πng: /moc btc lh 82000 13:30 hl 81000 14:00 hh 83000 14:30")
            return
        
        asset = args[0].lower()
        if asset != "btc":
            update.message.reply_text("‚ö†Ô∏è Ch·ªâ h·ªó tr·ª£ BTC! V√≠ d·ª•: /moc btc lh 82000 13:30 hl 81000 14:00 hh 83000 14:30")
            return
            
        # X√≥a d·ªØ li·ªáu c≈©
        pivot_data.clear_all()
        
        # Ghi nh·∫≠n c√°c m·ªëc m·ªõi
        valid_pivots = []
        adjusted_times = []
        current_time = datetime.now()  # L·∫•y th·ªùi gian hi·ªán t·∫°i
        
        # Ki·ªÉm tra th·ª© t·ª± th·ªùi gian
        time_points = []
        for i in range(1, len(args), 3):
            try:
                time = args[i + 2].replace('h', ':')
                time_obj = datetime.strptime(time, "%H:%M")
                time_points.append(time_obj)
            except ValueError:
                continue

        if time_points:
            if time_points != sorted(time_points):
                update.message.reply_text("‚ö†Ô∏è C√°c m·ªëc th·ªùi gian ph·∫£i ƒë∆∞·ª£c nh·∫≠p theo th·ª© t·ª± tƒÉng d·∫ßn!")
                return
        
        for i in range(1, len(args), 3):
            pivot_type = args[i].upper()
            if pivot_type not in ["HH", "HL", "LH", "LL"]:
                update.message.reply_text(f"‚ö†Ô∏è Lo·∫°i pivot kh√¥ng h·ª£p l·ªá: {pivot_type}. Ch·ªâ ch·∫•p nh·∫≠n: HH, HL, LH, LL")
                return

            # Validate gi√°
            try:
                price = float(args[i + 1])
                if price <= 0:
                    update.message.reply_text(f"‚ö†Ô∏è Gi√° ph·∫£i l·ªõn h∆°n 0: {args[i + 1]}")
                    return
                if price > 500000:  # Gi·ªõi h·∫°n gi√° t·ªëi ƒëa h·ª£p l√Ω cho BTC
                    update.message.reply_text(f"‚ö†Ô∏è Gi√° v∆∞·ª£t qu√° gi·ªõi h·∫°n cho ph√©p: {args[i + 1]}")
                    return
            except ValueError:
                update.message.reply_text(f"‚ö†Ô∏è Gi√° kh√¥ng h·ª£p l·ªá: {args[i + 1]}")
                return

            # Validate v√† x·ª≠ l√Ω th·ªùi gian
            time = args[i + 2].replace('h', ':')
            try:
                time_obj = datetime.strptime(time, "%H:%M")
                
                # L√†m tr√≤n v·ªÅ m·ªëc 30 ph√∫t g·∫ßn nh·∫•t
                minutes = time_obj.minute
                if minutes % 30 != 0:
                    adjusted_minutes = 30 * (minutes // 30)
                    original_time = time
                    time = time_obj.replace(minute=adjusted_minutes).strftime("%H:%M")
                    adjusted_times.append((original_time, time))
                    save_log(f"ƒê√£ ƒëi·ªÅu ch·ªânh th·ªùi gian t·ª´ {original_time} th√†nh {time} cho ph√π h·ª£p v·ªõi timeframe 30m", DEBUG_LOG_FILE)
            except ValueError:
                update.message.reply_text(f"‚ö†Ô∏è L·ªói: ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng ƒë√∫ng! S·ª≠ d·ª•ng HH:MM (v√≠ d·ª•: 14:00, 14:30)")
                return

            # Th√™m pivot m·ªõi
            if pivot_data.add_user_pivot(pivot_type, price, time):
                valid_pivots.append({"type": pivot_type, "price": price, "time": time})
            else:
                update.message.reply_text(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m pivot: {pivot_type} at {time}")
                return
        
        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa chu·ªói pivot
        if len(valid_pivots) >= 2:
            for i in range(1, len(valid_pivots)):
                curr_pivot = valid_pivots[i]
                prev_pivot = valid_pivots[i-1]
                
                save_log(f"Ki·ªÉm tra logic: {curr_pivot['type']} (${curr_pivot['price']}) vs {prev_pivot['type']} (${prev_pivot['price']})", DEBUG_LOG_FILE)
                
                # Logic ki·ªÉm tra m·ªõi
                if curr_pivot['type'] == "LH":
                    if prev_pivot['type'] == "LL":
                        # LH ph·∫£i cao h∆°n LL tr∆∞·ªõc ƒë√≥
                        if curr_pivot['price'] <= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: LH t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° cao h∆°n LL tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                    elif prev_pivot['type'] == "HH":
                        # LH ph·∫£i th·∫•p h∆°n HH tr∆∞·ªõc ƒë√≥ 
                        if curr_pivot['price'] >= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: LH t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° th·∫•p h∆°n HH tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                        
                elif curr_pivot['type'] == "HL":
                    if prev_pivot['type'] in ["LH", "HH"]:
                        # HL ph·∫£i th·∫•p h∆°n ƒë·ªânh tr∆∞·ªõc ƒë√≥ (LH ho·∫∑c HH)
                        if curr_pivot['price'] >= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: HL t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° th·∫•p h∆°n {prev_pivot['type']} tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                    elif prev_pivot['type'] == "LL":
                        # HL ph·∫£i cao h∆°n LL tr∆∞·ªõc ƒë√≥
                        if curr_pivot['price'] <= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: HL t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° cao h∆°n LL tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                        
                elif curr_pivot['type'] == "HH":
                    # HH lu√¥n ph·∫£i cao h∆°n pivot tr∆∞·ªõc ƒë√≥
                    if curr_pivot['price'] <= prev_pivot['price']:
                        error_msg = f"‚ö†Ô∏è L·ªói logic: HH t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° cao h∆°n pivot tr∆∞·ªõc ƒë√≥!"
                        save_log(error_msg, DEBUG_LOG_FILE)
                        update.message.reply_text(error_msg)
                        return
                        
                elif curr_pivot['type'] == "LL":
                    # LL lu√¥n ph·∫£i th·∫•p h∆°n pivot tr∆∞·ªõc ƒë√≥
                    if curr_pivot['price'] >= prev_pivot['price']:
                        error_msg = f"‚ö†Ô∏è L·ªói logic: LL t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° th·∫•p h∆°n pivot tr∆∞·ªõc ƒë√≥!"
                        save_log(error_msg, DEBUG_LOG_FILE)
                        update.message.reply_text(error_msg)
                        return
                        
                save_log(f"Pivot {curr_pivot['type']} h·ª£p l·ªá", DEBUG_LOG_FILE)
        
        # Ghi ƒë√® d·ªØ li·ªáu v√†o pattern log
        with open(PATTERN_LOG_FILE, "w", encoding="utf-8") as f:
            f.write("=== Pattern Log Reset ===\n")

        save_log(f"User Pivots Updated: {pivot_data.user_pivots}", LOG_FILE)
        save_log(f"User Pivots Updated: {pivot_data.user_pivots}", PATTERN_LOG_FILE)
        save_to_excel()

        # T·∫°o ph·∫£n h·ªìi chi ti·∫øt cho ng∆∞·ªùi d√πng
        response = "‚úÖ ƒê√£ nh·∫≠n c√°c m·ªëc:\n"
        for pivot in valid_pivots:
            response += f"‚Ä¢ {pivot['type']} t·∫°i ${pivot['price']:,.2f} ({pivot['time']})\n"
        
        # Th√™m th√¥ng b√°o v·ªÅ c√°c ƒëi·ªÅu ch·ªânh th·ªùi gian (n·∫øu c√≥)
        if adjusted_times:
            response += "\n‚ÑπÔ∏è ƒê√£ ƒëi·ªÅu ch·ªânh c√°c m·ªëc th·ªùi gian sau cho ph√π h·ª£p v·ªõi timeframe 30m:\n"
            for original, adjusted in adjusted_times:
                response += f"‚Ä¢ {original} ‚Üí {adjusted}\n"
            
        update.message.reply_text(response)
        logger.info(f"User Pivots Updated: {pivot_data.user_provided_pivots}")
        
    except Exception as e:
        error_msg = f"L·ªói x·ª≠ l√Ω l·ªánh /moc: {str(e)}"
        logger.error(error_msg)
        save_log(error_msg, DEBUG_LOG_FILE)
        update.message.reply_text(f"‚ö†Ô∏è C√≥ l·ªói x·∫£y ra: {str(e)}")

def main():
    """ Main entry point to start the bot."""
    try:
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        job_queue = updater.job_queue
    
        dp.add_handler(CommandHandler("moc", moc))
        
        schedule_next_run(job_queue)  # Schedule the first execution at the next 5-minute mark
        
        print("Bot is running...")
        logger.info("Bot started successfully.")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"Error in main: {e}")
        save_log(f"Error in main: {e}", DEBUG_LOG_FILE)

if __name__ == "__main__":
    main()
