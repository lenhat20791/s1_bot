import logging
import json
import pandas as pd
import os
import time
import pytz
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue
from binance.client import Client
from openpyxl import Workbook
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis
from openpyxl.chart.marker import Marker
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter

# Configurations
TOKEN = "7637023247:AAG_utVTC0rXyfute9xsBdh-IrTUE3432o8"
BINANCE_API_KEY = "aVim4czsoOzuLxk0CsEsV0JwE58OX90GRD8OvDfT8xH2nfSEC0mMnMCVrwgFcSEi"
BINANCE_API_SECRET = "rIQ2LLUtYWBcXt5FiMIHuXeeDJqeREbvw8r9NlTJ83gveSAvpSMqd1NBoQjAodC4"
CHAT_ID = 7662080576
LOG_FILE = "bot_log.json"
PATTERN_LOG_FILE = "pattern_log.txt"
DEBUG_LOG_FILE = "debug_historical_test.log"
EXCEL_FILE = "pivots.xlsx"
    
# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ensure log files exist
for file in [LOG_FILE, PATTERN_LOG_FILE, DEBUG_LOG_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            f.write("=== Log Initialized ===\n")

# Initialize Binance Client
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

def save_log(log_message, filename):
    """Ghi log v·ªõi timestamp v√† format nh·∫•t qu√°n"""
    try:
        # Th√™m timestamp n·∫øu d√≤ng log kh√¥ng ph·∫£i l√† d√≤ng tr·ªëng
        if log_message.strip():
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            formatted_message = f"[{timestamp}] {log_message}"
        else:
            formatted_message = log_message

        with open(filename, "a", encoding="utf-8") as f:
            f.write(formatted_message + "\n")
    except Exception as e:
        print(f"Error saving log: {str(e)}")
        
# Th√™m h√†m ƒë·ªÉ set c√°c gi√° tr·ªã n√†y
def set_current_time_and_user(current_time, current_user):
    """Set th·ªùi gian v√† user hi·ªán t·∫°i v·ªõi support m√∫i gi·ªù Vi·ªát Nam"""
    try:
        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù Vi·ªát Nam n·∫øu input l√† UTC
        if isinstance(current_time, str):
            try:
                # Parse th·ªùi gian UTC
                utc_dt = datetime.strptime(current_time, '%Y-%m-%d %H:%M:%S')
                utc_dt = utc_dt.replace(tzinfo=pytz.UTC)
                # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
                vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                vn_time = utc_dt.astimezone(vn_tz)
                # Format l·∫°i th√†nh string
                pivot_data.current_time = vn_time.strftime('%H:%M')  # Ch·ªâ l·∫•y gi·ªù:ph√∫t cho pivot
            except ValueError as e:
                save_log(f"Error parsing time: {str(e)}", DEBUG_LOG_FILE)
                return False

        pivot_data.current_user = current_user
        
        # Log chi ti·∫øt h∆°n
        save_log("\n=== C·∫≠p nh·∫≠t th√¥ng tin phi√™n ===", DEBUG_LOG_FILE)
        save_log(f"UTC time: {current_time}", DEBUG_LOG_FILE)
        if 'vn_time' in locals():
            save_log(f"Vietnam time: {vn_time.strftime('%Y-%m-%d %H:%M:%S (GMT+7)')}", DEBUG_LOG_FILE)
        save_log(f"Pivot time format: {pivot_data.current_time}", DEBUG_LOG_FILE)
        save_log(f"User: {current_user}", DEBUG_LOG_FILE)
        save_log("="*30, DEBUG_LOG_FILE)
        return True

    except Exception as e:
        save_log(f"Error setting time and user: {str(e)}", DEBUG_LOG_FILE)
        return False
                
class PivotData:
    def __init__(self):
        """Kh·ªüi t·∫°o v·ªõi logic TradingView"""
        # C√°c th√¥ng s·ªë c∆° b·∫£n
        self.LEFT_BARS = 5        # S·ªë n·∫øn so s√°nh b√™n tr√°i
        self.RIGHT_BARS = 5       # S·ªë n·∫øn so s√°nh b√™n ph·∫£i
        
        # L∆∞u tr·ªØ d·ªØ li·ªáu
        self.price_history = []   # L·ªãch s·ª≠ gi√°
        self.pivot_points = []    # L∆∞u tr·ªØ c√°c pivot point (high/low)
        self.confirmed_pivots = [] # L∆∞u tr·ªØ c√°c pivot ƒë√£ x√°c nh·∫≠n (HH,LL,HL,LH)
        
        # Th·ªùi gian v√† user hi·ªán t·∫°i
        self.current_time = None
        self.current_user = None
        
        save_log("üîÑ ƒê√£ kh·ªüi t·∫°o PivotData object v·ªõi logic TradingView", DEBUG_LOG_FILE)
            
    def set_current_time(self, time):
        """C·∫≠p nh·∫≠t current_time"""
        self.current_time = time
        save_log(f"‚è∞ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian: {time}", DEBUG_LOG_FILE)
    
    def clear_all(self):
        """Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.price_history.clear()
        self.pivot_points.clear()
        self.confirmed_pivots.clear()
        
        save_log("\n=== Reset To√†n B·ªô D·ªØ Li·ªáu ===", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a price history", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a pivot points", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a confirmed pivots", DEBUG_LOG_FILE)
        save_log("==============================", DEBUG_LOG_FILE)   

    def add_price_data(self, data):
        """Th√™m d·ªØ li·ªáu gi√° m·ªõi v·ªõi logic ƒë∆°n gi·∫£n h√≥a"""
        try:
            # C·∫≠p nh·∫≠t th·ªùi gian v√† log
            self.current_time = data["time"]
            save_log(f"\n‚è∞ Th·ªùi ƒëi·ªÉm: {self.current_time}", DEBUG_LOG_FILE)
            save_log(f"üìä High: ${data['high']:,.2f}, Low: ${data['low']:,.2f}", DEBUG_LOG_FILE)

            # Th√™m v√†o l·ªãch s·ª≠ gi√°
            self.price_history.append(data)
            
            # Gi·ªØ s·ªë l∆∞·ª£ng n·∫øn c·ªë ƒë·ªãnh
            max_bars = self.LEFT_BARS + self.RIGHT_BARS + 1
            if len(self.price_history) > max_bars:
                self.price_history = self.price_history[-max_bars:]
            
            # Ph√°t hi·ªán pivot
            high_pivot = self.detect_pivot(data["high"], "high")
            low_pivot = self.detect_pivot(data["low"], "low")

            if high_pivot or low_pivot:
                self.save_to_excel()  # C·∫≠p nh·∫≠t Excel khi c√≥ pivot m·ªõi

            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m price data: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def get_pivot_support_resistance(self, lookback: int = 20) -> dict:
        """
        T√≠nh to√°n c√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª± d·ª±a tr√™n pivot points
        Returns:
            Dict ch·ª©a c√°c m·ª©c S/R v√† ƒë·ªô m·∫°nh c·ªßa ch√∫ng
        """
        try:
            if not hasattr(self, 'price_history') or len(self.price_history) < lookback:
                save_log(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh S/R (c·∫ßn {lookback})", DEBUG_LOG_FILE)
                return {}

            # L·∫•y d·ªØ li·ªáu trong kho·∫£ng lookback
            recent_data = self.price_history[-lookback:]
            
            # T√≠nh PP (Pivot Point)
            highs = [x['high'] for x in recent_data]
            lows = [x['low'] for x in recent_data]
            closes = [x['price'] for x in recent_data]
            
            pp = (max(highs) + min(lows) + closes[-1]) / 3
            
            # T√≠nh c√°c m·ª©c S/R
            r3 = pp + (max(highs) - min(lows))
            r2 = pp + (max(highs) - min(lows)) * 0.618  # Fibonacci ratio
            r1 = 2 * pp - min(lows)
            
            s1 = 2 * pp - max(highs)
            s2 = pp - (max(highs) - min(lows)) * 0.618
            s3 = pp - (max(highs) - min(lows))
            
            # T√≠nh ƒë·ªô m·∫°nh c·ªßa m·ªói m·ª©c
            def calculate_strength(level):
                touches = sum(1 for price in closes if abs(price - level) / level < 0.001)
                return min(touches / lookback * 100, 100)  # ƒê·ªô m·∫°nh t·ªëi ƒëa 100%
            
            levels = {
                "R3": {"price": r3, "strength": calculate_strength(r3)},
                "R2": {"price": r2, "strength": calculate_strength(r2)},
                "R1": {"price": r1, "strength": calculate_strength(r1)},
                "PP": {"price": pp, "strength": calculate_strength(pp)},
                "S1": {"price": s1, "strength": calculate_strength(s1)},
                "S2": {"price": s2, "strength": calculate_strength(s2)},
                "S3": {"price": s3, "strength": calculate_strength(s3)}
            }
            
            save_log(f"ƒê√£ t√≠nh to√°n m·ª©c S/R: {levels}", DEBUG_LOG_FILE)
            return levels

        except Exception as e:
            save_log(f"L·ªói t√≠nh S/R: {str(e)}", DEBUG_LOG_FILE)
            return {}
    
    def improve_pivot_detection(self, price: float, time: str) -> tuple[bool, str]:
        """C·∫£i thi·ªán logic x√°c ƒë·ªãnh pivot """
        try:
            # L·∫•y m·ª©c S/R
            support_resistance = self.get_pivot_support_resistance()
            if not support_resistance:
                return False, ""

            # Ki·ªÉm tra xem gi√° c√≥ g·∫ßn m·ª©c S/R n√†o kh√¥ng
            MIN_DISTANCE = 0.001  # 0.1% cho ph√©p dao ƒë·ªông
            
            for level_name, level_data in support_resistance.items():
                level_price = level_data["price"]
                level_strength = level_data["strength"]
                
                price_diff = abs(price - level_price) / level_price
                
                if price_diff <= MIN_DISTANCE:
                    # Gi√° ch·∫°m m·ª©c S/R
                    if level_strength >= 70:  # M·ª©c S/R m·∫°nh
                        if "R" in level_name:  # M·ª©c kh√°ng c·ª±
                            save_log(f"Ph√°t hi·ªán pivot t·∫°i m·ª©c kh√°ng c·ª± {level_name}: ${price:,.2f}", DEBUG_LOG_FILE)
                            return True, "High"
                        elif "S" in level_name:  # M·ª©c h·ªó tr·ª£
                            save_log(f"Ph√°t hi·ªán pivot t·∫°i m·ª©c h·ªó tr·ª£ {level_name}: ${price:,.2f}", DEBUG_LOG_FILE)
                            return True, "Low"
            
            return False, ""

        except Exception as e:
            save_log(f"L·ªói c·∫£i thi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            return False, ""
    
    def analyze_market_trend(self, short_period: int = 10, medium_period: int = 20, long_period: int = 50) -> dict:
        """
        Ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng s·ª≠ d·ª•ng nhi·ªÅu ch·ªâ b√°o
        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        try:
            if not hasattr(self, 'price_history') or len(self.price_history) < long_period:
                save_log(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch (c·∫ßn {long_period})", DEBUG_LOG_FILE)
                return {}

            prices = [x['price'] for x in self.price_history]
            
            # T√≠nh MA c√°c chu k·ª≥
            def calculate_ma(period):
                if len(prices) < period:
                    return None
                return sum(prices[-period:]) / period
            
            short_ma = calculate_ma(short_period)
            medium_ma = calculate_ma(medium_period)
            long_ma = calculate_ma(long_period)
            
            # T√≠nh RSI
            def calculate_rsi(period=14):
                if len(prices) < period + 1:
                    return None
                    
                deltas = [prices[i+1] - prices[i] for i in range(len(prices)-1)]
                gains = [d if d > 0 else 0 for d in deltas]
                losses = [-d if d < 0 else 0 for d in deltas]
                
                avg_gain = sum(gains[-period:]) / period
                avg_loss = sum(losses[-period:]) / period
                
                if avg_loss == 0:
                    return 100
                
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))
                return rsi
                
            rsi = calculate_rsi()
            
            # X√°c ƒë·ªãnh xu h∆∞·ªõng
            trend = "Unknown"
            strength = 0
            
            if short_ma and medium_ma and long_ma:
                if short_ma > medium_ma > long_ma:
                    trend = "Uptrend"
                    strength = min(((short_ma/long_ma - 1) * 100), 100)
                elif short_ma < medium_ma < long_ma:
                    trend = "Downtrend"
                    strength = min(((1 - short_ma/long_ma) * 100), 100)
                else:
                    trend = "Sideways"
                    strength = 0
                    
            # T√≠nh volatility
            if len(prices) >= 20:
                recent_prices = prices[-20:]
                avg_price = sum(recent_prices) / len(recent_prices)
                volatility = sum([abs(p - avg_price) / avg_price for p in recent_prices]) / len(recent_prices) * 100
            else:
                volatility = None

            result = {
                "trend": trend,
                "strength": strength,
                "short_ma": short_ma,
                "medium_ma": medium_ma,
                "long_ma": long_ma,
                "rsi": rsi,
                "volatility": volatility
            }
            
            save_log(f"K·∫øt qu·∫£ ph√¢n t√≠ch xu h∆∞·ªõng: {result}", DEBUG_LOG_FILE)
            return result

        except Exception as e:
            save_log(f"L·ªói ph√¢n t√≠ch xu h∆∞·ªõng: {str(e)}", DEBUG_LOG_FILE)
            return {}
   
    def add_user_pivot(self, pivot_type, price, time):
        """Th√™m pivot t·ª´ user v·ªõi ki·ªÉm tra logic ch·∫∑t ch·∫Ω h∆°n"""
        try:
            # Ki·ªÉm tra lo·∫°i pivot h·ª£p l·ªá
            if pivot_type not in ["HH", "HL", "LH", "LL"]:
                save_log(f"‚ùå Lo·∫°i pivot kh√¥ng h·ª£p l·ªá: {pivot_type}", DEBUG_LOG_FILE)
                return False

            # T·∫°o pivot m·ªõi
            new_pivot = {
                "type": pivot_type,
                "price": float(price),
                "time": time,
                "source": "user"
            }

            # Ki·ªÉm tra logic v·ªõi c√°c pivot hi·ªán c√≥
            recent_pivots = self.get_recent_pivots(4)
            if recent_pivots:
                last_pivot = recent_pivots[0]
                
                # Log th√¥ng tin so s√°nh
                save_log("\n=== Ki·ªÉm Tra Logic User Pivot ===", DEBUG_LOG_FILE)
                save_log(f"Pivot m·ªõi: {pivot_type} t·∫°i ${price:,.2f} ({time})", DEBUG_LOG_FILE)
                save_log(f"Pivot tr∆∞·ªõc: {last_pivot['type']} t·∫°i ${last_pivot['price']:,.2f} ({last_pivot['time']})", DEBUG_LOG_FILE)

                # Ki·ªÉm tra logic theo lo·∫°i pivot
                if pivot_type == "HH" and price <= last_pivot['price']:
                    save_log("‚ùå HH ph·∫£i c√≥ gi√° cao h∆°n pivot tr∆∞·ªõc", DEBUG_LOG_FILE)
                    return False
                elif pivot_type == "LL" and price >= last_pivot['price']:
                    save_log("‚ùå LL ph·∫£i c√≥ gi√° th·∫•p h∆°n pivot tr∆∞·ªõc", DEBUG_LOG_FILE)
                    return False
                elif pivot_type == "LH" and last_pivot['type'] == "HH" and price >= last_pivot['price']:
                    save_log("‚ùå LH ph·∫£i c√≥ gi√° th·∫•p h∆°n HH tr∆∞·ªõc", DEBUG_LOG_FILE)
                    return False
                elif pivot_type == "HL" and last_pivot['type'] == "LL" and price <= last_pivot['price']:
                    save_log("‚ùå HL ph·∫£i c√≥ gi√° cao h∆°n LL tr∆∞·ªõc", DEBUG_LOG_FILE)
                    return False

            # Th√™m pivot m·ªõi
            self.user_pivots.append(new_pivot)
            save_log(f"‚úÖ ƒê√£ th√™m user pivot: {pivot_type} t·∫°i ${price:,.2f} ({time})", DEBUG_LOG_FILE)
            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m user pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
           
    def detect_pivot(self, price, direction):
        """Ph√°t hi·ªán pivot v·ªõi logic TradingView ƒë∆°n gi·∫£n h√≥a"""
        try:
            # 1. Ki·ªÉm tra ƒë·ªß d·ªØ li·ªáu
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"‚è≥ ƒêang thu th·∫≠p d·ªØ li·ªáu: {len(self.price_history)}/{self.LEFT_BARS + self.RIGHT_BARS + 1} n·∫øn", DEBUG_LOG_FILE)
                return None

            # 2. L·∫•y center candle v√† c√°c n·∫øn xung quanh
            center_idx = self.LEFT_BARS
            center_candle = self.price_history[center_idx]
            left_bars = self.price_history[:center_idx]
            right_bars = self.price_history[center_idx + 1:]

            pivot_found = False
            pivot_type = None
            pivot_price = None

            # 3. Logic TV ƒë∆°n gi·∫£n: So s√°nh v·ªõi c√°c n·∫øn xung quanh
            if direction.lower() == "high":
                # Ki·ªÉm tra pivot high
                if all(center_candle['high'] > bar['high'] for bar in left_bars) and \
                   all(center_candle['high'] > bar['high'] for bar in right_bars):
                    pivot_found = True
                    pivot_price = center_candle['high']
                    # X√°c ƒë·ªãnh lo·∫°i pivot high (HH ho·∫∑c LH)
                    pivot_type = self._determine_pivot_type(pivot_price, "high")
                    
            elif direction.lower() == "low":
                # Ki·ªÉm tra pivot low
                if all(center_candle['low'] < bar['low'] for bar in left_bars) and \
                   all(center_candle['low'] < bar['low'] for bar in right_bars):
                    pivot_found = True
                    pivot_price = center_candle['low']
                    # X√°c ƒë·ªãnh lo·∫°i pivot low (LL ho·∫∑c HL)
                    pivot_type = self._determine_pivot_type(pivot_price, "low")

            # 4. N·∫øu t√¨m th·∫•y pivot, th√™m v√†o danh s√°ch
            if pivot_found and pivot_type:
                save_log(f"‚úÖ Ph√°t hi·ªán {pivot_type} t·∫°i ${pivot_price:,.2f}", DEBUG_LOG_FILE)
                return self._add_confirmed_pivot(pivot_type, pivot_price)

            return None

        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√°t hi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            return None       
    
    def _can_add_pivot(self, price):
        """Ki·ªÉm tra c√≥ th·ªÉ th√™m pivot kh√¥ng"""
        try:
            all_pivots = self.get_all_pivots()
            if not all_pivots:
                return True
                
            last_pivot = all_pivots[-1]
            time_diff = self._calculate_time_diff(last_pivot["time"])
            
            if time_diff < self.MIN_PIVOT_DISTANCE:
                return False
                
            return True
            
        except Exception as e:
            save_log(f"L·ªói khi ki·ªÉm tra can_add_pivot: {str(e)}", DEBUG_LOG_FILE)
            return False       
 
    def _add_confirmed_pivot(self, pivot_type, price, current_time=None):
        """Th√™m pivot ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v·ªõi logging chi ti·∫øt"""
        try:
            # N·∫øu kh√¥ng c√≥ current_time, d√πng self.current_time
            pivot_time = current_time if current_time else self.current_time
            
            save_log("\n=== Th√™m Confirmed Pivot ===", DEBUG_LOG_FILE)
            save_log(f"Type: {pivot_type}", DEBUG_LOG_FILE)
            save_log(f"Price: ${price:,.2f}", DEBUG_LOG_FILE)
            save_log(f"Time: {pivot_time}", DEBUG_LOG_FILE)
            
            # T·∫°o pivot m·ªõi v·ªõi key 'type' r√µ r√†ng
            new_pivot = {
                "type": pivot_type,  # ƒê·∫£m b·∫£o c√≥ key 'type'
                "price": float(price),
                "time": pivot_time
            }
            
            # Log th√¥ng tin pivot m·ªõi
            save_log(f"New pivot data: {new_pivot}", DEBUG_LOG_FILE)

            # Ki·ªÉm tra tr√πng l·∫∑p
            if new_pivot not in self.confirmed_pivots:
                self.confirmed_pivots.append(new_pivot)
                save_log(f"‚úÖ ƒê√£ th√™m pivot: {pivot_type} t·∫°i ${price:,.2f} ({pivot_time})", DEBUG_LOG_FILE)
                save_log(f"üìä T·ªïng s·ªë confirmed pivots: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
                return True

            save_log("‚ö†Ô∏è Pivot n√†y ƒë√£ t·ªìn t·∫°i", DEBUG_LOG_FILE)
            return False

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m confirmed pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(f"Stack trace: {traceback.format_exc()}", DEBUG_LOG_FILE)
            return False
    

    def get_recent_pivots(self, count=4):
        """L·∫•y c√°c pivot g·∫ßn nh·∫•t"""
        try:
            # Ch·ªâ l·∫•y t·ª´ confirmed_pivots v√¨ kh√¥ng c√≤n user_pivots
            save_log("\n=== L·∫•y 4 pivot g·∫ßn nh·∫•t ===", DEBUG_LOG_FILE)
            save_log(f"T·ªïng s·ªë pivot: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
            
            recent = self.confirmed_pivots[-count:] if self.confirmed_pivots else []
            if recent:
                save_log("C√°c pivot ƒë∆∞·ª£c ch·ªçn:", DEBUG_LOG_FILE)
                for i, p in enumerate(recent, 1):
                    save_log(f"{i}. {p['type']} t·∫°i ${p['price']:,.2f} ({p['time']})", DEBUG_LOG_FILE)
            else:
                save_log("Kh√¥ng c√≥ pivot n√†o", DEBUG_LOG_FILE)
            
            return recent

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l·∫•y recent pivots: {str(e)}", DEBUG_LOG_FILE)
            return []

    def check_pattern(self):
        """T·∫°m th·ªùi v√¥ hi·ªáu h√≥a vi·ªác ki·ªÉm tra pattern"""
        save_log("\n‚ö†Ô∏è Ch·ª©c nƒÉng check pattern ƒëang t·∫°m th·ªùi b·ªã v√¥ hi·ªáu h√≥a", DEBUG_LOG_FILE)
        return False, ""
    
    def classify_pivot(self, new_pivot):
        """Ph√¢n lo·∫°i pivot theo logic TradingView"""
        try:
            if len(self.pivot_points) < 5:
                return None  # C·∫ßn √≠t nh·∫•t 5 pivot ƒë·ªÉ ph√¢n lo·∫°i

            # L·∫•y 5 pivot g·∫ßn nh·∫•t (bao g·ªìm pivot m·ªõi)
            recent_points = self.pivot_points[-5:]
            if len(recent_points) < 5:
                return None

            # G√°n c√°c gi√° tr·ªã theo c√°ch ƒë·∫∑t t√™n trong TradingView
            a = new_pivot['price']  # Pivot hi·ªán t·∫°i
            b = recent_points[-2]['price']  # Pivot tr∆∞·ªõc ƒë√≥
            c = recent_points[-3]['price']  # Pivot tr∆∞·ªõc b
            d = recent_points[-4]['price']  # Pivot tr∆∞·ªõc c
            e = recent_points[-5]['price']  # Pivot tr∆∞·ªõc d

            # Ph√¢n lo·∫°i pivot theo logic TradingView
            pivot_type = None
            if new_pivot['direction'] == 'high':
                # Ki·ªÉm tra Higher High
                if a > b and a > c and c > b and c > d:
                    pivot_type = 'HH'
                # Ki·ªÉm tra Lower High
                elif ((a <= c and (b < c and b < d and d < c and d < e)) or 
                      (a > b and a < c and b > d)):
                    pivot_type = 'LH'
            else:  # direction == 'low'
                # Ki·ªÉm tra Lower Low
                if a < b and a < c and c < b and c < d:
                    pivot_type = 'LL'
                # Ki·ªÉm tra Higher Low
                elif ((a >= c and (b > c and b > d and d > c and d > e)) or 
                      (a < b and a > c and b < d)):
                    pivot_type = 'HL'

            # N·∫øu x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i, th√™m v√†o confirmed_pivots
            if pivot_type:
                confirmed_pivot = {
                    'type': pivot_type,
                    'price': new_pivot['price'],
                    'time': new_pivot['time']
                }
                if confirmed_pivot not in self.confirmed_pivots:
                    self.confirmed_pivots.append(confirmed_pivot)
                    save_log(f"\n‚úÖ X√°c nh·∫≠n {pivot_type} t·∫°i ${new_pivot['price']:,.2f} ({new_pivot['time']})", DEBUG_LOG_FILE)
                    return confirmed_pivot

            return None

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi ph√¢n lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            return None
    
              
    def save_to_excel(self):
        try:
            if not self.confirmed_pivots:
                save_log("Kh√¥ng c√≥ d·ªØ li·ªáu pivot ƒë·ªÉ l∆∞u", DEBUG_LOG_FILE)
                return

            # T·∫°o DataFrame ch√≠nh
            main_data = []
            for pivot in self.confirmed_pivots:
                # T√≠nh % thay ƒë·ªïi so v·ªõi pivot tr∆∞·ªõc
                prev_pivot = next((p for p in self.confirmed_pivots 
                                 if p['time'] < pivot['time']), None)
                price_change = ((pivot['price'] - prev_pivot['price'])/prev_pivot['price'] * 100) if prev_pivot else 0
                
                main_data.append({
                    'Time': pivot['time'],
                    'Type': pivot['type'],
                    'Price': pivot['price'],
                    'Change%': price_change
                })
            
            df_main = pd.DataFrame(main_data)

            # S·ª≠ d·ª•ng ExcelWriter v·ªõi xlsxwriter
            with pd.ExcelWriter('pivots.xlsx', engine='xlsxwriter') as writer:
                # Sheet ch√≠nh
                df_main.to_excel(writer, sheet_name='TestData', index=False, startrow=2)
                workbook = writer.book
                worksheet = writer.sheets['TestData']
                
                # Th√™m confirmed text ·ªü ƒë·∫ßu
                confirmed_text = " / ".join([
                    f"{p['type']} {p['time']} ${p['price']:,.2f}" 
                    for p in self.confirmed_pivots
                ])
                worksheet.write(0, 0, "Confirmed Pivots:")
                worksheet.write(0, 1, confirmed_text)
                
                # ƒê·ªãnh d·∫°ng c√°c c·ªôt
                price_format = workbook.add_format({'num_format': '$#,##0.00'})
                header_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#D9D9D9'
                })
                type_format = {
                    'HH': workbook.add_format({'font_color': 'green', 'bold': True}),
                    'LL': workbook.add_format({'font_color': 'red', 'bold': True}),
                    'HL': workbook.add_format({'font_color': 'orange'}),
                    'LH': workbook.add_format({'font_color': 'blue'})
                }
                
                # √Åp d·ª•ng ƒë·ªãnh d·∫°ng cho header v√† c·ªôt
                for col, width in {'A:A': 10, 'B:B': 8, 'C:C': 15, 'D:D': 10}.items():
                    worksheet.set_column(col, width)
                
                # Format headers
                worksheet.write(2, 0, 'Time', header_format)
                worksheet.write(2, 1, 'Type', header_format)
                worksheet.write(2, 2, 'Price', header_format)
                worksheet.write(2, 3, 'Change%', header_format)
                
                # Format data
                for idx, row in df_main.iterrows():
                    row_pos = idx + 3
                    worksheet.write(row_pos, 0, row['Time'])
                    worksheet.write(row_pos, 1, row['Type'], type_format.get(row['Type']))
                    worksheet.write(row_pos, 2, row['Price'], price_format)
                    
                    # Format % thay ƒë·ªïi
                    if idx > 0:
                        change_format = workbook.add_format({
                            'num_format': '+0.00%;-0.00%',
                            'font_color': 'green' if row['Change%'] > 0 else 'red'
                        })
                        worksheet.write(row_pos, 3, row['Change%']/100, change_format)

                # T·∫°o bi·ªÉu ƒë·ªì
                chart = workbook.add_chart({'type': 'line'})
                
                # Th√™m series cho gi√°
                chart.add_series({
                    'name': 'Price',
                    'categories': f"='TestData'!$A$4:$A${len(df_main) + 3}",
                    'values': f"='TestData'!$C$4:$C${len(df_main) + 3}",
                    'marker': {'type': 'circle'},
                    'data_labels': {'value': True, 'num_format': '$#,##0.00'}
                })
                
                # ƒê·ªãnh d·∫°ng bi·ªÉu ƒë·ªì
                chart.set_title({'name': 'Pivot Points Analysis'})
                chart.set_x_axis({
                    'name': 'Time',
                    'num_format': 'hh:mm'
                })
                chart.set_y_axis({'name': 'Price (USD)'})
                chart.set_size({'width': 720, 'height': 400})
                
                # Th√™m bi·ªÉu ƒë·ªì v√†o sheet
                worksheet.insert_chart('H2', chart)
                
                # Th√™m th·ªëng k√™
                stats_row = len(df_main) + 5
                worksheet.write(stats_row, 0, "Th·ªëng k√™:", header_format)
                worksheet.write(stats_row + 1, 0, "T·ªïng s·ªë pivot:")
                worksheet.write(stats_row + 1, 1, len(self.confirmed_pivots))
                worksheet.write(stats_row + 2, 0, "T·ªïng s·ªë n·∫øn:")
                worksheet.write(stats_row + 2, 1, len(self.price_history))

            save_log(f"ƒê√£ l∆∞u d·ªØ li·ªáu pivot v√†o Excel v·ªõi {len(self.confirmed_pivots)} ƒëi·ªÉm", DEBUG_LOG_FILE)
            
        except Exception as e:
            error_msg = f"L·ªói khi l∆∞u file Excel: {str(e)}"
            save_log(error_msg, DEBUG_LOG_FILE)
            logger.error(error_msg)
    def _get_pattern_for_pivot(self, current_pivot, all_pivots):
        """X√°c ƒë·ªãnh pattern cho m·ªôt pivot c·ª• th·ªÉ"""
        try:
            # L·∫•y 4 pivot tr∆∞·ªõc current_pivot
            idx = all_pivots.index(current_pivot)
            if idx < 4:
                return "Ch∆∞a ƒë·ªß d·ªØ li·ªáu"
                
            prev_pivots = all_pivots[idx-4:idx]
            pivot_types = [p['type'] for p in prev_pivots] + [current_pivot['type']]
            
            # Ki·ªÉm tra c√°c pattern ƒë√£ ƒë·ªãnh nghƒ©a
            pattern_sequences = {
                "TƒÉng m·∫°nh": ["HH", "HH", "HH", "HH", "HH"],
                "Gi·∫£m m·∫°nh": ["LL", "LL", "LL", "LL", "LL"],
                "ƒê·∫£o chi·ªÅu tƒÉng": ["LL", "HL", "HH", "HL", "HH"],
                "ƒê·∫£o chi·ªÅu gi·∫£m": ["HH", "LH", "LL", "LH", "LL"]
            }
            
            for pattern_name, sequence in pattern_sequences.items():
                if pivot_types == sequence:
                    return pattern_name
                    
            return "Kh√¥ng x√°c ƒë·ªãnh"
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi x√°c ƒë·ªãnh pattern: {str(e)}", DEBUG_LOG_FILE)
            return "L·ªói x√°c ƒë·ªãnh" 

    def get_all_pivots(self):
        """L·∫•y t·∫•t c·∫£ c√°c pivot theo th·ª© t·ª± th·ªùi gian"""
        try:
            # Ch·ªâ l·∫•y t·ª´ confirmed_pivots v√¨ kh√¥ng c√≤n user_pivots
            if not self.confirmed_pivots:
                return []
                
            # S·∫Øp x·∫øp theo th·ªùi gian
            sorted_pivots = sorted(
                self.confirmed_pivots,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )
            
            save_log(f"\nT·ªïng s·ªë pivot: {len(sorted_pivots)}", DEBUG_LOG_FILE)
            return sorted_pivots
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi l·∫•y all pivots: {str(e)}", DEBUG_LOG_FILE)
            return []     
            
    def add_user_pivot(self, pivot_type, price, time):
        """Th√™m pivot t·ª´ user v·ªõi logic m·ªõi"""
        try:
            # Ki·ªÉm tra lo·∫°i pivot h·ª£p l·ªá
            if pivot_type not in ["HH", "HL", "LH", "LL"]:
                save_log(f"‚ùå Lo·∫°i pivot kh√¥ng h·ª£p l·ªá: {pivot_type}", DEBUG_LOG_FILE)
                return False

            # T·∫°o pivot m·ªõi
            new_pivot = {
                "type": pivot_type,
                "price": float(price),
                "time": time
            }

            # Ki·ªÉm tra logic v·ªõi pivot ƒë√£ c√≥
            recent_pivots = self.get_recent_pivots(4)
            if recent_pivots:
                last_pivot = recent_pivots[0]
                
                # Log th√¥ng tin so s√°nh
                save_log("\n=== Ki·ªÉm tra Logic User Pivot ===", DEBUG_LOG_FILE)
                save_log(f"Pivot m·ªõi: {pivot_type} t·∫°i ${price:,.2f} ({time})", DEBUG_LOG_FILE)
                save_log(f"Pivot tr∆∞·ªõc: {last_pivot['type']} t·∫°i ${last_pivot['price']:,.2f} ({last_pivot['time']})", DEBUG_LOG_FILE)

                # Ki·ªÉm tra logic
                if not self._validate_pivot_sequence(last_pivot, new_pivot):
                    return False

            # Th√™m pivot m·ªõi v√†o confirmed_pivots
            if new_pivot not in self.confirmed_pivots:
                self.confirmed_pivots.append(new_pivot)
                save_log(f"‚úÖ ƒê√£ th√™m pivot: {pivot_type} t·∫°i ${price:,.2f} ({time})", DEBUG_LOG_FILE)
                return True

            return False

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m user pivot: {str(e)}", DEBUG_LOG_FILE)
            return False

    def _validate_pivot_sequence(self, prev_pivot, new_pivot):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa chu·ªói pivot"""
        try:
            # HH ph·∫£i cao h∆°n pivot tr∆∞·ªõc
            if new_pivot['type'] == 'HH' and new_pivot['price'] <= prev_pivot['price']:
                save_log("‚ùå HH ph·∫£i c√≥ gi√° cao h∆°n pivot tr∆∞·ªõc", DEBUG_LOG_FILE)
                return False
                
            # LL ph·∫£i th·∫•p h∆°n pivot tr∆∞·ªõc
            if new_pivot['type'] == 'LL' and new_pivot['price'] >= prev_pivot['price']:
                save_log("‚ùå LL ph·∫£i c√≥ gi√° th·∫•p h∆°n pivot tr∆∞·ªõc", DEBUG_LOG_FILE)
                return False
                
            # LH ph·∫£i th·∫•p h∆°n HH tr∆∞·ªõc
            if new_pivot['type'] == 'LH' and prev_pivot['type'] == 'HH' and new_pivot['price'] >= prev_pivot['price']:
                save_log("‚ùå LH ph·∫£i c√≥ gi√° th·∫•p h∆°n HH tr∆∞·ªõc", DEBUG_LOG_FILE)
                return False
                
            # HL ph·∫£i cao h∆°n LL tr∆∞·ªõc
            if new_pivot['type'] == 'HL' and prev_pivot['type'] == 'LL' and new_pivot['price'] <= prev_pivot['price']:
                save_log("‚ùå HL ph·∫£i c√≥ gi√° cao h∆°n LL tr∆∞·ªõc", DEBUG_LOG_FILE)
                return False
                
            save_log("‚úÖ Pivot sequence h·ª£p l·ªá", DEBUG_LOG_FILE)
            return True
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi validate pivot sequence: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def _determine_pivot_type(self, current_price, direction):
        """X√°c ƒë·ªãnh lo·∫°i pivot d·ª±a tr√™n logic TV"""
        try:
            # L·∫•y pivot g·∫ßn nh·∫•t c√πng lo·∫°i (high/low)
            recent_pivots = self.get_recent_pivots(3)  # Ch·ªâ c·∫ßn 3 pivot g·∫ßn nh·∫•t
            if not recent_pivots:
                # Pivot ƒë·∫ßu ti√™n
                return "HH" if direction == "high" else "LL"

            last_pivot = None
            for pivot in recent_pivots:
                # T√¨m pivot c√πng lo·∫°i g·∫ßn nh·∫•t
                if (direction == "high" and pivot['type'] in ['HH', 'LH']) or \
                   (direction == "low" and pivot['type'] in ['LL', 'HL']):
                    last_pivot = pivot
                    break

            if not last_pivot:
                return "HH" if direction == "high" else "LL"

            # Logic ph√¢n lo·∫°i ƒë∆°n gi·∫£n theo TV
            if direction == "high":
                return "HH" if current_price > last_pivot['price'] else "LH"
            else:
                return "LL" if current_price < last_pivot['price'] else "HL"

        except Exception as e:
            save_log(f"‚ùå L·ªói khi x√°c ƒë·ªãnh lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            return None   
# Create global instance
pivot_data = PivotData() 

# Export functions

# Cu·ªëi file s1.py th√™m d√≤ng n√†y
__all__ = ['pivot_data', 'detect_pivot', 'save_log', 'set_current_time_and_user']
    

def detect_pivot(price, direction):
    return pivot_data.detect_pivot(price, direction)
    
def get_binance_price(context: CallbackContext):
    try:
        # Thay ƒë·ªïi interval t·ª´ "5m" sang "30m"
        klines = binance_client.futures_klines(symbol="BTCUSDT", interval="30m", limit=2)
        last_candle = klines[-2]  # Ensure we get the closed candle
        high_price = float(last_candle[2])
        low_price = float(last_candle[3])
        close_price = float(last_candle[4])
        
        price_data = {
            "high": high_price,
            "low": low_price,
            "price": close_price
        }
        pivot_data.add_price_data(price_data)
        
        save_log(f"Thu th·∫≠p d·ªØ li·ªáu n·∫øn 30m: Cao nh·∫•t = {high_price}, Th·∫•p nh·∫•t = {low_price}", DEBUG_LOG_FILE)
        
        detect_pivot(high_price, "H")
        detect_pivot(low_price, "L")
        pivot_data.save_to_excel()
    except Exception as e:
        logger.error(f"Binance API Error: {e}")
        save_log(f"Binance API Error: {e}", DEBUG_LOG_FILE)
        
def schedule_next_run(job_queue):
    try:
        # l√™n l·ªãch ch·∫°y khi ch·∫µn 30p
        now = datetime.now()
        next_run = now.replace(second=0, microsecond=0) + timedelta(minutes=(30 - now.minute % 30))
        delay = (next_run - now).total_seconds()
        
        save_log(f"L√™n l·ªãch ch·∫°y v√†o {next_run.strftime('%Y-%m-%d %H:%M:%S')}", DEBUG_LOG_FILE)
        # Thay ƒë·ªïi interval t·ª´ 300 (5 ph√∫t) sang 1800 (30 ph√∫t)
        job_queue.run_repeating(get_binance_price, interval=1800, first=delay)
    except Exception as e:
        logger.error(f"Error scheduling next run: {e}")
        save_log(f"Error scheduling next run: {e}", DEBUG_LOG_FILE)
     

def _create_alert_message(pattern_name, current_price, recent_pivots):
    """T·∫°o th√¥ng b√°o chi ti·∫øt khi ph√°t hi·ªán m·∫´u h√¨nh"""
    vietnam_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # X√°c ƒë·ªãnh lo·∫°i m·∫´u h√¨nh v√† bi·ªÉu t∆∞·ª£ng
    if "bullish" in pattern_name.lower():
        pattern_symbol = "üü¢"
        direction = "tƒÉng"
    else:
        pattern_symbol = "üî¥"
        direction = "gi·∫£m"
        
    message = (
        f"{pattern_symbol} C·∫¢NH B√ÅO M·∫™U H√åNH {direction.upper()} - {vietnam_time}\n\n"
        f"Gi√° hi·ªán t·∫°i: ${current_price:,.2f}\n"
        f"M·∫´u h√¨nh: {pattern_name}\n\n"
        f"5 pivot g·∫ßn nh·∫•t:\n"
    )
    
    # Th√™m th√¥ng tin v·ªÅ 5 pivot g·∫ßn nh·∫•t
    for i, pivot in enumerate(recent_pivots[::-1], 1):
        message += f"{i}. {pivot['type']}: ${pivot['price']:,.2f} ({pivot['time']})\n"
        
    return message

def send_alert(message):
    """G·ª≠i c·∫£nh b√°o qua Telegram v·ªõi th√¥ng tin chi ti·∫øt"""
    try:
        bot = Bot(token=TOKEN)
        bot.send_message(
            chat_id=CHAT_ID,
            text=message,
            parse_mode='HTML'
        )
        save_log("ƒê√£ g·ª≠i c·∫£nh b√°o m·∫´u h√¨nh", DEBUG_LOG_FILE)
    except Exception as e:
        save_log(f"L·ªói g·ª≠i c·∫£nh b√°o: {str(e)}", DEBUG_LOG_FILE)

def moc(update: Update, context: CallbackContext):
    """ Handles the /moc command to receive multiple pivot points and resets logic."""
    try:
        args = context.args
        
        logger.info(f"Received /moc command with args: {args}")
        save_log(f"Received /moc command with args: {args}", DEBUG_LOG_FILE)
        
        if len(args) < 4 or (len(args) - 1) % 3 != 0:
            update.message.reply_text("‚ö†Ô∏è Sai ƒë·ªãnh d·∫°ng! D√πng: /moc btc lh 82000 13:30 hl 81000 14:00 hh 83000 14:30")
            return
        
        asset = args[0].lower()
        if asset != "btc":
            update.message.reply_text("‚ö†Ô∏è Ch·ªâ h·ªó tr·ª£ BTC! V√≠ d·ª•: /moc btc lh 82000 13:30 hl 81000 14:00 hh 83000 14:30")
            return
            
        # X√≥a d·ªØ li·ªáu c≈©
        pivot_data.clear_all()
        
        # Ghi nh·∫≠n c√°c m·ªëc m·ªõi
        valid_pivots = []
        adjusted_times = []
        current_time = datetime.now()  # L·∫•y th·ªùi gian hi·ªán t·∫°i
        
        # Ki·ªÉm tra th·ª© t·ª± th·ªùi gian
        time_points = []
        for i in range(1, len(args), 3):
            try:
                time = args[i + 2].replace('h', ':')
                time_obj = datetime.strptime(time, "%H:%M")
                time_points.append(time_obj)
            except ValueError:
                continue

        if time_points:
            if time_points != sorted(time_points):
                update.message.reply_text("‚ö†Ô∏è C√°c m·ªëc th·ªùi gian ph·∫£i ƒë∆∞·ª£c nh·∫≠p theo th·ª© t·ª± tƒÉng d·∫ßn!")
                return
        
        for i in range(1, len(args), 3):
            pivot_type = args[i].upper()
            if pivot_type not in ["HH", "HL", "LH", "LL"]:
                update.message.reply_text(f"‚ö†Ô∏è Lo·∫°i pivot kh√¥ng h·ª£p l·ªá: {pivot_type}. Ch·ªâ ch·∫•p nh·∫≠n: HH, HL, LH, LL")
                return

            # Validate gi√°
            try:
                price = float(args[i + 1])
                if price <= 0:
                    update.message.reply_text(f"‚ö†Ô∏è Gi√° ph·∫£i l·ªõn h∆°n 0: {args[i + 1]}")
                    return
                if price > 500000:  # Gi·ªõi h·∫°n gi√° t·ªëi ƒëa h·ª£p l√Ω cho BTC
                    update.message.reply_text(f"‚ö†Ô∏è Gi√° v∆∞·ª£t qu√° gi·ªõi h·∫°n cho ph√©p: {args[i + 1]}")
                    return
            except ValueError:
                update.message.reply_text(f"‚ö†Ô∏è Gi√° kh√¥ng h·ª£p l·ªá: {args[i + 1]}")
                return

            # Validate v√† x·ª≠ l√Ω th·ªùi gian
            time = args[i + 2].replace('h', ':')
            try:
                time_obj = datetime.strptime(time, "%H:%M")
                
                # L√†m tr√≤n v·ªÅ m·ªëc 30 ph√∫t g·∫ßn nh·∫•t
                minutes = time_obj.minute
                if minutes % 30 != 0:
                    adjusted_minutes = 30 * (minutes // 30)
                    original_time = time
                    time = time_obj.replace(minute=adjusted_minutes).strftime("%H:%M")
                    adjusted_times.append((original_time, time))
                    save_log(f"ƒê√£ ƒëi·ªÅu ch·ªânh th·ªùi gian t·ª´ {original_time} th√†nh {time} cho ph√π h·ª£p v·ªõi timeframe 30m", DEBUG_LOG_FILE)
            except ValueError:
                update.message.reply_text(f"‚ö†Ô∏è L·ªói: ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng ƒë√∫ng! S·ª≠ d·ª•ng HH:MM (v√≠ d·ª•: 14:00, 14:30)")
                return

            # Th√™m pivot m·ªõi
            if pivot_data.add_user_pivot(pivot_type, price, time):
                valid_pivots.append({"type": pivot_type, "price": price, "time": time})
            else:
                update.message.reply_text(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m pivot: {pivot_type} at {time}")
                return
        
        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa chu·ªói pivot
        if len(valid_pivots) >= 2:
            for i in range(1, len(valid_pivots)):
                curr_pivot = valid_pivots[i]
                prev_pivot = valid_pivots[i-1]
                
                save_log(f"Ki·ªÉm tra logic: {curr_pivot['type']} (${curr_pivot['price']}) vs {prev_pivot['type']} (${prev_pivot['price']})", DEBUG_LOG_FILE)
                
                # Logic ki·ªÉm tra m·ªõi
                if curr_pivot['type'] == "LH":
                    if prev_pivot['type'] == "LL":
                        # LH ph·∫£i cao h∆°n LL tr∆∞·ªõc ƒë√≥
                        if curr_pivot['price'] <= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: LH t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° cao h∆°n LL tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                    elif prev_pivot['type'] == "HH":
                        # LH ph·∫£i th·∫•p h∆°n HH tr∆∞·ªõc ƒë√≥ 
                        if curr_pivot['price'] >= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: LH t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° th·∫•p h∆°n HH tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                        
                elif curr_pivot['type'] == "HL":
                    if prev_pivot['type'] in ["LH", "HH"]:
                        # HL ph·∫£i th·∫•p h∆°n ƒë·ªânh tr∆∞·ªõc ƒë√≥ (LH ho·∫∑c HH)
                        if curr_pivot['price'] >= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: HL t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° th·∫•p h∆°n {prev_pivot['type']} tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                    elif prev_pivot['type'] == "LL":
                        # HL ph·∫£i cao h∆°n LL tr∆∞·ªõc ƒë√≥
                        if curr_pivot['price'] <= prev_pivot['price']:
                            error_msg = f"‚ö†Ô∏è L·ªói logic: HL t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° cao h∆°n LL tr∆∞·ªõc ƒë√≥!"
                            save_log(error_msg, DEBUG_LOG_FILE)
                            update.message.reply_text(error_msg)
                            return
                        
                elif curr_pivot['type'] == "HH":
                    # HH lu√¥n ph·∫£i cao h∆°n pivot tr∆∞·ªõc ƒë√≥
                    if curr_pivot['price'] <= prev_pivot['price']:
                        error_msg = f"‚ö†Ô∏è L·ªói logic: HH t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° cao h∆°n pivot tr∆∞·ªõc ƒë√≥!"
                        save_log(error_msg, DEBUG_LOG_FILE)
                        update.message.reply_text(error_msg)
                        return
                        
                elif curr_pivot['type'] == "LL":
                    # LL lu√¥n ph·∫£i th·∫•p h∆°n pivot tr∆∞·ªõc ƒë√≥
                    if curr_pivot['price'] >= prev_pivot['price']:
                        error_msg = f"‚ö†Ô∏è L·ªói logic: LL t·∫°i {curr_pivot['time']} ph·∫£i c√≥ gi√° th·∫•p h∆°n pivot tr∆∞·ªõc ƒë√≥!"
                        save_log(error_msg, DEBUG_LOG_FILE)
                        update.message.reply_text(error_msg)
                        return
                        
                save_log(f"Pivot {curr_pivot['type']} h·ª£p l·ªá", DEBUG_LOG_FILE)
        
        # Ghi ƒë√® d·ªØ li·ªáu v√†o pattern log
        with open(PATTERN_LOG_FILE, "w", encoding="utf-8") as f:
            f.write("=== Pattern Log Reset ===\n")

        save_log(f"User Pivots Updated: {pivot_data.user_pivots}", LOG_FILE)
        save_log(f"User Pivots Updated: {pivot_data.user_pivots}", PATTERN_LOG_FILE)
        save_to_excel()

        # T·∫°o ph·∫£n h·ªìi chi ti·∫øt cho ng∆∞·ªùi d√πng
        response = "‚úÖ ƒê√£ nh·∫≠n c√°c m·ªëc:\n"
        for pivot in valid_pivots:
            response += f"‚Ä¢ {pivot['type']} t·∫°i ${pivot['price']:,.2f} ({pivot['time']})\n"
        
        # Th√™m th√¥ng b√°o v·ªÅ c√°c ƒëi·ªÅu ch·ªânh th·ªùi gian (n·∫øu c√≥)
        if adjusted_times:
            response += "\n‚ÑπÔ∏è ƒê√£ ƒëi·ªÅu ch·ªânh c√°c m·ªëc th·ªùi gian sau cho ph√π h·ª£p v·ªõi timeframe 30m:\n"
            for original, adjusted in adjusted_times:
                response += f"‚Ä¢ {original} ‚Üí {adjusted}\n"
            
        update.message.reply_text(response)
        logger.info(f"User Pivots Updated: {pivot_data.user_provided_pivots}")
        
    except Exception as e:
        error_msg = f"L·ªói x·ª≠ l√Ω l·ªánh /moc: {str(e)}"
        logger.error(error_msg)
        save_log(error_msg, DEBUG_LOG_FILE)
        update.message.reply_text(f"‚ö†Ô∏è C√≥ l·ªói x·∫£y ra: {str(e)}")

def main():
    """ Main entry point to start the bot."""
    try:
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        job_queue = updater.job_queue
    
        dp.add_handler(CommandHandler("moc", moc))
        
        schedule_next_run(job_queue)  # Schedule the first execution at the next 5-minute mark
        
        print("Bot is running...")
        logger.info("Bot started successfully.")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"Error in main: {e}")
        save_log(f"Error in main: {e}", DEBUG_LOG_FILE)

if __name__ == "__main__":
    main()
