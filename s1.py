import logging
import json
import pandas as pd
import os
import time
import pytz
import traceback
from datetime import datetime, timedelta
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue
from binance.client import Client
from openpyxl import Workbook
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis
from openpyxl.chart.marker import Marker
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter

# Configurations
TOKEN = "7637023247:AAG_utVTC0rXyfute9xsBdh-IrTUE3432o8"
BINANCE_API_KEY = "aVim4czsoOzuLxk0CsEsV0JwE58OX90GRD8OvDfT8xH2nfSEC0mMnMCVrwgFcSEi"
BINANCE_API_SECRET = "rIQ2LLUtYWBcXt5FiMIHuXeeDJqeREbvw8r9NlTJ83gveSAvpSMqd1NBoQjAodC4"
CHAT_ID = 7662080576
LOG_FILE = "bot_log.json"
PATTERN_LOG_FILE = "pattern_log.txt"
DEBUG_LOG_FILE = "debug_historical_test.log"
EXCEL_FILE = "pivots.xlsx"
    
# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ensure log files exist
for file in [LOG_FILE, PATTERN_LOG_FILE, DEBUG_LOG_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            f.write("=== Log Initialized ===\n")

# Initialize Binance Client
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

def save_log(log_message, filename):
    """Ghi log v·ªõi timestamp v√† format nh·∫•t qu√°n"""
    try:
        # Th√™m timestamp n·∫øu d√≤ng log kh√¥ng ph·∫£i l√† d√≤ng tr·ªëng
        if log_message.strip():
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            formatted_message = f"[{timestamp}] {log_message}"
        else:
            formatted_message = log_message

        with open(filename, "a", encoding="utf-8") as f:
            f.write(formatted_message + "\n")
    except Exception as e:
        print(f"Error saving log: {str(e)}")
        
# Th√™m h√†m ƒë·ªÉ set c√°c gi√° tr·ªã n√†y
def set_current_time_and_user(current_time, current_user):
    """Set th·ªùi gian v√† user hi·ªán t·∫°i v·ªõi support m√∫i gi·ªù Vi·ªát Nam"""
    try:
        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù Vi·ªát Nam n·∫øu input l√† UTC
        if isinstance(current_time, str):
            try:
                # Parse th·ªùi gian UTC
                utc_dt = datetime.strptime(current_time, '%Y-%m-%d %H:%M:%S')
                utc_dt = utc_dt.replace(tzinfo=pytz.UTC)
                # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
                vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                vn_time = utc_dt.astimezone(vn_tz)
                # Format l·∫°i th√†nh string
                pivot_data.current_time = vn_time.strftime('%H:%M')  # Ch·ªâ l·∫•y gi·ªù:ph√∫t cho pivot
            except ValueError as e:
                save_log(f"Error parsing time: {str(e)}", DEBUG_LOG_FILE)
                return False

        pivot_data.current_user = current_user
        
        # Log chi ti·∫øt h∆°n
        save_log("\n=== C·∫≠p nh·∫≠t th√¥ng tin phi√™n ===", DEBUG_LOG_FILE)
        save_log(f"UTC time: {current_time}", DEBUG_LOG_FILE)
        if 'vn_time' in locals():
            save_log(f"Vietnam time: {vn_time.strftime('%Y-%m-%d %H:%M:%S (GMT+7)')}", DEBUG_LOG_FILE)
        save_log(f"Pivot time format: {pivot_data.current_time}", DEBUG_LOG_FILE)
        save_log(f"User: {current_user}", DEBUG_LOG_FILE)
        save_log("="*30, DEBUG_LOG_FILE)
        return True

    except Exception as e:
        save_log(f"Error setting time and user: {str(e)}", DEBUG_LOG_FILE)
        return False
                
class PivotData:
    def __init__(self, user="lenhat20791"):
        """
        Kh·ªüi t·∫°o S1 bot
        Args:
            user: T√™n ng∆∞·ªùi d√πng
        """
        # C√°c h·∫±ng s·ªë
        self.LEFT_BARS = 5          # S·ªë n·∫øn so s√°nh b√™n tr√°i
        self.RIGHT_BARS = 5         # S·ªë n·∫øn so s√°nh b√™n ph·∫£i
        self.MIN_BARS_BETWEEN_PIVOTS = 3  # Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c pivot

        # Kh·ªüi t·∫°o c√°c bi·∫øn
        self.price_history = []     # L∆∞u to√†n b·ªô l·ªãch s·ª≠ gi√°
        self.pivot_history = []     # L∆∞u t·∫•t c·∫£ c√°c pivot points
        self.potential_pivots = []  # Danh s√°ch pivot ti·ªÅm nƒÉng ch·ªù x√°c nh·∫≠n
        self.confirmed_pivots = []  # L∆∞u c√°c pivot ƒë√£ x√°c nh·∫≠n
        self.current_time = None    # Th·ªùi gian hi·ªán t·∫°i
        self.user = user           # T√™n ng∆∞·ªùi d√πng

        save_log("=== S1 Bot Initialized ===", DEBUG_LOG_FILE)
        save_log(f"üë§ User: {self.user}", DEBUG_LOG_FILE)
        save_log(f"‚öôÔ∏è Settings:", DEBUG_LOG_FILE)
        save_log(f"  - Left bars: {self.LEFT_BARS}", DEBUG_LOG_FILE)
        save_log(f"  - Right bars: {self.RIGHT_BARS}", DEBUG_LOG_FILE)
        save_log(f"  - Min bars between pivots: {self.MIN_BARS_BETWEEN_PIVOTS}", DEBUG_LOG_FILE)
        
    def set_current_time(self, time):
        """C·∫≠p nh·∫≠t current_time"""
        self.current_time = time
        save_log(f"‚è∞ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian: {time}", DEBUG_LOG_FILE)    
        
    def clear_all(self):
        """Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.price_history.clear()
        self.confirmed_pivots.clear()
        
        save_log("\n=== Reset To√†n B·ªô D·ªØ Li·ªáu ===", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a price history", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a confirmed pivots", DEBUG_LOG_FILE)
        save_log("==============================", DEBUG_LOG_FILE)  
    
    def detect_potential_pivot(self, price, direction, time):
        """Ph√°t hi·ªán ƒëi·ªÉm c√≥ kh·∫£ nƒÉng l√† pivot"""
        try:
            # Ki·ªÉm tra ƒë·ªß n·∫øn b√™n tr√°i
            if len(self.price_history) < self.LEFT_BARS:
                save_log(f"\n‚ö†Ô∏è Ch∆∞a ƒë·ªß n·∫øn tr√°i ƒë·ªÉ x√©t pivot t·∫°i {time}", DEBUG_LOG_FILE)
                save_log(f"- C·∫ßn: {self.LEFT_BARS} n·∫øn", DEBUG_LOG_FILE)
                save_log(f"- Hi·ªán c√≥: {len(self.price_history)} n·∫øn", DEBUG_LOG_FILE)
                return None

            # L·∫•y 5 n·∫øn tr∆∞·ªõc
            left_bars = self.price_history[-self.LEFT_BARS:]
            
            # Log ph√¢n t√≠ch
            save_log(f"\n=== X√©t ƒëi·ªÉm ti·ªÅm nƒÉng {time} ===", DEBUG_LOG_FILE)
            save_log(f"üí≤ Gi√°: ${price:,.2f}", DEBUG_LOG_FILE)
            save_log(f"üìä Lo·∫°i: {'High' if direction == 'high' else 'Low'}", DEBUG_LOG_FILE)
            
            # Ki·ªÉm tra v·ªõi n·∫øn tr√°i
            if direction == "high":
                is_potential = price > max(bar['high'] for bar in left_bars)
                if is_potential:
                    save_log("‚úÖ Cao h∆°n t·∫•t c·∫£ high c·ªßa 5 n·∫øn tr∆∞·ªõc", DEBUG_LOG_FILE)
                else:
                    save_log("‚ùå Kh√¥ng cao h∆°n t·∫•t c·∫£ high c·ªßa 5 n·∫øn tr∆∞·ªõc", DEBUG_LOG_FILE)
            else:
                is_potential = price < min(bar['low'] for bar in left_bars)
                if is_potential:
                    save_log("‚úÖ Th·∫•p h∆°n t·∫•t c·∫£ low c·ªßa 5 n·∫øn tr∆∞·ªõc", DEBUG_LOG_FILE)
                else:
                    save_log("‚ùå Kh√¥ng th·∫•p h∆°n t·∫•t c·∫£ low c·ªßa 5 n·∫øn tr∆∞·ªõc", DEBUG_LOG_FILE)

            if is_potential:
                potential_pivot = {
                    'time': time,
                    'price': price,
                    'direction': direction,
                    'confirmed': False,
                    'right_bars': []  # S·∫Ω th√™m n·∫øn ph·∫£i v√†o ƒë√¢y
                }
                self.potential_pivots.append(potential_pivot)
                save_log("‚û°Ô∏è ƒê√£ th√™m v√†o danh s√°ch ch·ªù x√°c nh·∫≠n", DEBUG_LOG_FILE)
                return potential_pivot

            return None

        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√°t hi·ªán pivot ti·ªÅm nƒÉng: {str(e)}", DEBUG_LOG_FILE)
            return None
    
    def confirm_pivot(self, potential_pivot):
        """X√°c nh·∫≠n pivot khi ƒë·ªß n·∫øn ph·∫£i"""
        try:
            # Ki·ªÉm tra s·ªë n·∫øn ph·∫£i
            if len(potential_pivot['right_bars']) < self.RIGHT_BARS:
                save_log(f"\n‚è≥ Pivot {potential_pivot['time']} ƒëang ch·ªù ƒë·ªß n·∫øn ph·∫£i:", DEBUG_LOG_FILE)
                save_log(f"- C·∫ßn: {self.RIGHT_BARS} n·∫øn", DEBUG_LOG_FILE)
                save_log(f"- Hi·ªán c√≥: {len(potential_pivot['right_bars'])} n·∫øn", DEBUG_LOG_FILE)
                return False

            # So s√°nh v·ªõi n·∫øn ph·∫£i
            if potential_pivot['direction'] == 'high':
                is_confirmed = potential_pivot['price'] > max(bar['high'] for bar in potential_pivot['right_bars'])
                comparison = "cao h∆°n"
            else:
                is_confirmed = potential_pivot['price'] < min(bar['low'] for bar in potential_pivot['right_bars'])
                comparison = "th·∫•p h∆°n"

            save_log(f"\nüîç X√°c nh·∫≠n pivot {potential_pivot['time']}:", DEBUG_LOG_FILE)
            if is_confirmed:
                save_log(f"‚úÖ {comparison} t·∫•t c·∫£ n·∫øn ph·∫£i", DEBUG_LOG_FILE)
                return True
            else:
                save_log(f"‚ùå Kh√¥ng {comparison} t·∫•t c·∫£ n·∫øn ph·∫£i", DEBUG_LOG_FILE)
                return False

        except Exception as e:
            save_log(f"‚ùå L·ªói khi x√°c nh·∫≠n pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def process_new_candle(self, candle_data):
        """
        X·ª≠ l√Ω khi c√≥ n·∫øn m·ªõi
        - Th√™m v√†o price history
        - Ph√°t hi·ªán pivot ti·ªÅm nƒÉng
        - C·∫≠p nh·∫≠t/x√°c nh·∫≠n c√°c pivot ƒëang ch·ªù
        """
        try:
            # Chuy·ªÉn ƒë·ªïi th·ªùi gian sang VN
            utc_time = datetime.strptime(candle_data['time'], '%H:%M')
            vn_time = (utc_time + timedelta(hours=7)).strftime('%H:%M')

            save_log(f"\n=== N·∫øn {vn_time} (GMT+7) ===", "DETAIL")
            save_log(f"Gi√°: ${candle_data['close']:,.2f}", "INFO")

            # Ki·ªÉm tra bi·∫øn ƒë·ªông
            price_range = candle_data['high'] - candle_data['low']
            if price_range > 200:
                save_log(f"‚ö†Ô∏è Bi·∫øn ƒë·ªông l·ªõn: ${candle_data['high']:,.2f} - ${candle_data['low']:,.2f}", "INFO")

            save_log("\n=== N·∫øn M·ªõi ===")
            save_log(f"‚è∞ Th·ªùi ƒëi·ªÉm: {vn_time} (GMT+7)")
            save_log(f"üìä High: ${candle_data['high']:,.2f}, Low: ${candle_data['low']:,.2f}")

            # 3. Ki·ªÉm tra bi·∫øn ƒë·ªông b·∫•t th∆∞·ªùng
            price_range = candle_data['high'] - candle_data['low']
            if price_range > 200:  # Ng∆∞·ª°ng 200$
                save_log(f"‚ö†Ô∏è Bi·∫øn ƒë·ªông l·ªõn: ${price_range:,.2f}", DEBUG_LOG_FILE)
                save_log(f"Range: ${candle_data['high']:,.2f} - ${candle_data['low']:,.2f}", DEBUG_LOG_FILE)

            # 4. Th√™m v√†o price history
            self.price_history.append(candle_data)
            save_log(f"üìà T·ªïng s·ªë n·∫øn: {len(self.price_history)}", DEBUG_LOG_FILE)

            # 5. Ph√°t hi·ªán pivot ti·ªÅm nƒÉng m·ªõi
            save_log("\nüîç Ki·ªÉm tra pivot ti·ªÅm nƒÉng:", DEBUG_LOG_FILE)
            
            # Ki·ªÉm tra High
            potential_high = self.detect_potential_pivot(
                price=candle_data['high'],
                direction='high',
                time=vn_time
            )
            if potential_high:
                save_log(f"‚úÖ Ph√°t hi·ªán High ti·ªÅm nƒÉng: ${potential_high['price']:,.2f}", DEBUG_LOG_FILE)
            
            # Ki·ªÉm tra Low
            potential_low = self.detect_potential_pivot(
                price=candle_data['low'],
                direction='low',
                time=vn_time
            )
            if potential_low:
                save_log(f"‚úÖ Ph√°t hi·ªán Low ti·ªÅm nƒÉng: ${potential_low['price']:,.2f}", DEBUG_LOG_FILE)

            # 6. C·∫≠p nh·∫≠t c√°c pivot ƒëang ch·ªù x√°c nh·∫≠n
            if self.potential_pivots:
                save_log("\nüìù C·∫≠p nh·∫≠t pivot ƒëang ch·ªù:", DEBUG_LOG_FILE)
                save_log(f"S·ªë pivot ch·ªù x√°c nh·∫≠n: {len(self.potential_pivots)}", DEBUG_LOG_FILE)
                
                for pivot in self.potential_pivots[:]:  # D√πng slice ƒë·ªÉ tr√°nh l·ªói khi x√≥a
                    if not pivot['confirmed']:
                        # Th√™m n·∫øn m·ªõi v√†o right_bars
                        pivot['right_bars'].append(candle_data)
                        
                        # Log th√¥ng tin
                        utc_pivot_time = datetime.strptime(pivot['time'], '%H:%M')
                        vn_pivot_time = (utc_pivot_time + timedelta(hours=7)).strftime('%H:%M')
                        save_log(f"\nKi·ªÉm tra pivot {vn_pivot_time}:", DEBUG_LOG_FILE)
                        save_log(f"- Gi√°: ${pivot['price']:,.2f}", DEBUG_LOG_FILE)
                        save_log(f"- Lo·∫°i: {pivot['direction'].upper()}", DEBUG_LOG_FILE)
                        save_log(f"- S·ªë n·∫øn ph·∫£i: {len(pivot['right_bars'])}/{self.RIGHT_BARS}", DEBUG_LOG_FILE)

                        # Ki·ªÉm tra x√°c nh·∫≠n n·∫øu ƒë·ªß n·∫øn
                        if len(pivot['right_bars']) >= self.RIGHT_BARS:
                            if self.confirm_pivot(pivot):
                                pivot['confirmed'] = True
                                # Ph√¢n lo·∫°i pivot
                                pivot_type = self.classify_pivot(pivot)
                                if pivot_type:
                                    self.add_confirmed_pivot(pivot, pivot_type)
                                    save_log(f"‚úÖ X√°c nh·∫≠n th√†nh c√¥ng: {pivot_type}", DEBUG_LOG_FILE)
                                else:
                                    save_log("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i pivot", DEBUG_LOG_FILE)
                            else:
                                save_log("‚ùå Kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán pivot", DEBUG_LOG_FILE)
                                self.potential_pivots.remove(pivot)
                        else:
                            save_log("‚è≥ Ch·ªù th√™m n·∫øn ph·∫£i", DEBUG_LOG_FILE)

            # 7. Log t·ªïng k·∫øt
            save_log("\nüìä T·ªîNG K·∫æT:", DEBUG_LOG_FILE)
            save_log(f"- T·ªïng s·ªë n·∫øn: {len(self.price_history)}", DEBUG_LOG_FILE)
            save_log(f"- Pivot ti·ªÅm nƒÉng: {len(self.potential_pivots)}", DEBUG_LOG_FILE)
            save_log(f"- Pivot ƒë√£ x√°c nh·∫≠n: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
            save_log("="*50 + "\n", DEBUG_LOG_FILE)

        except Exception as e:
            save_log(f"\n‚ùå L·ªñI X·ª¨ L√ù N·∫æN M·ªöI:", DEBUG_LOG_FILE)
            save_log(f"- Chi ti·∫øt: {str(e)}", DEBUG_LOG_FILE)
            save_log(f"- Trace: {traceback.format_exc()}", DEBUG_LOG_FILE)
    
    def add_price_data(self, data):
        """
        Th√™m d·ªØ li·ªáu gi√° m·ªõi v√† ph√¢n t√≠ch pivot
        Args:
            data: Dictionary ch·ª©a th√¥ng tin n·∫øn (time, open, high, low, close)
        Returns:
            bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # 1. C·∫≠p nh·∫≠t th√¥ng tin
            self.current_time = data["time"]
            save_log(f"\n=== N·∫øn M·ªõi ===", DEBUG_LOG_FILE)
            save_log(f"‚è∞ Th·ªùi ƒëi·ªÉm: {self.current_time}", DEBUG_LOG_FILE)
            save_log(f"üìä High: ${data['high']:,.2f}, Low: ${data['low']:,.2f}", DEBUG_LOG_FILE)

            # 2. Th√™m v√†o l·ªãch s·ª≠
            self.price_history.append(data)
            save_log(f"üìà T·ªïng s·ªë n·∫øn: {len(self.price_history)}", DEBUG_LOG_FILE)

            # 3. Ph√¢n t√≠ch pivot
            high_pivot = self.detect_pivot(data["high"], "high")
            low_pivot = self.detect_pivot(data["low"], "low")

            # 4. L∆∞u n·∫øu ph√°t hi·ªán pivot m·ªõi
            if high_pivot or low_pivot:
                self.save_to_excel()

            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m price data: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def process_new_data(self, data):
        """X·ª≠ l√Ω d·ªØ li·ªáu m·ªõi v√† ph√°t hi·ªán pivot"""
        try:
            # Th√™m d·ªØ li·ªáu
            if not self.add_price_data(data):
                return False
                
            # Ph√°t hi·ªán pivot
            high_pivot = self.detect_pivot(data["high"], "high")
            low_pivot = self.detect_pivot(data["low"], "low")

            # C·∫≠p nh·∫≠t Excel n·∫øu c·∫ßn
            if high_pivot or low_pivot:
                self.save_to_excel()

            return True
            
        except Exception as e:
            save_log(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu m·ªõi: {str(e)}", DEBUG_LOG_FILE)
            return False    
            
    def detect_pivot(self, price, direction):
        """
        Ph√°t hi·ªán pivot theo logic TradingView
        """
        try:
            # 1. Ki·ªÉm tra ƒë·ªß s·ªë n·∫øn
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"\n‚ö†Ô∏è Ch∆∞a ƒë·ªß n·∫øn ƒë·ªÉ x√°c ƒë·ªãnh pivot", DEBUG_LOG_FILE)
                save_log(f"- C·∫ßn: {self.LEFT_BARS + self.RIGHT_BARS + 1} n·∫øn", DEBUG_LOG_FILE)
                save_log(f"- Hi·ªán c√≥: {len(self.price_history)} n·∫øn", DEBUG_LOG_FILE)
                return None

            # 2. L·∫•y window hi·ªán t·∫°i (11 n·∫øn)
            window = self.price_history[-(self.LEFT_BARS + self.RIGHT_BARS + 1):]
            center_idx = self.LEFT_BARS
            center_candle = window[center_idx]
            
            # Chuy·ªÉn ƒë·ªïi th·ªùi gian center candle sang gi·ªù VN
            utc_time = datetime.strptime(center_candle['time'], '%H:%M')
            vn_time = (utc_time + timedelta(hours=7)).strftime('%H:%M')

            # 3. Log chi ti·∫øt qu√° tr√¨nh so s√°nh
            save_log(f"\n=== Ph√¢n t√≠ch Pivot {vn_time} (GMT+7) ===", DEBUG_LOG_FILE)
            save_log(f"üí≤ Gi√° ki·ªÉm tra: ${price:,.2f}", DEBUG_LOG_FILE)
            save_log(f"üìä Lo·∫°i: {'High' if direction == 'high' else 'Low'}", DEBUG_LOG_FILE)

            # 4. Log chi ti·∫øt 5 n·∫øn tr∆∞·ªõc
            save_log("\nüîç 5 n·∫øn tr∆∞·ªõc center:", DEBUG_LOG_FILE)
            for i, bar in enumerate(window[:center_idx]):
                if direction == "high":
                    save_log(f"N·∫øn {bar['time']}: High=${bar['high']:,.2f}", DEBUG_LOG_FILE)
                else:
                    save_log(f"N·∫øn {bar['time']}: Low=${bar['low']:,.2f}", DEBUG_LOG_FILE)

            # 5. Log n·∫øn center
            save_log(f"\nüéØ N·∫øn center ({center_candle['time']}):", DEBUG_LOG_FILE)
            if direction == "high":
                save_log(f"High=${center_candle['high']:,.2f}", DEBUG_LOG_FILE)
            else:
                save_log(f"Low=${center_candle['low']:,.2f}", DEBUG_LOG_FILE)

            # 6. Log chi ti·∫øt 5 n·∫øn sau
            save_log("\nüîç 5 n·∫øn sau center:", DEBUG_LOG_FILE)
            for i, bar in enumerate(window[center_idx + 1:]):
                if direction == "high":
                    save_log(f"N·∫øn {bar['time']}: High=${bar['high']:,.2f}", DEBUG_LOG_FILE)
                else:
                    save_log(f"N·∫øn {bar['time']}: Low=${bar['low']:,.2f}", DEBUG_LOG_FILE)

            # 7. Ki·ªÉm tra ƒëi·ªÅu ki·ªán pivot
            if direction == "high":
                max_left = max(bar['high'] for bar in window[:center_idx])
                max_right = max(bar['high'] for bar in window[center_idx + 1:])
                
                save_log(f"\nüìà So s√°nh High:", DEBUG_LOG_FILE)
                save_log(f"- Max 5 n·∫øn tr∆∞·ªõc: ${max_left:,.2f}", DEBUG_LOG_FILE)
                save_log(f"- Gi√° center: ${price:,.2f}", DEBUG_LOG_FILE)
                save_log(f"- Max 5 n·∫øn sau: ${max_right:,.2f}", DEBUG_LOG_FILE)
                
                is_pivot = price > max_left and price > max_right
                
                if is_pivot:
                    save_log("‚úÖ Th·ªèa m√£n ƒëi·ªÅu ki·ªán High Pivot:", DEBUG_LOG_FILE)
                    save_log(f"- ${price:,.2f} > ${max_left:,.2f} (tr∆∞·ªõc)", DEBUG_LOG_FILE)
                    save_log(f"- ${price:,.2f} > ${max_right:,.2f} (sau)", DEBUG_LOG_FILE)
                else:
                    save_log("‚ùå Kh√¥ng th·ªèa m√£n ƒëi·ªÅu ki·ªán High Pivot:", DEBUG_LOG_FILE)
                    if price <= max_left:
                        save_log(f"- ${price:,.2f} <= ${max_left:,.2f} (tr∆∞·ªõc)", DEBUG_LOG_FILE)
                    if price <= max_right:
                        save_log(f"- ${price:,.2f} <= ${max_right:,.2f} (sau)", DEBUG_LOG_FILE)

            else:  # direction == "low"
                min_left = min(bar['low'] for bar in window[:center_idx])
                min_right = min(bar['low'] for bar in window[center_idx + 1:])
                
                save_log(f"\nüìâ So s√°nh Low:", DEBUG_LOG_FILE)
                save_log(f"- Min 5 n·∫øn tr∆∞·ªõc: ${min_left:,.2f}", DEBUG_LOG_FILE)
                save_log(f"- Gi√° center: ${price:,.2f}", DEBUG_LOG_FILE)
                save_log(f"- Min 5 n·∫øn sau: ${min_right:,.2f}", DEBUG_LOG_FILE)
                
                is_pivot = price < min_left and price < min_right
                
                if is_pivot:
                    save_log("‚úÖ Th·ªèa m√£n ƒëi·ªÅu ki·ªán Low Pivot:", DEBUG_LOG_FILE)
                    save_log(f"- ${price:,.2f} < ${min_left:,.2f} (tr∆∞·ªõc)", DEBUG_LOG_FILE)
                    save_log(f"- ${price:,.2f} < ${min_right:,.2f} (sau)", DEBUG_LOG_FILE)
                else:
                    save_log("‚ùå Kh√¥ng th·ªèa m√£n ƒëi·ªÅu ki·ªán Low Pivot:", DEBUG_LOG_FILE)
                    if price >= min_left:
                        save_log(f"- ${price:,.2f} >= ${min_left:,.2f} (tr∆∞·ªõc)", DEBUG_LOG_FILE)
                    if price >= min_right:
                        save_log(f"- ${price:,.2f} >= ${min_right:,.2f} (sau)", DEBUG_LOG_FILE)

            # 8. K·∫øt lu·∫≠n
            if not is_pivot:
                save_log("\n‚ùå K·∫øt lu·∫≠n: Kh√¥ng ph·∫£i pivot", DEBUG_LOG_FILE)
                return None

            # 9. N·∫øu l√† pivot, ph√¢n lo·∫°i v√† log
            pivot_type = self._determine_pivot_type(price, direction)
            if pivot_type:
                save_log(f"\n‚úÖ K·∫øt lu·∫≠n: Ph√°t hi·ªán {pivot_type}", DEBUG_LOG_FILE)
                save_log(f"‚è∞ Th·ªùi ƒëi·ªÉm: {center_candle['time']}", DEBUG_LOG_FILE)
                save_log(f"üí≤ Gi√°: ${price:,.2f}", DEBUG_LOG_FILE)
                
                new_pivot = {
                    'type': pivot_type,
                    'price': float(price),
                    'time': center_candle['time'],
                    'direction': direction,
                    'created_at': datetime.strptime("2025-03-20 09:43:35", "%Y-%m-%d %H:%M:%S").strftime('%Y-%m-%d %H:%M:%S')
                }

                if self._add_confirmed_pivot(new_pivot):
                    return new_pivot

            return None

        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√°t hi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            return None

    def _calculate_bars_between(self, time1, time2):
        """T√≠nh s·ªë n·∫øn gi·ªØa hai th·ªùi ƒëi·ªÉm, x·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p qua ng√†y"""
        try:
            if time2.hour < time1.hour:
                # Qua ng√†y m·ªõi
                minutes_to_midnight = (24 * 60) - (time1.hour * 60 + time1.minute)
                minutes_from_midnight = time2.hour * 60 + time2.minute
                total_minutes = minutes_to_midnight + minutes_from_midnight
            else:
                # C√πng ng√†y
                total_minutes = (time2.hour * 60 + time2.minute) - (time1.hour * 60 + time1.minute)
            
            return total_minutes / 30

        except Exception as e:
            save_log(f"‚ùå L·ªói khi t√≠nh s·ªë n·∫øn gi·ªØa hai th·ªùi ƒëi·ªÉm: {str(e)}", DEBUG_LOG_FILE)
            return 0 
    
    def _add_confirmed_pivot(self, pivot):
        """
        Th√™m pivot m·ªõi v√†o l·ªãch s·ª≠
        Args:
            pivot: Dictionary ch·ª©a th√¥ng tin pivot
        Returns:
            bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # Th√™m v√†o c·∫£ hai danh s√°ch
            self.pivot_history.append(pivot)
            self.confirmed_pivots.append(pivot)
            
            save_log("\n=== Th√™m Pivot M·ªõi ===", DEBUG_LOG_FILE)
            save_log(f"Lo·∫°i: {pivot['type']}", DEBUG_LOG_FILE)
            save_log(f"Gi√°: ${pivot['price']:,.2f}", DEBUG_LOG_FILE)
            save_log(f"Th·ªùi gian: {pivot['time']}", DEBUG_LOG_FILE)
            
            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def get_recent_pivots(self, count=4):
        """L·∫•y c√°c pivot g·∫ßn nh·∫•t"""
        try:
            save_log("\n=== L·∫•y pivot g·∫ßn nh·∫•t ===", DEBUG_LOG_FILE)
            save_log(f"Y√™u c·∫ßu: {count} pivot", DEBUG_LOG_FILE)
            save_log(f"T·ªïng s·ªë pivot hi·ªán c√≥: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
            
            recent = self.confirmed_pivots[-count:] if self.confirmed_pivots else []
            
            if recent:
                save_log("C√°c pivot ƒë∆∞·ª£c ch·ªçn:", DEBUG_LOG_FILE)
                for i, p in enumerate(recent, 1):
                    save_log(f"{i}. {p['type']} t·∫°i ${p['price']:,.2f} ({p['time']})", DEBUG_LOG_FILE)
            else:
                save_log("Kh√¥ng c√≥ pivot n√†o", DEBUG_LOG_FILE)
            
            return recent

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l·∫•y recent pivots: {str(e)}", DEBUG_LOG_FILE)
            return []
  
    def classify_pivot(self, new_pivot):
        """Ph√¢n lo·∫°i pivot theo logic TradingView"""
        try:
            if len(self.confirmed_pivots) < 5:
                return None  # C·∫ßn √≠t nh·∫•t 5 pivot ƒë·ªÉ ph√¢n lo·∫°i

            # L·∫•y 5 pivot g·∫ßn nh·∫•t (bao g·ªìm pivot m·ªõi)
            recent_points = self.confirmed_pivots[-5:]
            if len(recent_points) < 5:
                return None

            # G√°n c√°c gi√° tr·ªã theo c√°ch ƒë·∫∑t t√™n trong TradingView
            a = new_pivot['price']  # Pivot hi·ªán t·∫°i
            b = recent_points[-2]['price']  # Pivot tr∆∞·ªõc ƒë√≥
            c = recent_points[-3]['price']  # Pivot tr∆∞·ªõc b
            d = recent_points[-4]['price']  # Pivot tr∆∞·ªõc c
            e = recent_points[-5]['price']  # Pivot tr∆∞·ªõc d

            # Logic ph√¢n lo·∫°i ch√≠nh x√°c theo TradingView
            pivot_type = None
            if new_pivot['direction'] == 'high':
                # Ki·ªÉm tra Higher High
                if a > b and a > c and c > b and c > d:
                    pivot_type = 'HH'
                # Ki·ªÉm tra Lower High
                elif ((a <= c and (b < c and b < d and d < c and d < e)) or 
                      (a > b and a < c and b > d)):
                    pivot_type = 'LH'
            else:  # direction == 'low'
                # Ki·ªÉm tra Lower Low
                if a < b and a < c and c < b and c < d:
                    pivot_type = 'LL'
                # Ki·ªÉm tra Higher Low
                elif ((a >= c and (b > c and b > d and d > c and d > e)) or 
                      (a < b and a > c and b < d)):
                    pivot_type = 'HL'

            # N·∫øu x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i, th√™m v√†o confirmed_pivots
            if pivot_type:
                confirmed_pivot = {
                    'type': pivot_type,
                    'price': new_pivot['price'],
                    'time': new_pivot['time'],
                    'direction': new_pivot['direction']  # Th√™m direction
                }
                if confirmed_pivot not in self.confirmed_pivots:
                    self.confirmed_pivots.append(confirmed_pivot)
                    save_log(f"\n‚úÖ X√°c nh·∫≠n {pivot_type} t·∫°i ${new_pivot['price']:,.2f} ({new_pivot['time']})", DEBUG_LOG_FILE)
                    return confirmed_pivot

            return None

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi ph√¢n lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            return None
            
    def save_to_excel(self):
        try:
            if not self.confirmed_pivots:
                save_log("\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu pivot ƒë·ªÉ l∆∞u", DEBUG_LOG_FILE)
                return

            save_log("\n=== B·∫Øt ƒë·∫ßu l∆∞u d·ªØ li·ªáu v√†o Excel ===", DEBUG_LOG_FILE)
            save_log(f"üìä T·ªïng s·ªë pivot: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)

            # Chu·∫©n b·ªã d·ªØ li·ªáu
            current_date = datetime.strptime("2025-03-20", "%Y-%m-%d")  # Ng√†y hi·ªán t·∫°i
            excel_data = []
            
            for pivot in self.confirmed_pivots:
                # X·ª≠ l√Ω th·ªùi gian
                pivot_time = datetime.strptime(pivot['time'], '%H:%M')
                # N·∫øu gi·ªù c·ªßa pivot l·ªõn h∆°n gi·ªù hi·ªán t·∫°i, gi·∫£m 1 ng√†y
                if pivot_time.hour > current_date.hour:
                    pivot_date = current_date - timedelta(days=1)
                else:
                    pivot_date = current_date

                full_datetime = datetime.combine(pivot_date.date(), pivot_time.time())

                excel_data.append({
                    'datetime': full_datetime,
                    'price': pivot['price'],
                    'pivot_type': pivot['type']
                })

            # T·∫°o DataFrame v√† s·∫Øp x·∫øp theo th·ªùi gian
            df = pd.DataFrame(excel_data)
            df = df.sort_values('datetime')

            # Ghi v√†o Excel v·ªõi ƒë·ªãnh d·∫°ng
            with pd.ExcelWriter('test_results.xlsx', engine='xlsxwriter') as writer:
                df.to_excel(writer, sheet_name='Pivot Analysis', index=False)
                workbook = writer.book
                worksheet = writer.sheets['Pivot Analysis']

                # ƒê·ªãnh d·∫°ng c·ªôt
                datetime_format = workbook.add_format({'num_format': 'yyyy-mm-dd hh:mm:ss'})
                price_format = workbook.add_format({'num_format': '$#,##0.00'})
                
                # √Åp d·ª•ng ƒë·ªãnh d·∫°ng
                worksheet.set_column('A:A', 20, datetime_format)  # datetime
                worksheet.set_column('B:B', 15, price_format)     # price
                worksheet.set_column('C:C', 10)                   # pivot_type

                # Th√™m th·ªëng k√™
                row = len(df) + 2
                worksheet.write(row, 0, 'Th·ªëng k√™:')
                worksheet.write(row + 1, 0, 'T·ªïng s·ªë pivot:')
                worksheet.write(row + 1, 1, len(df))

                # Ph√¢n b·ªë pivot
                types_count = df['pivot_type'].value_counts()
                worksheet.write(row + 2, 0, 'Ph√¢n b·ªë pivot:')
                current_row = row + 3
                for ptype in ['HH', 'HL', 'LH', 'LL']:
                    if ptype in types_count:
                        worksheet.write(current_row, 0, f'{ptype}:')
                        worksheet.write(current_row, 1, types_count[ptype])
                        current_row += 1

            save_log("‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng v√†o Excel", DEBUG_LOG_FILE)

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l∆∞u Excel: {str(e)}", DEBUG_LOG_FILE)
            save_log(traceback.format_exc(), DEBUG_LOG_FILE)
            
    def _get_pivot_comment(self, pivot_type, price_change):
        """T·∫°o comment cho pivot d·ª±a tr√™n lo·∫°i v√† % thay ƒë·ªïi"""
        comment = f"{pivot_type}: "
        if pivot_type in ['HH', 'HL']:
            comment += "Bullish " if price_change > 0 else "Caution "
        else:  # LH, LL
            comment += "Bearish " if price_change < 0 else "Caution "
        comment += f"({price_change:+.2f}%)"
        return comment
        
    def get_all_pivots(self):
        """L·∫•y t·∫•t c·∫£ c√°c pivot theo th·ª© t·ª± th·ªùi gian"""
        try:
            if not self.confirmed_pivots:
                return []
                
            # S·∫Øp x·∫øp theo th·ªùi gian
            sorted_pivots = sorted(
                self.confirmed_pivots,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )
            
            save_log(f"\nT·ªïng s·ªë pivot: {len(sorted_pivots)}", DEBUG_LOG_FILE)
            return sorted_pivots
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi l·∫•y all pivots: {str(e)}", DEBUG_LOG_FILE)
            return []    
                
    def _determine_pivot_type(self, price, direction):
        """
        X√°c ƒë·ªãnh lo·∫°i pivot d·ª±a tr√™n logic TradingView
        Args:
            price: Gi√° c·ªßa pivot hi·ªán t·∫°i
            direction: 'high' ho·∫∑c 'low'
        Returns:
            str: Lo·∫°i pivot (HH, LL, HL, LH) ho·∫∑c None
        """
        try:
            save_log("\n=== Ph√¢n Lo·∫°i Pivot ===", DEBUG_LOG_FILE)
            
            # L·∫•y 4 pivot tr∆∞·ªõc ƒë√≥
            [b, c, d, e] = self._find_previous_pivots(direction)
            a = price  # Pivot hi·ªán t·∫°i
            
            save_log("Gi√° c√°c pivot:", DEBUG_LOG_FILE)
            save_log(f"A (hi·ªán t·∫°i): ${a:,.2f}", DEBUG_LOG_FILE)
            save_log(f"B (tr∆∞·ªõc): ${b:,.2f if b else 0}", DEBUG_LOG_FILE)
            save_log(f"C: ${c:,.2f if c else 0}", DEBUG_LOG_FILE)
            save_log(f"D: ${d:,.2f if d else 0}", DEBUG_LOG_FILE)
            save_log(f"E: ${e:,.2f if e else 0}", DEBUG_LOG_FILE)

            if None in [b, c, d]:
                save_log("‚ö†Ô∏è Ch∆∞a ƒë·ªß pivot ƒë·ªÉ ph√¢n lo·∫°i", DEBUG_LOG_FILE)
                return None

            # Logic ph√¢n lo·∫°i t·ª´ TradingView
            if direction == "high":
                if a > b and a > c and c > b and c > d:
                    save_log("‚úÖ Ph√°t hi·ªán HH", DEBUG_LOG_FILE)
                    return "HH"
                elif ((a <= c and (b < c and b < d and d < c and d < e)) or 
                      (a > b and a < c and b > d)):
                    save_log("‚úÖ Ph√°t hi·ªán LH", DEBUG_LOG_FILE)
                    return "LH"
            else:  # direction == "low"
                if a < b and a < c and c < b and c < d:
                    save_log("‚úÖ Ph√°t hi·ªán LL", DEBUG_LOG_FILE)
                    return "LL"
                elif ((a >= c and (b > c and b > d and d > c and d > e)) or 
                      (a < b and a > c and b < d)):
                    save_log("‚úÖ Ph√°t hi·ªán HL", DEBUG_LOG_FILE)
                    return "HL"

            save_log("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i pivot", DEBUG_LOG_FILE)
            return None

        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√¢n lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            return None
    
    def _is_valid_pivot_spacing(self, new_pivot_time):
        """Ki·ªÉm tra kho·∫£ng c√°ch gi·ªØa pivot m·ªõi v√† pivot g·∫ßn nh·∫•t"""
        try:
            if not self.confirmed_pivots:
                return True
                
            last_pivot = self.confirmed_pivots[-1]
            
            # Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian th√†nh datetime v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin ng√†y
            last_pivot_dt = datetime.strptime(f"2025-03-14 {last_pivot['time']}", '%Y-%m-%d %H:%M')
            new_pivot_dt = datetime.strptime(f"2025-03-15 {new_pivot_time}", '%Y-%m-%d %H:%M')
            
            # N·∫øu new_pivot_time < last_pivot_time, nghƒ©a l√† ƒë√£ qua ng√†y m·ªõi
            if new_pivot_dt < last_pivot_dt:
                new_pivot_dt = new_pivot_dt + timedelta(days=1)
            
            # T√≠nh s·ªë n·∫øn gi·ªØa 2 pivot (m·ªói n·∫øn 30 ph√∫t)
            bars_between = (new_pivot_dt - last_pivot_dt).total_seconds() / 1800
            
            is_valid = bars_between >= self.MIN_BARS_BETWEEN_PIVOTS
            if not is_valid:
                save_log(f"‚ö†Ô∏è B·ªè qua pivot t·∫°i {new_pivot_time} do kho·∫£ng c√°ch qu√° g·∫ßn (c·∫ßn t·ªëi thi·ªÉu {self.MIN_BARS_BETWEEN_PIVOTS} n·∫øn)", DEBUG_LOG_FILE)
                save_log(f"Range c·ªßa pivot g·∫ßn nh·∫•t ({last_pivot['type']} t·∫°i {last_pivot['time']})", DEBUG_LOG_FILE)
                save_log(f"Kho·∫£ng c√°ch th·ª±c t·∫ø: {bars_between:.1f} n·∫øn", DEBUG_LOG_FILE)
                
            return is_valid
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi ki·ªÉm tra kho·∫£ng c√°ch pivot: {str(e)}", DEBUG_LOG_FILE)
            return False
    
    def _find_previous_pivots(self, direction, count=4):
        """
        T√¨m 4 pivot points g·∫ßn nh·∫•t c√πng h∆∞·ªõng
        Args:
            direction: 'high' ho·∫∑c 'low'
            count: S·ªë pivot c·∫ßn t√¨m
        Returns:
            list: Danh s√°ch gi√° c·ªßa c√°c pivot
        """
        results = []
        for pivot in reversed(self.pivot_history):
            if pivot['direction'] == direction and len(results) < count:
                results.append(pivot['price'])
        return results + [None] * (count - len(results)) 
    
# Create global instance
pivot_data = PivotData() 

# Export functions

# Cu·ªëi file s1.py th√™m d√≤ng n√†y
__all__ = ['pivot_data', 'detect_pivot', 'save_log', 'set_current_time_and_user']
    

def detect_pivot(price, direction):
    return pivot_data.detect_pivot(price, direction)
    
def get_binance_price(context: CallbackContext):
    try:
        klines = binance_client.futures_klines(symbol="BTCUSDT", interval="30m", limit=2)
        last_candle = klines[-2]  # Ensure we get the closed candle
        high_price = float(last_candle[2])
        low_price = float(last_candle[3])
        close_price = float(last_candle[4])
        
        price_data = {
            "high": high_price,
            "low": low_price,
            "price": close_price,
            "time": datetime.now().strftime("%H:%M")
        }
        pivot_data.add_price_data(price_data)
        
        save_log(f"Thu th·∫≠p d·ªØ li·ªáu n·∫øn 30m: High=${high_price:,.2f}, Low=${low_price:,.2f}", DEBUG_LOG_FILE)
        
        detect_pivot(high_price, "high")
        detect_pivot(low_price, "low")
        
    except Exception as e:
        logger.error(f"Binance API Error: {e}")
        save_log(f"Binance API Error: {e}", DEBUG_LOG_FILE)
        
def schedule_next_run(job_queue):
    try:
        # l√™n l·ªãch ch·∫°y khi ch·∫µn 30p
        now = datetime.now()
        next_run = now.replace(second=0, microsecond=0) + timedelta(minutes=(30 - now.minute % 30))
        delay = (next_run - now).total_seconds()
        
        save_log(f"L√™n l·ªãch ch·∫°y v√†o {next_run.strftime('%Y-%m-%d %H:%M:%S')}", DEBUG_LOG_FILE)
        # Thay ƒë·ªïi interval t·ª´ 300 (5 ph√∫t) sang 1800 (30 ph√∫t)
        job_queue.run_repeating(get_binance_price, interval=1800, first=delay)
    except Exception as e:
        logger.error(f"Error scheduling next run: {e}")
        save_log(f"Error scheduling next run: {e}", DEBUG_LOG_FILE)
     
def main():
    """Main entry point to start the bot."""
    try:
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        job_queue = updater.job_queue
        
        schedule_next_run(job_queue)  # Schedule first run
        
        print("Bot is running...")
        logger.info("Bot started successfully.")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"Error in main: {e}")
        save_log(f"Error in main: {e}", DEBUG_LOG_FILE)

if __name__ == "__main__":
    main()
