import logging
import json
import pandas as pd
import os
import time
import pytz
from datetime import datetime, timedelta
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue
from binance.client import Client
from openpyxl import Workbook
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis
from openpyxl.chart.marker import Marker
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter

# Configurations
TOKEN = "7637023247:AAG_utVTC0rXyfute9xsBdh-IrTUE3432o8"
BINANCE_API_KEY = "aVim4czsoOzuLxk0CsEsV0JwE58OX90GRD8OvDfT8xH2nfSEC0mMnMCVrwgFcSEi"
BINANCE_API_SECRET = "rIQ2LLUtYWBcXt5FiMIHuXeeDJqeREbvw8r9NlTJ83gveSAvpSMqd1NBoQjAodC4"
CHAT_ID = 7662080576
LOG_FILE = "bot_log.json"
PATTERN_LOG_FILE = "pattern_log.txt"
DEBUG_LOG_FILE = "debug_historical_test.log"
EXCEL_FILE = "pivots.xlsx"
    
# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ensure log files exist
for file in [LOG_FILE, PATTERN_LOG_FILE, DEBUG_LOG_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            f.write("=== Log Initialized ===\n")

# Initialize Binance Client
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

def save_log(log_message, filename):
    """Ghi log v·ªõi timestamp v√† format nh·∫•t qu√°n"""
    try:
        # Th√™m timestamp n·∫øu d√≤ng log kh√¥ng ph·∫£i l√† d√≤ng tr·ªëng
        if log_message.strip():
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            formatted_message = f"[{timestamp}] {log_message}"
        else:
            formatted_message = log_message

        with open(filename, "a", encoding="utf-8") as f:
            f.write(formatted_message + "\n")
    except Exception as e:
        print(f"Error saving log: {str(e)}")
        
# Th√™m h√†m ƒë·ªÉ set c√°c gi√° tr·ªã n√†y
def set_current_time_and_user(current_time, current_user):
    """Set th·ªùi gian v√† user hi·ªán t·∫°i v·ªõi support m√∫i gi·ªù Vi·ªát Nam"""
    try:
        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù Vi·ªát Nam n·∫øu input l√† UTC
        if isinstance(current_time, str):
            try:
                # Parse th·ªùi gian UTC
                utc_dt = datetime.strptime(current_time, '%Y-%m-%d %H:%M:%S')
                utc_dt = utc_dt.replace(tzinfo=pytz.UTC)
                # Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
                vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                vn_time = utc_dt.astimezone(vn_tz)
                # Format l·∫°i th√†nh string
                pivot_data.current_time = vn_time.strftime('%H:%M')  # Ch·ªâ l·∫•y gi·ªù:ph√∫t cho pivot
            except ValueError as e:
                save_log(f"Error parsing time: {str(e)}", DEBUG_LOG_FILE)
                return False

        pivot_data.current_user = current_user
        
        # Log chi ti·∫øt h∆°n
        save_log("\n=== C·∫≠p nh·∫≠t th√¥ng tin phi√™n ===", DEBUG_LOG_FILE)
        save_log(f"UTC time: {current_time}", DEBUG_LOG_FILE)
        if 'vn_time' in locals():
            save_log(f"Vietnam time: {vn_time.strftime('%Y-%m-%d %H:%M:%S (GMT+7)')}", DEBUG_LOG_FILE)
        save_log(f"Pivot time format: {pivot_data.current_time}", DEBUG_LOG_FILE)
        save_log(f"User: {current_user}", DEBUG_LOG_FILE)
        save_log("="*30, DEBUG_LOG_FILE)
        return True

    except Exception as e:
        save_log(f"Error setting time and user: {str(e)}", DEBUG_LOG_FILE)
        return False
                
class PivotData:
    def __init__(self):
        """Kh·ªüi t·∫°o v·ªõi logic TradingView"""
        # C√°c th√¥ng s·ªë c∆° b·∫£n
        self.LEFT_BARS = 5        # S·ªë n·∫øn so s√°nh b√™n tr√°i
        self.RIGHT_BARS = 5       # S·ªë n·∫øn so s√°nh b√™n ph·∫£i
        
        # L∆∞u tr·ªØ d·ªØ li·ªáu
        self.price_history = []   # L·ªãch s·ª≠ gi√°
        self.confirmed_pivots = [] # C√°c pivot ƒë√£ x√°c nh·∫≠n
        
        # Th·ªùi gian hi·ªán t·∫°i
        self.current_time = None
        
        save_log("üîÑ Kh·ªüi t·∫°o PivotData v·ªõi logic TradingView", DEBUG_LOG_FILE)
            
    def set_current_time(self, time):
        """C·∫≠p nh·∫≠t current_time"""
        self.current_time = time
        save_log(f"‚è∞ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian: {time}", DEBUG_LOG_FILE)
    
    def clear_all(self):
        """Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.price_history.clear()
        self.pivot_points.clear()
        self.confirmed_pivots.clear()
        
        save_log("\n=== Reset To√†n B·ªô D·ªØ Li·ªáu ===", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a price history", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a pivot points", DEBUG_LOG_FILE)
        save_log("‚úÖ ƒê√£ x√≥a confirmed pivots", DEBUG_LOG_FILE)
        save_log("==============================", DEBUG_LOG_FILE)   

    def add_price_data(self, data):
        """Th√™m d·ªØ li·ªáu gi√° m·ªõi v·ªõi logic ƒë∆°n gi·∫£n h√≥a"""
        try:
            # C·∫≠p nh·∫≠t th·ªùi gian v√† log
            self.current_time = data["time"]
            save_log(f"\n‚è∞ Th·ªùi ƒëi·ªÉm: {self.current_time}", DEBUG_LOG_FILE)
            save_log(f"üìä High: ${data['high']:,.2f}, Low: ${data['low']:,.2f}", DEBUG_LOG_FILE)

            # Th√™m v√†o l·ªãch s·ª≠ gi√°
            self.price_history.append(data)
            
            # Gi·ªØ s·ªë l∆∞·ª£ng n·∫øn c·ªë ƒë·ªãnh
            max_bars = self.LEFT_BARS + self.RIGHT_BARS + 1
            if len(self.price_history) > max_bars:
                self.price_history = self.price_history[-max_bars:]
            
            # Ph√°t hi·ªán pivot
            high_pivot = self.detect_pivot(data["high"], "high")
            low_pivot = self.detect_pivot(data["low"], "low")

            if high_pivot or low_pivot:
                self.save_to_excel()  # C·∫≠p nh·∫≠t Excel khi c√≥ pivot m·ªõi

            return True

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m price data: {str(e)}", DEBUG_LOG_FILE)
            return False
    
               
    def detect_pivot(self, price, direction):
        """Ph√°t hi·ªán pivot v·ªõi logic TradingView ƒë∆°n gi·∫£n h√≥a"""
        try:
            # 1. Ki·ªÉm tra ƒë·ªß d·ªØ li·ªáu
            if len(self.price_history) < (self.LEFT_BARS + self.RIGHT_BARS + 1):
                save_log(f"‚è≥ ƒêang thu th·∫≠p d·ªØ li·ªáu: {len(self.price_history)}/{self.LEFT_BARS + self.RIGHT_BARS + 1} n·∫øn", DEBUG_LOG_FILE)
                return None

            # 2. L·∫•y center candle v√† c√°c n·∫øn xung quanh
            center_idx = self.LEFT_BARS
            center_candle = self.price_history[center_idx]
            left_bars = self.price_history[:center_idx]
            right_bars = self.price_history[center_idx + 1:]

            pivot_found = False
            pivot_type = None
            pivot_price = None

            # 3. Logic TV ƒë∆°n gi·∫£n: So s√°nh v·ªõi c√°c n·∫øn xung quanh
            if direction.lower() == "high":
                # Ki·ªÉm tra pivot high
                if all(center_candle['high'] > bar['high'] for bar in left_bars) and \
                   all(center_candle['high'] > bar['high'] for bar in right_bars):
                    pivot_found = True
                    pivot_price = center_candle['high']
                    # X√°c ƒë·ªãnh lo·∫°i pivot high (HH ho·∫∑c LH)
                    pivot_type = self._determine_pivot_type(pivot_price, "high")
                    
            elif direction.lower() == "low":
                # Ki·ªÉm tra pivot low
                if all(center_candle['low'] < bar['low'] for bar in left_bars) and \
                   all(center_candle['low'] < bar['low'] for bar in right_bars):
                    pivot_found = True
                    pivot_price = center_candle['low']
                    # X√°c ƒë·ªãnh lo·∫°i pivot low (LL ho·∫∑c HL)
                    pivot_type = self._determine_pivot_type(pivot_price, "low")

            # 4. N·∫øu t√¨m th·∫•y pivot, th√™m v√†o danh s√°ch
            if pivot_found and pivot_type:
                save_log(f"‚úÖ Ph√°t hi·ªán {pivot_type} t·∫°i ${pivot_price:,.2f}", DEBUG_LOG_FILE)
                return self._add_confirmed_pivot(pivot_type, pivot_price)

            return None

        except Exception as e:
            save_log(f"‚ùå L·ªói khi ph√°t hi·ªán pivot: {str(e)}", DEBUG_LOG_FILE)
            return None       
    
 
    def _add_confirmed_pivot(self, pivot_type, price, current_time=None):
        """Th√™m pivot ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v·ªõi logging chi ti·∫øt"""
        try:
            # N·∫øu kh√¥ng c√≥ current_time, d√πng self.current_time
            pivot_time = current_time if current_time else self.current_time
            
            save_log("\n=== Th√™m Confirmed Pivot ===", DEBUG_LOG_FILE)
            save_log(f"Type: {pivot_type}", DEBUG_LOG_FILE)
            save_log(f"Price: ${price:,.2f}", DEBUG_LOG_FILE)
            save_log(f"Time: {pivot_time}", DEBUG_LOG_FILE)
            
            # T·∫°o pivot m·ªõi v·ªõi key 'type' r√µ r√†ng
            new_pivot = {
                "type": pivot_type,  # ƒê·∫£m b·∫£o c√≥ key 'type'
                "price": float(price),
                "time": pivot_time
            }
            
            # Log th√¥ng tin pivot m·ªõi
            save_log(f"New pivot data: {new_pivot}", DEBUG_LOG_FILE)

            # Ki·ªÉm tra tr√πng l·∫∑p
            if new_pivot not in self.confirmed_pivots:
                self.confirmed_pivots.append(new_pivot)
                save_log(f"‚úÖ ƒê√£ th√™m pivot: {pivot_type} t·∫°i ${price:,.2f} ({pivot_time})", DEBUG_LOG_FILE)
                save_log(f"üìä T·ªïng s·ªë confirmed pivots: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
                return True

            save_log("‚ö†Ô∏è Pivot n√†y ƒë√£ t·ªìn t·∫°i", DEBUG_LOG_FILE)
            return False

        except Exception as e:
            save_log(f"‚ùå L·ªói khi th√™m confirmed pivot: {str(e)}", DEBUG_LOG_FILE)
            save_log(f"Stack trace: {traceback.format_exc()}", DEBUG_LOG_FILE)
            return False
    

    def get_recent_pivots(self, count=4):
        """L·∫•y c√°c pivot g·∫ßn nh·∫•t"""
        try:
            save_log("\n=== L·∫•y pivot g·∫ßn nh·∫•t ===", DEBUG_LOG_FILE)
            save_log(f"Y√™u c·∫ßu: {count} pivot", DEBUG_LOG_FILE)
            save_log(f"T·ªïng s·ªë pivot hi·ªán c√≥: {len(self.confirmed_pivots)}", DEBUG_LOG_FILE)
            
            recent = self.confirmed_pivots[-count:] if self.confirmed_pivots else []
            
            if recent:
                save_log("C√°c pivot ƒë∆∞·ª£c ch·ªçn:", DEBUG_LOG_FILE)
                for i, p in enumerate(recent, 1):
                    save_log(f"{i}. {p['type']} t·∫°i ${p['price']:,.2f} ({p['time']})", DEBUG_LOG_FILE)
            else:
                save_log("Kh√¥ng c√≥ pivot n√†o", DEBUG_LOG_FILE)
            
            return recent

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi l·∫•y recent pivots: {str(e)}", DEBUG_LOG_FILE)
            return []

    
    def classify_pivot(self, new_pivot):
        """Ph√¢n lo·∫°i pivot theo logic TradingView"""
        try:
            if len(self.confirmed_pivots) < 5:
                return None  # C·∫ßn √≠t nh·∫•t 5 pivot ƒë·ªÉ ph√¢n lo·∫°i

            # L·∫•y 5 pivot g·∫ßn nh·∫•t (bao g·ªìm pivot m·ªõi)
            recent_points = self.confirmed_pivots[-5:]
            if len(recent_points) < 5:
                return None

            # G√°n c√°c gi√° tr·ªã theo c√°ch ƒë·∫∑t t√™n trong TradingView
            a = new_pivot['price']  # Pivot hi·ªán t·∫°i
            b = recent_points[-2]['price']  # Pivot tr∆∞·ªõc ƒë√≥
            c = recent_points[-3]['price']  # Pivot tr∆∞·ªõc b
            d = recent_points[-4]['price']  # Pivot tr∆∞·ªõc c
            e = recent_points[-5]['price']  # Pivot tr∆∞·ªõc d

            # Logic ph√¢n lo·∫°i ch√≠nh x√°c theo TradingView
            pivot_type = None
            if new_pivot['direction'] == 'high':
                # Ki·ªÉm tra Higher High
                if a > b and a > c and c > b and c > d:
                    pivot_type = 'HH'
                # Ki·ªÉm tra Lower High
                elif ((a <= c and (b < c and b < d and d < c and d < e)) or 
                      (a > b and a < c and b > d)):
                    pivot_type = 'LH'
            else:  # direction == 'low'
                # Ki·ªÉm tra Lower Low
                if a < b and a < c and c < b and c < d:
                    pivot_type = 'LL'
                # Ki·ªÉm tra Higher Low
                elif ((a >= c and (b > c and b > d and d > c and d > e)) or 
                      (a < b and a > c and b < d)):
                    pivot_type = 'HL'

            # N·∫øu x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i, th√™m v√†o confirmed_pivots
            if pivot_type:
                confirmed_pivot = {
                    'type': pivot_type,
                    'price': new_pivot['price'],
                    'time': new_pivot['time']
                }
                if confirmed_pivot not in self.confirmed_pivots:
                    self.confirmed_pivots.append(confirmed_pivot)
                    save_log(f"\n‚úÖ X√°c nh·∫≠n {pivot_type} t·∫°i ${new_pivot['price']:,.2f} ({new_pivot['time']})", DEBUG_LOG_FILE)
                    return confirmed_pivot

            return None

        except Exception as e:
            save_log(f"\n‚ùå L·ªói khi ph√¢n lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            return None
    
              
    def save_to_excel(self):
        try:
            if not self.confirmed_pivots:
                save_log("Kh√¥ng c√≥ d·ªØ li·ªáu pivot ƒë·ªÉ l∆∞u", DEBUG_LOG_FILE)
                return

            # ƒê∆°n gi·∫£n h√≥a d·ªØ li·ªáu ch√≠nh
            main_data = []
            for pivot in self.confirmed_pivots:
                # T√≠nh % thay ƒë·ªïi so v·ªõi pivot tr∆∞·ªõc
                prev_pivot = next((p for p in self.confirmed_pivots 
                                 if p['time'] < pivot['time']), None)
                price_change = ((pivot['price'] - prev_pivot['price'])/prev_pivot['price'] * 100) if prev_pivot else 0
                
                main_data.append({
                    'Time': pivot['time'],
                    'Type': pivot['type'],
                    'Price': pivot['price'],
                    'Change%': price_change
                })
            
            df_main = pd.DataFrame(main_data)

            # S·ª≠ d·ª•ng ExcelWriter
            with pd.ExcelWriter('pivots.xlsx', engine='xlsxwriter') as writer:
                # Sheet ch√≠nh
                df_main.to_excel(writer, sheet_name='Pivot Analysis', index=False)
                workbook = writer.book
                worksheet = writer.sheets['Pivot Analysis']
                
                # ƒê·ªãnh d·∫°ng c·ªôt
                formats = {
                    'Price': workbook.add_format({'num_format': '$#,##0.00'}),
                    'Change%': workbook.add_format({'num_format': '+0.00%;-0.00%'}),
                    'Type': {
                        'HH': workbook.add_format({'font_color': 'green', 'bold': True}),
                        'LL': workbook.add_format({'font_color': 'red', 'bold': True}),
                        'HL': workbook.add_format({'font_color': 'orange'}),
                        'LH': workbook.add_format({'font_color': 'blue'})
                    }
                }
                
                # √Åp d·ª•ng ƒë·ªãnh d·∫°ng
                for idx, row in df_main.iterrows():
                    row_pos = idx + 1
                    worksheet.write(row_pos, df_main.columns.get_loc('Time'), row['Time'])
                    worksheet.write(row_pos, df_main.columns.get_loc('Type'), 
                                 row['Type'], formats['Type'][row['Type']])
                    worksheet.write(row_pos, df_main.columns.get_loc('Price'), 
                                 row['Price'], formats['Price'])
                    worksheet.write(row_pos, df_main.columns.get_loc('Change%'), 
                                 row['Change%']/100, formats['Change%'])

                # Th√™m bi·ªÉu ƒë·ªì
                chart = workbook.add_chart({'type': 'line'})
                chart.add_series({
                    'name': 'Price',
                    'categories': f'=Pivot Analysis!$A$2:$A${len(df_main) + 1}',
                    'values': f'=Pivot Analysis!$C$2:$C${len(df_main) + 1}',
                    'marker': {'type': 'circle'},
                    'data_labels': {'value': True, 'num_format': '$#,##0.00'}
                })
                
                # ƒê·ªãnh d·∫°ng bi·ªÉu ƒë·ªì
                chart.set_title({'name': 'Pivot Points Analysis'})
                chart.set_size({'width': 720, 'height': 400})
                worksheet.insert_chart('G2', chart)

            save_log(f"‚úÖ ƒê√£ l∆∞u {len(self.confirmed_pivots)} pivot v√†o Excel", DEBUG_LOG_FILE)
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi l∆∞u Excel: {str(e)}", DEBUG_LOG_FILE)
            
    def _get_pivot_comment(self, pivot_type, price_change):
        """T·∫°o comment cho pivot d·ª±a tr√™n lo·∫°i v√† % thay ƒë·ªïi"""
        comment = f"{pivot_type}: "
        if pivot_type in ['HH', 'HL']:
            comment += "Bullish " if price_change > 0 else "Caution "
        else:  # LH, LL
            comment += "Bearish " if price_change < 0 else "Caution "
        comment += f"({price_change:+.2f}%)"
        return comment
        
    def get_all_pivots(self):
        """L·∫•y t·∫•t c·∫£ c√°c pivot theo th·ª© t·ª± th·ªùi gian"""
        try:
            if not self.confirmed_pivots:
                return []
                
            # S·∫Øp x·∫øp theo th·ªùi gian
            sorted_pivots = sorted(
                self.confirmed_pivots,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )
            
            save_log(f"\nT·ªïng s·ªë pivot: {len(sorted_pivots)}", DEBUG_LOG_FILE)
            return sorted_pivots
                
        except Exception as e:
            save_log(f"‚ùå L·ªói khi l·∫•y all pivots: {str(e)}", DEBUG_LOG_FILE)
            return []    
                
    def _determine_pivot_type(self, current_price, direction):
        """X√°c ƒë·ªãnh lo·∫°i pivot d·ª±a tr√™n logic TV"""
        try:
            # L·∫•y pivot g·∫ßn nh·∫•t c√πng lo·∫°i (high/low)
            recent_pivots = self.get_recent_pivots(3)  # Ch·ªâ c·∫ßn 3 pivot g·∫ßn nh·∫•t
            if not recent_pivots:
                # Pivot ƒë·∫ßu ti√™n
                return "HH" if direction == "high" else "LL"

            last_pivot = None
            for pivot in recent_pivots:
                # T√¨m pivot c√πng lo·∫°i g·∫ßn nh·∫•t
                if (direction == "high" and pivot['type'] in ['HH', 'LH']) or \
                   (direction == "low" and pivot['type'] in ['LL', 'HL']):
                    last_pivot = pivot
                    break

            if not last_pivot:
                return "HH" if direction == "high" else "LL"

            # Logic ph√¢n lo·∫°i ƒë∆°n gi·∫£n theo TV
            if direction == "high":
                return "HH" if current_price > last_pivot['price'] else "LH"
            else:
                return "LL" if current_price < last_pivot['price'] else "HL"

        except Exception as e:
            save_log(f"‚ùå L·ªói khi x√°c ƒë·ªãnh lo·∫°i pivot: {str(e)}", DEBUG_LOG_FILE)
            return None   
# Create global instance
pivot_data = PivotData() 

# Export functions

# Cu·ªëi file s1.py th√™m d√≤ng n√†y
__all__ = ['pivot_data', 'detect_pivot', 'save_log', 'set_current_time_and_user']
    

def detect_pivot(price, direction):
    return pivot_data.detect_pivot(price, direction)
    
def get_binance_price(context: CallbackContext):
    try:
        klines = binance_client.futures_klines(symbol="BTCUSDT", interval="30m", limit=2)
        last_candle = klines[-2]  # Ensure we get the closed candle
        high_price = float(last_candle[2])
        low_price = float(last_candle[3])
        close_price = float(last_candle[4])
        
        price_data = {
            "high": high_price,
            "low": low_price,
            "price": close_price,
            "time": datetime.now().strftime("%H:%M")
        }
        pivot_data.add_price_data(price_data)
        
        save_log(f"Thu th·∫≠p d·ªØ li·ªáu n·∫øn 30m: High=${high_price:,.2f}, Low=${low_price:,.2f}", DEBUG_LOG_FILE)
        
        detect_pivot(high_price, "high")
        detect_pivot(low_price, "low")
        
    except Exception as e:
        logger.error(f"Binance API Error: {e}")
        save_log(f"Binance API Error: {e}", DEBUG_LOG_FILE)
        
def schedule_next_run(job_queue):
    try:
        # l√™n l·ªãch ch·∫°y khi ch·∫µn 30p
        now = datetime.now()
        next_run = now.replace(second=0, microsecond=0) + timedelta(minutes=(30 - now.minute % 30))
        delay = (next_run - now).total_seconds()
        
        save_log(f"L√™n l·ªãch ch·∫°y v√†o {next_run.strftime('%Y-%m-%d %H:%M:%S')}", DEBUG_LOG_FILE)
        # Thay ƒë·ªïi interval t·ª´ 300 (5 ph√∫t) sang 1800 (30 ph√∫t)
        job_queue.run_repeating(get_binance_price, interval=1800, first=delay)
    except Exception as e:
        logger.error(f"Error scheduling next run: {e}")
        save_log(f"Error scheduling next run: {e}", DEBUG_LOG_FILE)
     
def main():
    """Main entry point to start the bot."""
    try:
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        job_queue = updater.job_queue
        
        schedule_next_run(job_queue)  # Schedule first run
        
        print("Bot is running...")
        logger.info("Bot started successfully.")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"Error in main: {e}")
        save_log(f"Error in main: {e}", DEBUG_LOG_FILE)

if __name__ == "__main__":
    main()
